<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epam.FixAntenna.NetCore</name>
    </assembly>
    <members>
        <member name="P:Epam.FixAntenna.NetCore.Common.DateTimeHelper.CurrentTicks">
            <summary>
            Gets number of ticks representing current UTC time. One tick is 100 ns, equal to DateTime.Tick unit.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.DateTimeHelper.CurrentSeconds">
            <summary>
            Gets number of seconds representing current UTC time.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.DateTimeHelper.CurrentMilliseconds">
            <summary>
            Gets number of milliseconds representing current UTC time.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.DateTimeHelper.CurrentMicroseconds">
            <summary>
            Gets number of microseconds representing current UTC time.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.DateTimeHelper.CurrentNanoseconds">
            <summary>
            Gets number of nanoseconds representing current UTC time.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.GetWeekOfMonth(System.DateTime)">
            <summary>
            Get week of month according to the Gregorian calendar
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.GetNanosecondsOfSecond(System.DateTime)">
            <summary>
            Get all nanoseconds of last second, including milliseconds and microseconds.
            </summary>
            <param name="self"></param>
            <returns>Return value could be be between 0 and 999999999</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.GetNanosecondsOfSecond(System.DateTimeOffset)">
            <summary>
            Get all nanoseconds of last second, including milliseconds and microseconds.
            </summary>
            <param name="self"></param>
            <returns>Return value could be be between 0 and 999999999</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.GetNanosecondsOfMillisecond(System.DateTimeOffset)">
            <summary>
            Get nanoseconds of last millisecond, including microseconds.
            </summary>
            <param name="self"></param>
            <returns>Return value could be be between 0 and 999999</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.GetDate(System.Int32,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Get nanoseconds of last millisecond, including microseconds.
            </summary>
            <returns>Return value could be be between 0 and 999999</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.ToDateTimeString(System.Int64,System.String)">
            <summary>
            Converts amount of milliseconds <c>timestamp</c> to string representation using <c>format</c> string.
            </summary>
            <param name="timestamp">Milliseconds.</param>
            <param name="format">Format string.</param>
            <returns>Returns string value of DateTime converted from number of milliseconds.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.TotalMilliseconds(System.DateTime)">
            <summary>
            Gets total number of milliseconds from given DateTime value.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.TotalMilliseconds(System.DateTimeOffset)">
            <summary>
            Gets total number of milliseconds from given DateTimeOffset value.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.FromMilliseconds(System.Int64)">
            <summary>
            Creates DateTime <see cref="T:System.DateTime"/> from amount of milliseconds (UTC).
            </summary>
            <param name="milliseconds">Milliseconds passed fro</param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DateTimeHelper.TryParseTimeZoneOffset(System.String,System.TimeSpan@)">
            <summary>
            Parse input <paramref name="timeZoneId">string</paramref> to <see cref="T:System.TimeSpan"/> offset from UTC.
            Can use system time zone Id or try to parse strings like GMT+03:30.
            </summary>
            <param name="timeZoneId">Time zone Id.</param>
            <param name="offset">Out parameter with parsed offset.</param>
            <returns>Returns <see cref="T:System.TimeSpan"/> that represents time offset from UTC for given time zone Id.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DictionaryHelper.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
             Searches <c>source</c> for <c>key</c> and returns value or <c>default()</c> if <c>key</c> is not found.
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DictionaryHelper.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Searches <c>source</c> for <c>key</c> and returns value or <c>defaultValue</c> if <c>key</c> is not found.
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DictionaryHelper.PutAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copies all of the key/value pairs to source array.
            If key is already present in <c>source</c> its value is overwritten.  
            </summary>
            <param name="source"></param>
            <param name="collection"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DictionaryHelper.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Adds values to <c>source</c> collection if they are not already present.
            </summary>
            <param name="source"></param>
            <param name="collection"></param>
            <typeparam name="T1"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.DictionaryHelper.RemoveAll``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes all of the values of <c>collection</c> from <c>source</c>.
            </summary>
            <param name="source"></param>
            <param name="collection"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.FixVersion">
            <summary>
            FIXVersion type safe enum
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.FixVersion.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates the <c>FIXVersion</c>.
            </summary>
            <param name="id"> FIX version ID </param>
            <param name="messageVersion"> the message fix version </param>
            <param name="fixVersion"> the number of fix version </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.FixVersion.FixVersionEnum">
            <summary>
            Gets supported fix versions.
            </summary>
            <returns> supported fix version </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.FixVersion.IsFixt">
            <summary>
            Checks if this version is FIXT.
            </summary>
            <returns> true if is, otherwise false </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.FixVersion.FixtVersion">
            <summary>
            Gets the fix version number code.
            </summary>
            <returns> code of fix version
             </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.FixVersion.Id">
            <summary>
            Returns ID e.g.: FIX40, FIX41
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.FixVersion.MessageVersion">
            <summary>
            Returns the message version representation e.g.: FIX.4.0, FIX.4.1
            </summary>
            <value> messageVersion </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.FixVersion.CreateInstanceByMessageVersion(System.String,System.Int32)">
            <summary>
            Returns the FIXVersion by messageVersion string (e.g.: FIX.4.0, FIX.4.1)
            </summary>
            <param name="messageVersion"> message version </param>
            <param name="fixtVersion"> FIXT version </param>
            <returns> FIXVersion </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.FixVersion.GetInstanceByMessageVersion(System.String)">
            <summary>
            Gets <c>FixVersion</c> instance be string
            representation of fix session, FIX.4.0 - FIXT.1.1.
            </summary>
            <param name="messageVersion"> the message version </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.FixVersion.GetInstanceByFixtVersion(System.Int32)">
            <summary>
            Gets fix version by number.
            </summary>
            <param name="fixNumber"> the ranges value for this
             parameter should be from 2 to 9(FIX.4.0 ... FIX.5.0 sp2), the value for FIXT.1.1 should be -1.
            </param>
            <exception cref="T:System.ArgumentException"> if fix session not exists </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.FixVersion.CompareTo(Epam.FixAntenna.NetCore.Common.FixVersion)">
            <summary>
            Compares this object with the specified object for order.
            </summary>
            <param name="fixVersion"> the fix version to compare
            </param>
            <returns> a negative integer, zero, or a positive integer as this object
            	is less than, equal to, or greater than the specified object.
             </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.BaseLog.ToMessage(System.Object)">
            <summary>
            Returns string representation of the input object using default object.ToString().
            </summary>
            <param name="obj">Input object.</param>
            <returns>String representation of the input object.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.BaseLog.ToSafeString(System.String,System.Int32)">
            <summary>
            This method hides quoted password value from input string.
            </summary>
            <remarks>Story BBP-17118: Hide passwords in application logs.</remarks>
            <param name="msg">Input object.</param>
            <param name="startIndex">Start index to search 'Password=' string, default value 0.</param>
            <returns>String with password replaced with asterisks.</returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog">
            <summary>
            Default log implementation.
            This log supports only <c>error, fatal and warn</c> levels.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.IsDebugEnabled">
            <summary>
            Always returns false. </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsDebugEnabled"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Debug(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Debug(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.IsErrorEnabled">
            <summary>
            Always returns true. </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsErrorEnabled"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Error(System.Object)">
            <summary>
            Writes error message to err output stream. </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Error(System.Object)"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Error(System.Object,System.Exception)">
            <summary>
            Writes error message to err output stream. </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Error(System.Object,System.Exception)"></seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.IsFatalEnabled">
            <summary>
            Always returns true. </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsFatalEnabled"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Fatal(System.Object)">
            <summary>
            Writes error message to err output stream. </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Fatal(System.Object)"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Fatal(System.Object,System.Exception)">
            <summary>
            Writes error message to err output stream. </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Fatal(System.Object,System.Exception)"></seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.IsInfoEnabled">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Info(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Info(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.IsTraceEnabled">
            <summary>
            Always returns false. </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsTraceEnabled"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Trace(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Trace(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.IsWarnEnabled">
            <summary>
            Always returns true. </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsWarnEnabled"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Warn(System.Object)">
            <summary>
            Writes error message to output stream. </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Warn(System.Object)"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.DefaultLog.Warn(System.Object,System.Exception)">
            <summary>
            Writes error message to output stream. </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Warn(System.Object,System.Exception)"></seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Logging.DefaultLogFactory">
            <summary>
            Factory for default loggers.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Logging.ILog">
            <summary>
            The base logging interface.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the DEBUG level. </summary>
            <param name="message"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the DEBUG level including the stack trace of the Throwable. </summary>
            <param name="message"> the message </param>
            <param name="throwable"> the error
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Error(System.Object)">
            <summary>
            Log a message object with the ERROR level. </summary>
            <param name="message"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the DEBUG level including the stack trace of the Throwable. </summary>
            <param name="message"> the message </param>
            <param name="throwable"> the error
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the FATAL level. </summary>
            <param name="message"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the FATAL level including the stack trace of the Throwable. </summary>
            <param name="message"> the message </param>
            <param name="throwable"> the error
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Info(System.Object)">
            <summary>
            Log a message object with the INFO level. </summary>
            <param name="message"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the INFO level including the stack trace of the Throwable. </summary>
            <param name="message"> the message </param>
            <param name="throwable"> the error
             </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsDebugEnabled">
            <summary>
            Check whether this category is enabled for the DEBUG Level.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsErrorEnabled">
            <summary>
            Check whether this category is enabled for the ERROR Level.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsFatalEnabled">
            <summary>
            Check whether this category is enabled for the FATAL Level.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsInfoEnabled">
            <summary>
            Check whether this category is enabled for the INFO Level.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsTraceEnabled">
            <summary>
            Check whether this category is enabled for the TRACE Level.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.ILog.IsWarnEnabled">
            <summary>
            Check whether this category is enabled for the WARN Level.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Trace(System.Object)">
            <summary>
            Log a message object with the TRACE level. </summary>
            <param name="message"> the message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the trace level including the stack trace of the Throwable. </summary>
            <param name="message"> the message </param>
            <param name="throwable"> the error
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the WARN level. </summary>
            <param name="message"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the WARN level including the stack trace of the Throwable. </summary>
            <param name="message"> the message </param>
            <param name="throwable"> the error
             </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Logging.ILogFactory">
            <summary>
            Log factory interface.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Logging.LogFactory">
            <summary>
            The log factory implementation.
            Provides functionality for create and configure NLog or Common Logging instance,
            if no one is exists, the DefaultLog implementation is used instead.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.LogFactory.GetLog(System.Type)">
            <summary>
            Gets log instance.
            </summary>
            <param name="aClass"> the class </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.LogFactory.GetLog(System.String)">
            <summary>
            Gets log instance.
            </summary>
            <param name="name"> the logical name of the <see cref="T:Epam.FixAntenna.NetCore.Common.Logging.ILog"/> instance </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Debug(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Debug(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Error(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Error(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Fatal(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Fatal(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Info(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Info(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.IsDebugEnabled">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.IsErrorEnabled">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.IsFatalEnabled">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.IsInfoEnabled">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.IsTraceEnabled">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.IsWarnEnabled">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Trace(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Trace(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Warn(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Logging.NLogWrapper.Warn(System.Object,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ParamSource">
            <summary>
            Source of the value of a parameter
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ParamSources">
            <summary>
            Storage for sources of parameters.
            Singleton.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ParamSources.Get(System.String,System.String)">
            <summary>
            Returns the source of a parameter
            </summary>
            <param name="paramName"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ParamSources.Set(System.String,Epam.FixAntenna.NetCore.Common.ParamSource,System.String)">
            <summary>
            Sets the parameter source
            </summary>
            <param name="paramName"></param>
            <param name="paramSource"></param>
            <param name="sessionId"></param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Pool.IPool`1">
            <summary>
            Pool interface to get object from pool and return it back to pool
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Pool.PoolFactory">
            <summary>
            Pool factory
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Pool.Provider.AbstractPoolableProvider`1">
            <summary>
            Abstract poolable object provider
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Pool.Provider.IPoolableProvider`1">
            <summary>
            Poolable object provider with ability to create/validate/activate/passivate/destroy
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.ConfiguredDirResourceLoader">
            <summary>
            Looks for resources within configured directory.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.ConfiguredDirResourceLoader.#ctor(Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create <c>ConfiguredDirResourceLoader</c>.
            </summary>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.CurrentDirResourceLoader">
            <summary>
            Looks for resources within current directory
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.CurrentDirResourceLoader.#ctor">
            <summary>
            Create <c>CurrentDirResourceLoader</c>.
            The next nextLoader is DummyResourceLoader.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.CurrentDirResourceLoader.#ctor(Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create <c>CurrentDirResourceLoader</c>.
            </summary>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.CurrentDirResourceLoader.#ctor(System.String,Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create <c>CurrentDirResourceLoader</c>.
            </summary>
            <param name="innerPath"> path inside current directory; should not contain resource name </param>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.DictionaryLoader.LoadResource(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.DummyResourceLoader">
            <summary>
            Dummy class. Just throws ResourceNotFoundException
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.DummyResourceLoader.#ctor">
            <summary>
            Creates <c>DummyResourceLoader</c> loader.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.DummyResourceLoader.LoadResource(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.EmbeddedResourceLoader">
            <summary>
            Looks for embedded resources within libraries that are in the callstack.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.EmbeddedResourceLoader.#ctor">
            <summary>
            Create <c>EmbeddedResourceLoader</c>.
            The next nextLoader is <c>DummyResourceLoader</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.EmbeddedResourceLoader.#ctor(System.String)">
            <summary>
            Create <c>EmbeddedResourceLoader</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.EmbeddedResourceLoader.#ctor(System.String,Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create <c>EmbeddedResourceLoader</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.EmbeddedResourceLoader.LoadResource(System.String)">
            <summary>
            Look for embedded resource within libraries that are in the callstack of this method
            </summary>
            <param name="resourceName">Resource name</param>
            <returns>Stream with resource</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.GenericFileResourceLoader.#ctor(System.String)">
            <summary>
            Create the <c>GenericFileResourceLoader</c>.
            The next nextLoader is DummyResourceLoader.
            </summary>
            <param name="path"> path; should not contain resource name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.GenericFileResourceLoader.#ctor(System.String,Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create the <c>GenericFileResourceLoader</c>.
            </summary>
            <param name="path"> path; should not contain resource name </param>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.GenericFileResourceLoader.LoadResource(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.GenericFileResourceLoader.GetResourcePath(System.String)">
            <summary>
            Get resource path according to which file would be loaded
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.HomeDirResourceLoader">
            <summary>
            Looking for resource in user home directory.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.HomeDirResourceLoader.#ctor">
            <summary>
            Create the <c>HomeDirResourceLoader</c>.
            The next nextLoader is DummyResourceLoader.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.HomeDirResourceLoader.#ctor(Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create the <c>HomeDirResourceLoader</c>.
            </summary>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.HomeDirResourceLoader.#ctor(System.String,Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create the <c>HomeDirResourceLoader</c>.
            </summary>
            <param name="innerPath"> path inside user home directory; should not contain resource name </param>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.LibraryDirResourceLoader">
            <summary>
            Looks for resources within current directory
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.LibraryDirResourceLoader.#ctor(System.String,Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader)">
            <summary>
            Create <c>CurrentDirResourceLoader</c>.
            </summary>
            <param name="innerPath"> path inside current directory; should not contain resource name </param>
            <param name="nextLoader"> the next nextLoader </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader">
            <summary>
            Standard interface to implement by every <c>ResourceLoader</c> strategy.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader.DefaultLoader">
            <summary>
            Default resource loader. <br/>
            Order of looking for resources: <br/>
            1. Files inside configured directory <br/>
            2. Files inside current directory <br/>
            3. Files inside home directory <br/>
            4. Embedded resources inside libraries from method callstack.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader.DictionaryLoader">
            <summary>
            Default resource loader for dictionaries. <br/>
            Order of looking for dictionaries:
            1. Files inside current directory <br/>
            2. Embedded resources inside libraries from method callstack
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader.LoadResource(System.String)">
            <summary>
            Load resource
            </summary>
            <param name="resourceName">resource name </param>
            <returns>Stream with resource</returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceNotFoundException">if resource is not found and no parent ResourceLoader is available</exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceNotFoundException">
            <summary>
            Resource not found exception. </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.Common.ResourceLoading.ResourceLoader"></seealso>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1._items">
            <summary>
            The queued items
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1._count">
            <summary>
            Number of items in the queue
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1._putIndex">
            <summary>
            items index for next put, offer, or add.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1._takeIndex">
            <summary>
            items index for next take, poll or remove
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1.Size">
            <summary>
            Returns the number of elements in this queue.
            </summary>
            <value> the number of elements in this queue </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1.Inc(System.Int32)">
            <summary>
            Circularly increment i.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1.Insert(`0)">
            <summary>
            Inserts element at current put position
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Queue.SynchronizeBlockingQueue`1.ExtractItem">
            <summary>
            Extracts element at current take position.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Threading.Runnable.FixedRunnablePool`1">
            <summary>
            Pool have fixed size.<p/>
            Create new objects if pool is empty.<p/>
            Skip objects if the pool is full. Object should be collected by GC in this case.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Runnable.FixedRunnablePool`1.Get">
            <summary>
            Get object from pool. Create new object if pool is empty.
            @return
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Runnable.FixedRunnablePool`1.Release(`0)">
            <summary>
            Try return object to the pool. Skip object if the pool is full. </summary>
            <param name="ob"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Runnable.IRunnablePool`1.Get">
            <summary>
            Get object from pool
            @return
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Threading.Runnable.IRunnablePool`1.Release(`0)">
            <summary>
            Return object to the pool </summary>
            <param name="ob"> </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer">
            <summary>
            The byte buffer helper class.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.#ctor(System.Int32)">
            <summary>
            Creates the <c>ByteBuffer</c> with allocated byte buffer.
            The default buffer length if 1024 bytes.
            </summary>
            <param name="size">buffer size in bytes</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.Add(System.Byte[])">
            <summary>
            Appends the array argument to internal buffer.
            </summary>
            <returns> a reference to this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.Add(System.Byte)">
            <summary>
            Adds byte to buffer.
            </summary>
            <param name="b"> a byte </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.Add(System.Char)">
            <summary>
            Adds char to buffer.
            </summary>
            <param name="b"> a char </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.Add(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends the array argument to internal buffer.
            </summary>
            <returns> a reference to this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.IsAvailable(System.Int32)">
            <summary>
            Checks if buffer has a numOfBytes.
            </summary>
            <param name="length"> the requested space </param>
            <returns> boolean true if has </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.Offset">
            <summary>
            Gets or sets offset of buffer.
            </summary>
            <value> the new offset </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.IncreaseBuffer(System.Int64)">
            <summary>
            Increases the buffer.
            </summary>
            <param name="increase"> the number of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.GetByteArray">
            <summary>
            Gets internal byte buffer (buffer itself, NOT a copy)
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.GetByteArray(System.Int32,System.Int32)">
            <summary>
            Gets internal byte buffer.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.ResetBuffer">
            <summary>
            Resets the buffer.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.Length">
            <summary>
            Gets buffer length.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.GetBulk">
            <summary>
            Gets this ByteBuffer as byte array.
            </summary>
            <returns>Byte array of this ByteBuffer.</returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.IsEmpty">
            <summary>
            Returns true if buffer is empty.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.WrapBuffer(System.Byte[])">
            <summary>
            Creates new ByteBuffer from byte[].
            </summary>
            <param name="buffer">Array of bytes to wrap.</param>
            <returns>New instance of ByteByffer.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.GetSubArray(System.Int32@,System.Int32@)">
            <summary>
            Get part of ByteBuffer as array of bytes.
            </summary>
            <param name="start">Offset of part.</param>
            <param name="length">Length of part.</param>
            <returns>Byte array with part of ByteBuffer.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.CheckingUtils.TryCheckWithinTimeout(Epam.FixAntenna.NetCore.Common.Utils.SupplierWithException{System.Nullable{System.Boolean}},System.TimeSpan)">
            <summary>
            Continuously check expression inside lambda till condition or timeout is met.
            No exception is thrown if condition is not met within the given timeout.
            Condition is checked every 5 ms.
            </summary>
            <param name="supplier">Delegate to be checked</param>
            <param name="timeout">Timeout</param>
            <returns>Check result</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.CheckingUtils.CheckWithinTimeout(Epam.FixAntenna.NetCore.Common.Utils.SupplierWithException{System.Nullable{System.Boolean}},System.TimeSpan)">
            <summary>
            Continuously check expression inside lambda till condition or timeout is met.
            <see cref="T:System.TimeoutException"/> is thrown if condition is not met within the given timeout.
            Condition is checked every 5 ms.
            </summary>
            <param name="supplier">Delegate to be checked</param>
            <param name="timeout">Timeout</param>
            <exception cref="T:System.TimeoutException"></exception>
            <returns>Check result</returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Utils.SubnetUtils">
            <summary>
            This class supposed to be the partial replacement of the Apache SubnetUtils class
            for one use case: check if the host is in IP range.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision">
            <summary>
            This enum specifies the timestamp precision.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Minute">
            <summary>
            Minutes precision
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Second">
            <summary>
            Seconds precision
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Milli">
            <summary>
            Milliseconds precision
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Micro">
            <summary>
            Microseconds precision
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Nano">
            <summary>
            Nanoseconds precision
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Common.Utils.Version.PrintVersionOfProduct(System.Type,Epam.FixAntenna.NetCore.Common.Logging.ILog)">
            <summary>
            Prints the version of a product.
            </summary>
            <param name="aClass"> the class from product jar FILE </param>
            <param name="log">    the log </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Xml.IFindable">
            
             <summary>
             This is marker interface for marshal and unmarshal
             functionality.
             Each type that supports the marshal and unmarshal functionality should be implement this interface.
             </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Common.Xml.IType">
            <summary>
            Interface  for all dictionaries of FIX protocol.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Configuration.Config">
            <summary>
            Engine configuration class.
            Engine used <c>Configuration.GetGlobalConfiguration</c> method to configure itself,
            user can change this properties in runtime only for initiator sessions, not for acceptors.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetOnSwitchToBackup">
            <summary>
            Reset sequences on switch to backup.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetOnSwitchToPrimary">
            <summary>
            Reset sequences on switch back to primary connection
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SwitchOffSendingMultipleResendRequests">
            <summary>
            This parameter switches on mode which prevent sending multiple RR for the same gap
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AutoreconnectAttempts">
            <summary>
            Specifies number of autoreconnect attempts before give up:
            negative number = no reconnects (NoAutoreconnect), <br/>
            0 - infinite number of reconnects (InfinityAutoreconnect), <br/>
            positive number = number of reconnect attempts <br/>
            Please use 0 wisely - it means reconnect infinitely
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.StorageFactory">
            <summary>
            Allows user to replace storage factory with user own implementation
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SessionSequenceManager">
            <summary>
            Allows user to replace session sequence manager with user own implementation
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SendRejectIfApplicationIsNotAvailable">
            <summary>
            Sends a reject if user application is not available.
            If the value is false and client application is not available, acts like a "black hole" - accepts and ignores all valid messages.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EnableAutoSwitchToBackupConnection">
            <summary>
            Enable auto switching to backup connection, the default value is true.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.CyclicSwitchBackupConnection">
            <summary>
            Enable switch to primary connection, default value true
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AutoreconnectDelayInMs">
            <summary>
            Specifies delay between autoreconnect attempts in milliseconds, default value is 1000ms.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SuppressSessionQualifierTagInLogonMessage">
            <summary>
            Suppress session qualifier tag in logon message.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.LogonMessageSessionQualifierTag">
            <summary>
            Specifies tag number for session qualifier in logon message.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AutostartAcceptorCommandPackage">
            <summary>
            Name of the custom package for admin commands processing
            This property is using for the extending the count of admin-commands.
            By default package is null, but if custom commands is present this property should be initialized,
            for example (autostart.acceptor.commands.package=com.admin.commands).
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EnableNagle">
            <summary>
            Disable/enable Nagle's algorithm for TCP sockets.
            This option has the opposite meaning to TCP_NO_DELAY socket option.
            With enabled Nagle's algorithm will be better throughput (TcpNoDelay=false)
            but with disabled option you will get better result for latency on single message (TcpNoDelay=true)
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SequenceResendManagerMessageBufferSize">
            <summary>
            Limits the maximum number of messages buffered during the resend request.
            The parameter must be integer and positive.
            Otherwise the default value for this parameter will be used.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResendRequestNumberOfMessagesLimit">
            <summary>
            Limits the maximum number of messages during the resend request.
            If more messages are requested, the reject will be sent in response.
            The parameter must be integer and not negative.
            Otherwise the default value for this parameter will be used.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.WelformedValidator">
            <summary>
            Toggle on/off validation of fields with tag 8, 9, 35 and 10 values.
            If "validation=false" then this parameter always reads as false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AllowedFieldsValidation">
            <summary>
            Toggle on/off validation of allowed message fields.
            If "validation=false" then this parameter always reads as false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.RequiredFieldsValidation">
            <summary>
            Toggle on/off validation of required message fields.
            If "validation=false" then this parameter always reads as false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.FieldTypeValidation">
            <summary>
            Toggle on/off validation of field values according to defined data types.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ConditionalValidation">
            <summary>
            enable/disable conditional validator,
            default value is false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.GroupValidation">
            <summary>
            Enable/disable group validator,
            default value is false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.DuplicateFieldsValidation">
            <summary>
            Toggle on/off validation of duplicated message fields.
            If "validation=false" then this parameter always reads as false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.FieldOrderValidation">
            <summary>
            Toggle on/off validation of fields order in message.
            With this option engine will check that tags from the header, body and trailer were not mixed up.
            If "validation=false" then this parameter always reads as false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.Delay">
            <summary>
            Sending time delay for incoming messages in milliseconds.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TimestampsPrecisionInTags">
            <summary>
            The desired precision of timestamps in appropriate tags of the FIX message.
            Valid values: Second | Milli | Micro | Nano.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AllowedSecondsFractionsForFix40">
            <summary>
            Use timestamp with precision defined by timestampsPrecisionInTags option for FIX 4.0 if enabled.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.Accuracy">
            <summary>
            Measurement accuracy in milliseconds, default value is 1 ms.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.CheckSendingTimeAccuracy">
            <summary>
            Toggle on/off the check of SendingTime (52) accuracy for received messages.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EnableMessageRejecting">
            <summary>
            Enable/disable message rejecting, default value is false
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EnableMessageStatistic">
            <summary>
            Enable/disable message statistic, default value is true
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.QueueThresholdSize">
            <summary>
            Maximum number of messages in a queue before we pause a pumper thread to let the queued message be sent out.
            <ul>
            <li>Set rather high for max performance.</li>
            <li>Set 1 or pretty low for realtime experience.</li>
            <li>0 - disable queue control, do not pause the pumper thread.</li>
            </ul>
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxMessagesToSendInBatch">
            <summary>
            The maximum number of messages in buffer before we
            write message to transport.
            NOTE: Value for this property should be always > 0.
            default value is 10
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxMessageSize">
            <summary>
            Maximum message size supported by this FIX engine instance.
            The parameter must be integer and not negative. Otherwise, the default value for this parameter will be used.
            Should be set to a greater than expected maximum message by approximately 1-5%.
            <ul>
            <li>positive number - maximum allowed size of incoming message</li>
            <li>0 - any size message allowed (not recommended, could lead to OutOfMemoryError if counterparty will send invalid stream).</li>
            </ul>
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ValidateCheckSum">
            <summary>
            Validate or not message CheckSum(10)
            Is relevant only if validateGarbledMessage=true
            default value is true
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ValidateGarbledMessage">
            <summary>
            Toggle on/off validation garbled message for incoming flow.
            Validates the existence and order of the following fields: BeginString(8), BodyLength(9), MsgType(35), CheckSum(10).
            Also validates value of BodyLength(9).
            default value is true
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MarkIncomingMessageTime">
            <summary>
            Transport will set the additional time mark in nanoseconds for incoming messages right after read data from
            socket if this option is set to true.
            AbstractFIXTransport.getLastReadMessageTimeNano() method could return this value.
            <p/>
            default value is false
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IncludeLastProcessed">
            <summary>
            Include last processed sequence 369 tag in every message for FIX versions>4.2
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ForcedLogoffTimeout">
            <summary>
            Sets the disconnect timeout in seconds for a Logout ack only when waiting for.
            The Logout ack from the counterparty is caused by the incoming sequence number less then expected.
            The parameter must be integer and not negative.
            Otherwise the default value for this parameter will be used.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.LoginWaitTimeout">
            <summary>
            Sets the timeout interval after which a connected acceptor session will be timed out
            and disposed if Logon is not received for this session.
            default value is 5000
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.LogoutWaitTimeout">
            <summary>
            Sets disconnect timeout in seconds for logoff,
            default value is equal to session's HeartbeatInterval
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.HandleSeqnumAtLogon">
            <summary>
            This parameter specifies whether to process 789-NextExpectedMsgSeqNum tag.
            If true, outgoing sequence number must be updated by 789-NextExpectedMsgSeqNum tag value.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.DisconnectOnLogonHbtMismatch">
             <summary>
             Check and disconnect session if Logon answer contains other HeartBtInt(108) value than defined in session
             configuration.
            
             Default value: true
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.InMemoryQueue">
            <summary>
            Sets queue mode. Set to "false" for persistent queue (slower but no messages will be lost),
            "true" for in memory queue (faster but less safe, some messages may be lost).
            This property makes sense only if FilesystemStorageFactory is set.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MemoryMappedQueue">
            <summary>
            Sets persistent queue mode for MMFStorageFactory.
            Set to "false" for persistent queue (slower but no messages will be lost),
            "true" for memory mapped queue (faster but less safe, some messages may be lost)
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IncomingStorageIndexed">
            <summary>
            True will enables incoming storage index.
            Enabled index - messages in incoming storage will be available via API
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.OutgoingStorageIndexed">
            <summary>
            Outgoing storage index.
            This property makes sense only if FilesystemStorageFactory or MMFStorageFactory is set.
            Set to "true" to enable outgoing storage index that is to be used in decision making in resend request handler.
            Enabled index - support resend request, disabled - never resend messages and always send gap fill.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.FaHome">
            <summary>
            Sets path to fa home.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.StorageDirectory">
            <summary>
            Storage directory could be either absolute path (like /tmp/logs or c:\fixengine\logs)
            or relative path e.g. logs (this one is relative to the application start directory).
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.RawTags">
            <summary>
            Raw tags. List all tags here engine should treat as raw. Raw tag may contain SOH symbol inside it
            and it should be preceided by rawTagLength field.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.Validation">
            <summary>
            Toggle on/off validation of incoming messages according to base of custom dictionaries
            Following parameters with the Validation suffix works only if this property set to true.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.OutgoingLogFile">
            <summary>
            Outgoing log filename template. {0} will be replaced with actual sessionID, {1} with actual SenderCompID,
            {2} with actual TargetCompID and {4} with actual session qualifier.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.BackupOutgoingLogFile">
            <summary>
            Backup outgoing log filename template. {0} will be replaced with actual sessionID, {1} with SenderCompID,
            {2} with actual TargetCompID, {3} with timestamp and {4} with actual session qualifier.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IncomingLogFile">
            <summary>
            Incoming log filename template. {0} will be replaced with actual sessionID, {1} with actual SenderCompID,
            {2} with actual TargetCompID and {4} with actual session qualifier.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.BackupIncomingLogFile">
            <summary>
            Backup incoming log filename template. {0} will be replaced with actual sessionID, {1} with SenderCompID,
            {2} with actual TargetCompID, {3} with timestamp and {4} with actual session qualifier.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SessionInfoFile">
            <summary>
            Info filename template. {0} will be replaced with actual sessionID, {1} with actual SenderCompID,
            {2} with actual TargetCompID and {4} with actual session qualifier.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.OutgoingQueueFile">
            <summary>
            Out queue file template. {0} will be replaced with actual sessionID, {1} with actual SenderCompID,
            {2} with actual TargetCompID and {4} with actual session qualifier.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ForceSeqNumReset">
            <summary>
            This parameter allow to automatically resolve sequence gap problem (for example, when there is every day sequence reset).
            Supported values: Always, OneTime, Never.
            If this parameter is set to:
            <ul>
            <li>Always - session will send logon with 34= 1 and 141=Y every times (during connection and reconnection)</li>
            <li>OneTime - session will send logon with 34= 1 and 141=Y only one time (during connection)</li>
            <li>Never - this means that user can sets the 34= 1 and 141=Y from session parameters by hand</li>
            </ul>
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.LogFilesTimeZone">
            <summary>
            Time zone for prefix in out/in logs
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TimestampsInLogs">
            <summary>
            Ability to write timestamps in the in/out log files.
            Default value true.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TimestampsPrecisionInLogs">
            <summary>
            The desired pecision of timestamps in the in/out log files.
            Valid values: Milli | Micro | Nano.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.BackupTimestampsPrecision">
            <summary>
            The desired pecision of timestamps in names of storage backup files.
            Valid values: Milli | Micro | Nano.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxStorageSliceSize">
            <summary>
            Specifies the maximum size of the storage file after which the engine creates a new storage file with a different name.
            Parameter must be integer and not negative.
            This property makes sense only if SlicedFileStorageFactory is set.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxStorageGrowSize">
            <summary>
            Sets the maximum storage grow size in bytes.
            Parameter must be integer and not negative.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MmfStorageGrowSize">
            <summary>
            Sets the storage grow size in bytes for memory mapped implementation.
            Parameter must be integer and not negative.
            This property makes sense only if MMFStorageFactory is set.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MmfIndexGrowSize">
            <summary>
            Sets the index grow size in bytes for memory mapped implementation.
            Used only for storage with memory mapped index file.
            Parameter must be integer and not negative.
            This property makes sense only if MMFStorageFactory is set and at least one of incomingStorageIndexed or outgoingStorageIndexed is true.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.StorageGrowSize">
            <summary>
            Enable/disable storage grow.
            Default value: false.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ConnectAddress">
            <summary>
            Engine's local IP address to send from.
            It can be used on a multi-homed host for a FIX Engine that will only send IP datagrams from one of its addresses.
            If this parameter is commented, the engine will send IP datagrams from any/all local addresses.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxRequestResendInBlock">
            <summary>
            The max requested messages in block. This parameter defines how many messages will be request in one block.
            The value must be integer and not less than 0.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxDelayToSendAfterLogon">
            <summary>
            The pause before sending application messages from outgoing queue in milliseconds after receiving Logon.
            This pause is need to handle possible incoming ResendRequest. In other case a bunch of messages with
            invalid sequence can be sent.
            The value must be integer and not less than 0.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.PerformResetSeqNumTime">
            <summary>
            This parameter specifies whether to reset sequence number at time defined in resetSequenceTime.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetSequenceTime">
            <summary>
            This parameter specifies GMT time when the FIX Engine initiates the reset of sequence numbers.
            Valid time format: HH:MM:SS
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetSequenceTimeZone">
            <summary>
            Time zone id for resetSequenceTime property.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.StorageCleanupMode">
            <summary>
            This parameter specifies cleaning mode for message storage of closed sessions.
            Valid values: None | Backup | Delete.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.StorageBackupDir">
            <summary>
            This parameter specifies back-up directory for message logs
            of closed sessions when storageCleanupMode=backup.
            Valid values: existent directory name (relative or absolute path)
            Default value not defined
            See FA_HOME description in the Configuration section of the
            FIX Antenna .NET Core User and Developer Manual.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IntraDaySeqnumReset">
            <summary>
            This parameter specifies whether to reset sequence number after session is closed.
            Valid values: true | false
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IgnoreResetSeqNumFlagOnReset">
            <summary>
            This parameter specifies whether to send ResetSeqNumFlag (141=Y) after sequence rest or not.
            Valid values: true | false
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EncryptionCfgFile">
            <summary>
            This parameter specifies encryption config file name.
            Valid values: existent valid config file name (relative or absolute path)
            Default value not defined
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EncryptionMode">
            <summary>
            This parameter specifies the default value of encryptionMode.
            Valid values: None | Des | PgpDesMd5
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.HbtReasonableTransmissionTime">
            <summary>
            This parameter specifies "some reasonable transmission time" of FIX specification, measured in milliseconds.
            Valid values: positive integer
            Default value: 200
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.OrigSendingTimeChecking">
            <summary>
            This parameter specifies whether to check the OrigSendingTime(122) field value for incoming possible
            duplicated messages (PossDupFlag(43) = 'Y').
            Valid values: true | false
            Default value: true
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IgnorePossDupForGapFill">
            <summary>
            Enable this option if it need to handle SequenceReset-GapFill message without PossDupFlag(43).
            Also this option allow to ignore absence of OrigSendingTime(122) in such message.
            Valid values: true | false
            Default value: true
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TestRequestsNumberUponDisconnection">
            <summary>
            This parameter specifies number of Test Request messages, which will be sent before connection loss
            is reported when no messages are received from the counterparty.
            Default value: 1
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AdvancedResendRequestProcessing">
            <summary>
            This parameter specifies whether to issue subsequently duplicates
            (PossDupFlag(43) = 'Y') of last Resend Request for continuing gaps resting on
            LastMsgSeqNumProcessed(369) field values of incoming messages.
            The counterparty then must respond only to the original request or
            a subsequent duplicate Resend Request if it missed the original.
            The duplicate(s), otherwise, can be discarded, as it does not have a unique
            message sequence number of its own.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SkipDuplicatedResendRequest">
            <summary>
            This parameter specifies whether respond only to the original request or
            a subsequent duplicate Resend Request if it missed the original.
            If this option is disabled, Fix Antenna will respond to any Resend Request.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.PossDupSmartDelivery">
            <summary>
            This parameter enables delivery of only those PossDup messages that wasn't received previously.
            Discarding already processed possDups.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ServerAcceptorStrategy">
            <summary>
            This parameter specifies the default Acceptor Strategy.
            Valid values: subclasses of FixAntenna.NetCore.FixEngine.Acceptor.SessionAcceptorStrategyHandler
            <br/>
            Possible values:
            <br/>
            <c>FixAntenna.NetCore.FixEngine.Acceptor.SessionAcceptorStrategyHandler</c>
            <br/>
            <c>FixAntenna.NetCore.FixEngine.Acceptor.DenyNonRegisteredAcceptorStrategyHandler</c>
            <br/>
            <c>FixAntenna.NetCore.FixEngine.Acceptor.DenyNonRegisteredAcceptorStrategyHandler</c>
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.PreferredSendingMode">
            <summary>
            This parameter specifies the way the session will send most of its messages:<br/>
            Async - session will send all message asynchronously and it will be optimized for this<br/>
            Sync - session will be optimized to send messages from user thread, but it still can make asynchronous
            operation and it allows to add messages to internal queue<br/>
            SyncNoqueue - session sends message only from user thread and doesn't use internal queue. It's impossible to
            send messages to disconnected session. <br/>
            <p/>
            Valid values: Async/Sync/SyncNoqueue
            Default value: sync
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.WaitForMsgQueuingDelay">
            <summary>
            This parameter specifies the maximum delay interval on message sending if the internal session queue is full.
            If the internal session's queue is full then FIX Antenna pause the sending thread till the message
            pumper thread send some messages and free some space in the queue. If after the delay interval queue still full,
            then message will be pushed to the queue anyway.
            <p/>
            Valid values: positive integer
            Default value: 1000
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.IgnoreSeqNumTooLowAtLogon">
            <summary>
            This parameter allow to resolve wrong incoming sequence at Logon.
            When it true - session continue with received seqNum.
            <p/>
            Valid values: true/false
            Default value: false
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetQueueOnLowSequenceNum">
            <summary>
            When disabled prevents outgoing queue reset if client connecting with lower than expected sequence number.
            Once session is reestablished queued messages will be sent out.
            Please note that queued messages won't be sent out till session if fully established regardless of that parameter.
            <para>
            Default value: true
            </para>
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.QuietLogonMode">
            <summary>
            Enable this option if it need to quiet handle Logout as a first session message.
            FIX Specification requires that first message should be Logon. In other case it needs to send with answer Logout
            message warning "First message is not logon". Also sоmetimes first incoming Logout has a wrong sequence
            (for example if you send Logon with 141=Y). This option allow to skip sending ResendRequest and warning
            to counterparty.
            Valid values: true | false
            Default value: false
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ReadingThreadShutdownTimeout">
             <summary>
             Sets the timeout interval in seconds for waiting reading thread finishing during session shutdown. Reading thread
             may be interrupted after this interval if it was blocked.
            
             The parameter must be integer and not negative. Otherwise, the standard value for this parameter will be used.
             Default value: session heartbeat interval
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.WritingThreadShutdownTimeout">
             <summary>
             Sets the timeout interval in seconds for waiting writing thread finishing during session shutdown. Writing thread
             may be interrupted after this interval if it was blocked.
            
             The parameter must be integer and not negative. Otherwise, the standard value for this parameter will be used.
             Default value: session heartbeat interval
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.AllowedCountOfSimilarRr">
             <summary>
             This option indicate how many similar ResendRequests (for same range of sequences) engine may sends before
             detecting possible infinite resend loop. This should prevent infinite loop for requesting many times same
             corrupted messages or if user logic cann't correctly handle some message and every time throws exception.
            
             The parameter must be integer and not negative. Otherwise, the standard value for this parameter will be used.
             Default value: 3
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.RecvCpuAffinity">
            <summary>
            This parameter specifies cpu id for a thread of session that receives the data from socket.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SendCpuAffinity">
            <summary>
            This parameter specifies cpu id for a thread of session that sends the data in socket.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.CpuAffinity">
            <summary>
            This parameter specifies cpu id for the threads of session that send and receive the data from/in socket.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TcpSendBufferSize">
             <summary>
             This parameter specifies <seealso cref="P:System.Net.Sockets.Socket.SendBufferSize"/> property.
            
             Default value is 0, it means the parameter is not specified.
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TcpReceiveBufferSize">
             <summary>
             This parameter specifies <seealso cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> property.
            
             Default value is 0, it means the parameter is not specified.
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SenderTargetIdConsistencyCheck">
             <summary>
             If option is disabled it should be possible to receive messages with none session specific Comp IDs
             if option is enabled than all the messages with compIds not aligned to session parameters will be rejected
            
             Default value is true, it means that consistency check is enabled
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetThreshold">
             <summary>
             This parameter specifies a gap in sequences during connecting, which may be treated as missed sequence reset
             event by the counterpart. It works if current session has reset sequences and expects message (Logon) with 34=1
             but counterparty is still sending messages with much higher sequences (they didn't do reset on their side).
             This option helps to control bidirectional agreed sequence reset events and prevents to request old messages.
             This option is working only for acceptor session.
             Default value is 0, it means the check is not going to be performed.
            
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SlowConsumerDetectionEnabled">
            <summary>
            This parameter enables slow consumer detection in pumpers
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SlowConsumerWriteDelayThreshold">
            <summary>
            This parameter used for decision making in slow consumer detection in pumpers.
            It defined a maximum timeframe for sending a message. If session transport can't send a message during this
            timeframe it will notify about a slow consumer.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ThrottleCheckingEnabled">
             <summary>
             Enables throttling checks per message type
             If this option is enabled, engine counts how many times session receives messages with some message type during throttleCheckingPeriod.
             If this counter will be greater than the value in throttleChecking.MsgType.threshold, the session will be
             closed with reason THROTTLING
            
             Default value: false
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ThrottleCheckingPeriod">
             <summary>
             Defines period common for all throttling per message type checks.
            
             Default value: 1000 milliseconds
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.CmeSecureKeysFile">
            <summary>
            Defines name of keys file. It should be located in classpath, root directory of running application or home directory.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.LogonCustomizationStrategy">
            <summary>
            Defines strategy that will be applied for logon messages right before sending.
            <p/>
            Valid values: subclasses of <c>FixAntenna.NetCore.FixEngine.Session.Impl.LogonCustomizationStrategy</c>/>
            <p/>
            Implemented strategies:
                  <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.CmeSecureLogonStrategy"/> - It tells engine to use CME secure logon scheme.
                                     This strategy requires defined <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.CmeSecureKeysFile"/>.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.WriteSocketAddressToLog">
            <summary>
            Print socket address to debug log for incoming and outgoing log.
            If this option is enabled, Antenna will print messages to debug log in format: <br/>
            [127.0.0.1]>>8=FIX.4.2 | 9=250...
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetSeqNumFromFirstLogon">
            <summary>
            Determines if sequence numbers should be accepted from the incoming Logon message. The option allows to reduce
            miscommunication between sides and easier connect after scheduled sequence reset.
            <p/>
            The option doesn’t change behavior if the Logon message contains ResetSeqNumFlag(141) equals to “Y” (in this
            case session sequence numbers will be reset).<p/>
            The value ‘Schedule’ allows to adopt to the sequence numbers from the incoming Logon message if the reset time
            is outdated (the session recovers after scheduled reset time). In this case session’s incoming sequence number
            will be set to the value of MsgSeqNum(34) tag from the incoming Logon and outgoing sequence number become
            equivalent to NextExpectedMsgSeqNum (789) tag value (if the tag is present) or will be reset to 1.
            <p/>
            If the parameter 'ResetSeqNumFromFirstLogon' is set to 'Schedule' on the acceptor's side, then:
            If the tag ResetSeqNumFlag (141) in the received Logon message is set to 'Y', then:
            The incoming sequence number must be set to 1
            The outgoing sequence number must be set to 1
            If the tag ResetSeqNumFlag (141) in the received Logon message is set to 'N' or missing, then
            If the sequence numbers reset date and time is outdated, then:
            The incoming sequence number must be set to the value of the tag MsgSeqNum (34)
            If the tag NextExpectedMsgSeqNum (789) is specified in the received Logon message, then
            The outgoing sequence number must be set to the value of the tag NextExpectedMsgSeqNum (789)
            If the tag NextExpectedMsgSeqNum (789) is missing in the received Logon message, then
            The outgoing sequence number must be set to the 1
            If the sequence numbers reset date and time is actual, then:
            The incoming and outgoing sequence numbers are handled according to the FIX protocol
            Valid values: Never | Schedule.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaskedTags">
            <summary>
            Masked tags. List all tags here engine should hide value with asterisks in logs.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.EnhancedCmeResendLogic">
            <summary>
            Turn on CME Enhanced Resend Request logic for filling gaps
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.RequireSsl">
            <summary>
            Requires establishing of secured transport for individual session,
            or for all sessions, when used on top level configuration.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslProtocol">
            <summary>
            Selected SslProtocol as defined in <see cref="T:System.Security.Authentication.SslProtocols"/>
            Default value is "None" as recommended by Microsoft - in this case best suitable protocol be used.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslCertificate">
            <summary>
            Name of Certificate.
            Could be file name, or distinguished name (CN=...) of certificate in case when certificate store is used.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslCertificatePassword">
            <summary>
            Password for SSL certificate.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslValidatePeerCertificate">
            <summary>
            If true, remote certificate must be validated for successful connection.
            If false, also disables sslCheckCertificateRevocation.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslCheckCertificateRevocation">
            <summary>
            If true and also sslValidatePeerCertificate=true, remote certificate will be checked for revocation.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslCaCertificate">
            <summary>
            Name of CA certificate.
            Could be file name, or distinguished name (CN=...) of certificate in case when certificate store is used.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslServerName">
            <summary>
            Used on initiator only. Should match with CN=[serverName] in the acceptor certificate.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SslPort">
            <summary>
            Acceptor: listening port(s) for SSL/TLS connections.
            Initiator: ignored.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TradePeriodBegin">
            <summary>
            Cron expression to set a scheduled session start.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TradePeriodEnd">
            <summary>
            Cron expression to set the end of the scheduled session.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.TradePeriodTimeZone">
            <summary>
            Time zone id for tradePeriodBegin and TradePeriodEnd properties.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.Port">
            <summary>
            Acceptor: Default listening port(s) for unsecured connections.
            Initiator: Target port for connection.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.SeqNumLength">
            <summary>
            Minimal length of the SeqNum fields. Possible value is integer in range 1..10.
            If the actual SeqNum length less than defined, leading zeros will be added to the SeqNum fields.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Configuration.Config.MaxTimeoutValue">
            <summary>
            Identifies a maximum HBI in seconds.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a Configuration based on Map properties.
            </summary>
            <param name="map"> properties </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.#ctor(System.String)">
            <summary>
            Create a Configuration.
            Load properties from prop file
            </summary>
            <param name="propFileName"> the properties file. </param>
            <exception cref="T:System.ArgumentException"> if file not exists. </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Configuration.Config.GlobalConfiguration">
            <summary>
            Get global configuration. Method returned default configuration loaded on startup.
            </summary>
            <value> instance of global configuration. </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Configuration.Config.ConfigurationDirectory">
            <summary>
            Allows setting a directory that will be used to load configuration e.g. to load fixengine.properties.
            The parameter does not affect the loading of dictionaries.<br/>
            The order of searching for fixengine.properties will be <br/>
            1. Directory defined by this parameter <br/>
            2. Current directory <br/>
            3. Home directory <br/>
            4. Embedded resources inside libraries from method callstack.
            Set it before reading any configuration.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.SetProperty(System.String,System.String)">
            <summary>
            Setter for properties.
            </summary>
            <param name="propertyName">  the name of property </param>
            <param name="propertyValue"> the value for property </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.SetProperty(System.String,System.Int32)">
            <summary>
            Setter for properties.
            </summary>
            <param name="propertyName">  the name of property </param>
            <param name="propertyValue"> the value for property </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetProperty(System.String)">
            <summary>
            Getter for property.
            </summary>
            <param name="propertyName"> the name of property </param>
            <returns> value for property or null if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetProperty(System.String,Epam.FixAntenna.NetCore.Configuration.Config.IValidator,System.Boolean)">
            <summary>
            Getter for property.
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="validator">    validate value from user config. For invalid value will be return default value. </param>
            <param name="nullable">     true - for case when property not exist can return null(nullable=true) or throws exception(nullable=false) </param>
            <returns> value for property. If property not exists can return null or throws exception(depends on <c>nullable</c> value) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetProperty(System.String,Epam.FixAntenna.NetCore.Configuration.Config.IValidator,System.Boolean,System.Boolean,System.String)">
            <summary>
            Getter for property.
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="validator">    validate value from user config. For invalid value will be return default value. </param>
            <param name="nullable">     true - for case when property not exist can return null(nullable=true) or throws exception(nullable=false) </param>
            <param name="warnInLog">    write warning to log if value from config is not fit to validator </param>
            <param name="customMessage">customized warning message</param>
            <returns> value for property. If property not exists can return null or throws exception(depends on <c>nullable</c> value) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetProperty(System.String,System.String)">
            <summary>
            Getter for property.
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="defaultValue"> the default value for property </param>
            <returns> value for property or defaultValue if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsBoolean(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Get property value as boolean.
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="defaultValue"> the default value for property </param>
            <param name="warnToLog">    write warning to log if value from user config is not in range </param>
            <param name="customMessage">customized message for warning</param>
            <returns> value for property or defaultValue if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsBoolean(System.String)">
            <summary>
            Get property value as boolean.
            </summary>
            <param name="propertyName"> the name of property </param>
            <returns> value for property or false if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsInt(System.String,System.Int32)">
            <summary>
            Get property value as int.
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="defaultValue"> the default value for property </param>
            <returns> value for property or defaultValue if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsInt(System.String,System.Int32,System.Int32)">
            <summary>
            Get property value as int. If value is not in range than return default value or throws exception(if default value is not in range too)
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="min">          the minimal value. Value >= min </param>
            <param name="max">          the maximal value. max >= Value </param>
            <returns> value for property or defaultValue if property not exists or in rage </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsInt(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Get property value as int. If value is not in range than return default value or throws exception(if default value is not in range too)
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="min">          the minimal value. Value >= min </param>
            <param name="max">          the maximal value. max >= Value </param>
            <param name="warnToLog">    write warning to log if value from user config is not in range </param>
            <param name="customMessage">customized message for warning</param>
            <returns> value for property or defaultValue if property not exists or in rage </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsInt(System.String)">
            <summary>
            Get property value as int.
            </summary>
            <param name="propertyName"> the name of property </param>
            <returns> value for property or -1 if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsLong(System.String,System.Int64)">
            <summary>
            Get property value as long.
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="defaultValue"> the default value for property </param>
            <returns> value for property or defaultValue if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsLong(System.String)">
            <summary>
            Get property value as long.
            </summary>
            <param name="propertyName"> the name of property </param>
            <returns> value for property or -1 if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsBytesLength(System.String)">
            <summary>
            Get property value as bytes length. Example:
            <br/>
            1=1
            <br/>
            1b=1
            <br/>
            1Kb=1024
            <br/>
            1Mb=1048576
            <br/>
            1Gb=1073741824
            </summary>
            <param name="propertyName"> the name of property </param>
            <returns> value for property or -1 if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.GetPropertyAsBytesLength(System.String,System.Int32)">
            <summary>
            Get property value as bytes length. Example:
            <br/>
            1=1
            <br/>
            1b=1
            <br/>
            1Kb=1024
            <br/>
            1Mb=1048576
            <br/>
            1Gb=1073741824
            </summary>
            <param name="propertyName"> the name of property </param>
            <param name="defaultValue"> the default value for property </param>
            <returns> value for property or defaultValue if property not exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.ParseInt(System.String,System.Int32)">
            <summary>
            Parses the <c>integer</c> value from <c>str</c>.
            </summary>
            <param name="str"> the string representation of an integer. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.ParseInt(System.String)">
            <summary>
            Parses the <c>integer</c> value from <c>str</c>.
            </summary>
            <param name="str"> the string representation of an integer. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.ParseInt(System.String,System.Int32,System.Int32)">
            <summary>
            Parses the <c>integer</c> value from <c>str</c>.
            <p/>
            The <c>offset</c> argument is the
            index of the first char of the substring and the <c>count</c>
            argument specifies the length of the substring.
            </summary>
            <param name="str">    a string representation of an integer. </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <exception cref="T:System.FormatException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.ParseInt(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parses the <c>integer</c> value from <c>str</c>.
            <p/>
            The <c>offset</c> argument is the
            index of the first char of the substring and the <c>count</c>
            argument specifies the length of the substring.
            </summary>
            <param name="str">    a string representation of an integer. </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.Config.ParseBool(System.String)">
            <summary>
            Parses the <c>boolean</c> value from <c>str</c>.
            </summary>
            <param name="str"> the string representation of a boolean. </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Configuration.Config.Properties">
            <summary>
            Get all properties.
            </summary>
            <value> returned value is cloned. </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Configuration.Config.ValidatorInteger">
            <summary>
            User value validator for range max >= UserValue >= min
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Configuration.Config.ValidatorIntegerList">
            <summary>
            User values list validator for range max >= UserValue >= min
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Configuration.Config.ValidatorBoolean">
            <summary>
            User value validator for bool
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.FixVersionContainer.Similar(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <summary>
            Make sure that <c>FIXVersionContainers</c> at least based on same fix version
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Configuration.TemplatePropertiesWrapper">
            <summary>
            Wraps <see cref="T:Epam.FixAntenna.NetCore.Common.Properties"/> for handle templates like key=${value}.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Configuration.TemplatePropertiesWrapper.GetProperty(System.String,System.String)">
            <summary>
            Gets value by key.
            If value is template methods replace it by template value.
            If template value doesn't exist it will be replace by defaultValue .
            </summary>
            <returns> String </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Dictionary.DictionaryBuilder">
            <summary>
            Dictionary builder.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.DictionaryBuilder.BuildDictionary(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes">
            <summary>
            This class is storage for Dictionaries of FIX version.
            This class clones of IDictionary objects and returns to the clients.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes.#ctor(System.Collections.Generic.IList{Epam.FixAntenna.NetCore.Common.Xml.IType})">
            <summary>
            Creates <c>Dictionaries</c>.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes.Dictionaries">
            <summary>
            Gets dictionaries.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Dictionary.FixDictionaryFactory">
            <summary>
            Simple dictionary factory that returns one instance of dictionary by input version of FIX protocol
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.FixDictionaryFactory.GetDictionaries(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.FixDictionaryFactory.LoadDictionary(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Dictionary.IDictionaryBuilder">
            <summary>
            Build of instance of Dictionary.
            This builder can be used for build custom fix dictionary and registered fix dictionary.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.IDictionaryBuilder.BuildDictionary(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,System.Boolean)">
            <summary>
            Build dictionary by input version of FIX protocol
            </summary>
            <param name="version">            Version of FIX protocol </param>
            <param name="replaceData">        if flag is set to false, the data will be add to
                                      standard dictionary, otherwise the data will be replaced. </param>
            <returns> instance of dictionary </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Dictionary.IDictionaryFactory">
            <summary>
            Build of instance of Dictionaries using input parameter. By default this is simply procedure
            that returns instance of Dictionaries with one Dictionary for example FIXDictionaryFactory,
            but there is factory that returns complex instance for example FIXTDictionaryFactory
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.IDictionaryFactory.GetDictionaries(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <summary>
            Returns of instance of <see cref="T:Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes"/> by FIX version.
            </summary>
            <param name="fixVersion"> Instance of <see cref="T:Epam.FixAntenna.NetCore.Common.FixVersion"/> </param>
            <returns> Instance of <see cref="T:Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes"/> with dictionaries </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Dictionary.IDictionaryFactory.LoadDictionary(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <summary>
            Loads dictionary by version of FIX protocol.
            </summary>
            <param name="fixVersion"> Version of FIX protocol </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Acceptor.Autostart.AutostartAcceptorSessions">
            <summary>
            This is helper class, provides functionality to
            checks if session is autostart.
            User can't configure the startup sessions in
            engine.properties or default.properties files.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Acceptor.Autostart.AutostartAcceptorSessions.#ctor(Epam.FixAntenna.NetCore.Configuration.Config,Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionRegister)">
            <summary>
            Creates the <c>AutostartAcceptorSessions</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Acceptor.Autostart.AutostartAcceptorSessions.IsAutostartSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Checks if session is startup.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <returns> true if it is </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Acceptor.Autostart.AutostartAcceptorSessions.GetFixServerListener(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets the fix session listener.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <exception cref="T:System.InvalidOperationException"> if session listener can't be created. </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Acceptor.Autostart.AutostartAcceptorSessions.AutostartSessionDetails">
            <summary>
            Autostart session bean.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Acceptor.FixConnectionHandler.OnConnect(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Acceptor.LogonMessageParser">
            <summary>
            Logon message parser.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Acceptor.LogonMessageParser.ParseLogon(Epam.FixAntenna.NetCore.Configuration.Config,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Int32)">
            <summary>
            Gets session parameters from login message.
            </summary>
            <param name="configuration">the configuration</param>
            <param name="loginMessage"> the logon message </param>
            <param name="host">         the host </param>
            <param name="port">         the port </param>
            <returns> SessionParameters </returns>
            <exception cref="T:System.ArgumentException"> if target or sender are invalid </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Acceptor.LogonMessageWaiter">
            <summary>
            Util class for handle first message during logon process.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Acceptor.LogonMessageWaiter.IsLogonReceived">
            <summary>
            Method starts the thread and wait for first message during specified time.
            </summary>
            <returns> true if logon received </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException"> if thread is interrupted </exception>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.ChangesType.UpdateSmhAndSmt">
            <summary>
            Use this type to update existed tags in header and trailer.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.ChangesType.AddSmhAndSmt">
             <summary>
             Use this type to add header's and trailer's tags to the message.
            
             Note: make sure that message doesn't contains header's and trailer's tags.
             In other case tags could be duplicated.
             </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.ChangesType.UpdateSmhAndSmtDonotUpdateSndr">
            <summary>
            Use this type to update existed tags in header and trailer, except SenderCompID(49).
            This type is similar to UPDATE_SMH_AND_SMT but doesn't update SenderCompID(49) tag.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.ChangesType.DeleteAndAddSmhAndSmt">
            <summary>
            Use this type to make sure that all tags in header and trailer
            have only one instance in message.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.ChangesType.UpdateSmhAndSmtExceptCompids">
            <summary>
            Update Sub and Location Ids only if CompId is absent. In other case lease them as they are in message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.ConnectionValidatorListener.OnConnect(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.DefaultFixSessionFactoryStrategy">
            <summary>
            Default fix session factory strategy implementation.
            This class provides access to FIX 4.0 - FIX 5.0 SP2 session factories.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactoryStrategy"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.DefaultFixSessionFactoryStrategy.#ctor">
            <summary>
            Creates the <c>DefaultFixSessionFactoryStrategy</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.DefaultFixSessionFactoryStrategy.SetFixVersionFactory(Epam.FixAntenna.NetCore.Common.FixVersion,Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactory)">
            <summary>
            Sets a new session factory for fixVersion.
            </summary>
            <param name="fixVersion">        the fix version </param>
            <param name="fixSessionFactory"> the fix session factory </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.DefaultFixSessionFactoryStrategy.SetAppVersionFactory(Epam.FixAntenna.NetCore.Common.FixVersion,Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactory)">
            <summary>
            Sets a new session factory for appVersion.
            </summary>
            <param name="appVersion">        the  app fix version </param>
            <param name="fixSessionFactory"> the fix session factory </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.DefaultFixSessionFactoryStrategy.GetFixSessionFactory(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets fix session factory.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <returns> FixSessionFactory </returns>
            <exception cref="T:System.ArgumentException"> if session factory not exists. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.DefaultSessionTransportFactory.CreateInitiatorTransport(System.String,System.Int32,Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.DefaultSessionTransportFactory.CreateAcceptorTransport(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,Epam.FixAntenna.NetCore.Configuration.Config)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.FixServer">
            <summary>
            Generic FIXServer implementation.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.FixServer._servers">
            <summary>
            Servers bound to ports
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.#ctor">
            <summary>
            Creates the fix server.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.#ctor(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates the fix server.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.FixServer.Nic">
            <summary>
            Gets or sets the NIC (address) to listen to.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.FixServer.Ports">
            <summary>
            Gets or sets the set of ports to listen to.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.FixServer.SslPorts">
            <summary>
            Gets or sets the set of secured ports to listen to.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetServer(Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer)">
            <summary>
            Replaces default TCPServer implementation with custom Server implementation.
            </summary>
            <param name="server"> implementation specified by user </param>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetListener(Epam.FixAntenna.NetCore.FixEngine.IFixServerListener)">
            <summary>
            Sets listener.
            </summary>
            <param name="listener"> - user specified listener </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetLoginWaitTimeout(System.Int32)">
            <summary>
            Sets login timeout.
            </summary>
            <param name="loginWaitTimeout"> the login timeout in mils </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetPort(System.Int32)">
            <summary>
            Sets the only port to listen on.
            </summary>
            <param name="port"> port to listen on </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.Start">
            <summary>
            Actually starts the servers.
            </summary>
            <returns> true if all servers started successfully
            false - otherwise (server will add WARN messages with description of each problem to log) </returns>
            <exception cref="T:System.IO.IOException">
            if unable to start the server at least on one port. In this case the first received exception will be thrown.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if server port(s) were not set by configuration or one of those methods:
            <see cref="!:SetPorts"/> or <see cref="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetPort(System.Int32)"/> or <see cref="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetServer(Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer)"/>
            </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.Stop">
            <summary>
            Stops the server.
            </summary>
            <exception cref="T:System.IO.IOException"> if stop was unsuccessful </exception>
            <exception cref="T:System.InvalidOperationException">
            if servers were not set by one of those methods: <see cref="!:SetPorts"/> or <see cref="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetPort(System.Int32)"/> or <see cref="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.SetServer(Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer)"/>
            </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.RegisterAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Register the session parameters of acceptor.
            <para></para>
            </summary>
            <param name="sessionParameters"> the sessionParameters </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.FixServer.UnregisterAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Remove registered acceptor session.
            Note: To remove registered acceptor session it's enough to pass SessionParameters with right SenderComId and
            TargetCompId for a moment.
            </summary>
            <param name="sessionParameters"> </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.FixServer.ConfigPath">
            <summary>
            Path to config file
            </summary>
            <value> path to config file </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.FixVersionUtils">
            <summary>
            FIX Version utils class helper.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.ForceSeqNumReset">
            <summary>
            A enum for force sequence number reset.
            Client should defined parameter in engine.properties or set
            the appropriate value for SessionParameters instance.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.SessionParameters"></seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IErrorHandler">
            <summary>
            User must implement this interface for handling error and warning.
            </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.ErrorHandler"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IErrorHandler.OnWarn(System.String,System.Exception)">
            <summary>
            This method is invoked every time when warning is occurred.
            </summary>
            <param name="description"> warn description </param>
            <param name="throwable"> error </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IErrorHandler.OnError(System.String,System.Exception)">
            <summary>
            This method is invoked every time when error is occurred.
            </summary>
            <param name="description"> error description </param>
            <param name="throwable"> error </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IErrorHandler.OnFatalError(System.String,System.Exception)">
            <summary>
            This method is invoked every time when fatal error is occurred.
            </summary>
            <param name="description"> fatal error description </param>
            <param name="throwable"> error </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IExtendedFixSessionListener">
            <summary>
            Extended fix session listener
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IExtendedFixSessionListener.OnMessageReceived(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Method fired when message received.
            </summary>
            <param name="msgBuf"> incoming message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IExtendedFixSessionListener.OnMessageSent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Method fired when message will send.
            </summary>
            <param name="bytes"> outgoing message
            </param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory">
            <summary>
            FixMessageFactory interface defines object capable to create session level messages.
            User could extend existing standard MessageFactories or even write his own custom message factory
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.GetRejectForMessageTag(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,System.String)">
            <summary>
            Creates reject message.
            </summary>
            <param name="rejectMessage"> the rejected message </param>
            <param name="refTagId">      the reference tag </param>
            <param name="rejectReason">  the reject reason </param>
            <param name="rejectText">    the reject text </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.SetSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Setter for session parameters used to construct message headers.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.Serialize(Epam.FixAntenna.NetCore.Message.MsgBuf,System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <summary>
            Build message based on a type and content.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="content"> the message content </param>
            <returns> bytes of message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.Serialize(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType},Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <summary>
            Build message based on a type and content.
            </summary>
            <param name="content">     the message content </param>
            <param name="changesType"> the change type </param>
            <returns> bytes of message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.GetEndSequenceNumber">
            <summary>
            Get for current fix version the maximum sequence number.
            </summary>
            <returns> sequence number </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.GetCurrentSendingTime">
            <summary>
            Gets current sending time.
            </summary>
            <returns> bytes of sending time </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.SendingTime">
            <summary>
            Returns appropriate SendingTime implementation
            </summary>
            <value> SendingTime implementation </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.CompleteMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Completes the message.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="content"> the content of message </param>
            <returns> message </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory.MinSeqNumFieldsLength">
            <summary>
            Minimal length for the SeqNum fields.
            The SeqNum fields are:
            	BeginSeqNo(7), EndSeqNo(16), MsgSeqNum(34), NewSeqNo(36), RefSeqNum(45),
            	LastMsgSeqNumProcessed(369), HopRefID(630), NextExpectedMsgSeqNum(789)
            </summary>
            <remarks>
            As far as HopRefID field doesn't processed directly by FA .NET Core,
            it is up to user to format this field with leading zeroes if required.
            The same for any SeqNum field processed by the user's logic:
            it is up to user to keep required padding using <see cref="!:FixMessage.SetPaddedLongTag"/>
            or <see cref="M:Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer.AddLikeString(System.Int64,System.Int32)"/>.
            </remarks>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener">
            <summary>
            This is interface for incoming message listener.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            This method is invoked every time when FIX Engine receives
            application message.
            </summary>
            <param name="message"> the incoming message </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixServerListener">
            <summary>
            This is user interface that accepts incoming sessions.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixServerListener.NewFixSession(Epam.FixAntenna.NetCore.FixEngine.IFixSession)">
            <summary>
            This method is invoked every time when new <see cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixSession"/> is created.
            </summary>
            <param name="session"> the new session </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType">
            <summary>
            As far as .Net Standard 2.0 does not allow define constants in interfaces
            new Enum was introduced.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendAsync">
            <summary>
            Enqueue the message before sending as opposed to sending immediately from calling thread.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendSync">
            <summary>
            Send the message synchronously.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.DefaultSendingOption">
            <summary>
            Default SendingType value.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixSession">
            <summary>
            This interface is the main interface user works with.
            It represents IFixSession either acceptor or initiator.
            And capable to send/receive messages.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SessionState">
            <summary>
            Gets or sets the session state.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object.
            </summary>
            <param name="message">   <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </param>
            <param name="structure"> message structure </param>
            <returns> <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object.
            </summary>
            <param name="message">   <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </param>
            <param name="structure"> message structure </param>
            <param name="type">      type of the message </param>
            <returns> <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.PrepareMessage(System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object with specified type, message structure and prefilled header information
            </summary>
            <param name="msgType">       message type </param>
            <param name="userStructure"> message structure </param>
            <returns> <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.PrepareMessageFromString(System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message">   message string </param>
            <param name="structure"> message structure object </param>
            <returns> <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.PrepareMessageFromString(System.Byte[],System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message">   message string </param>
            <param name="structure"> message structure object </param>
            <param name="type">      message type </param>
            <returns> <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.ResetSequenceNumbers">
             <summary>
             Allows user to reset sequences numbers by sending logon with 141=Y.
            
             Notice: Only supported for FIX versions 4.1 and above.
             Notice: The logon message will be send only when session is in connected state.
             </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.ResetSequenceNumbers(System.Boolean)">
             <summary>
             Allows user to reset sequences numbers by sending logon with 141=Y.
            
             Notice: Only supported for FIX versions 4.1 and above.
            
             Notice: The logon message will be send only when session is in connected state.
             </summary>
             <param name="checkGapFillBefore"> - the flag indicates if needed to check the seq num.
                                       <p/>
                                       If true the TR will be sent before introday logon otherwise only intraday logon will be sent. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SetSequenceNumbers(System.Int64,System.Int64)">
            <summary>
            Allows user to change sequences numbers for disconnected sessions.
            </summary>
            <param name="inSeqNum"> new incoming sequence number. If new value is &lt; 0, then this parameter will be ignored. </param>
            <param name="outSeqNum"> new outgoing sequence number. If new value is &lt; 0, then this parameter will be ignored. </param>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Parameters">
            <summary>
            Gets session parameter instance.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Init">
            <summary>
            Initialize FIX session. This allows to put messages to session. These messages will be send after connect.
            </summary>
            <exception cref="T:System.IO.IOException"> I/O exception if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Connect">
            <summary>
            Connects to remote counterparty,
            if initiator or accepts incoming connection if acceptor.
            </summary>
            <exception cref="T:System.IO.IOException"> I/O exception if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.ConnectAsync">
            <summary>
            Connects to remote counterparty,
            if initiator or accepts incoming connection if acceptor.
            Async version
            </summary>
            <exception cref="T:System.IO.IOException"> I/O exception if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Reject(System.String)">
             <summary>
             Reject incoming connection for acceptor.
            
             Not applicable for initiator.
             </summary>
             <exception cref="T:System.IO.IOException"> I/O exception if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Disconnect(System.String)">
             <summary>
             Gracefully disconnects current session.
            
             Logoff with specified reason will be sent to your counterparty.
            
             Note: This method doesn't guarantee immediate shutdown, since FIX protocol require us to wait for counterparty logoff reply.
             </summary>
             <param name="reason"> the reason </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.DisconnectAsync(System.String)">
             <summary>
             Gracefully disconnects current session. Async version.
            
             Logoff with specified reason will be sent to your counterparty.
            
             Note: This method doesn't guarantee immediate shutdown, since FIX protocol require us to wait for counterparty logoff reply.
             </summary>
             <param name="reason"> the reason </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
             <summary>
             Convenient method to send out FIX message based on the message type and message content.
            
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             If the <c>msgType</c> is null, Engine sends the message as is;
            
             If the <c>msgType</c> is "", Engine updates body length, sequence number, sending time and checksum fields;
            
             Otherwise Engine wraps the <c>content</c>.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="msgType"> the message type (Tag 35 content) </param>
             <param name="content"> the message content </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
             <summary>
             Convenient method to send out FIX message based on the message type and message content.
            
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             If the <c>msgType</c> is null, Engine sends the message as is;
            
             If the <c>msgType</c> is "", Engine updates body length, sequence number, sending time and checksum fields;
            
             Otherwise Engine wraps the <c>content</c>.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="msgType"> the message type (Tag 35 content) </param>
             <param name="content"> the message content </param>
             <param name="optionMask"> <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendSync"/> or <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendAsync"/> </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
             <summary>
             Convenient method to send out user built FIX message.
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             The Engine updates the footer and header in the <c>message</c>.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="message"> the message </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
             <summary>
             Convenient method to send out user built FIX message.
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             The Engine updates the footer and header in the <c>message</c>.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="message"> the message </param>
             <param name="optionMask"> <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendSync"/> or <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendAsync"/> </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendAsIs(Epam.FixAntenna.NetCore.Message.FixMessage)">
             <summary>
             Convenient method to send out FIX message based on the message type and message content.
            
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             The Engine sends the message as is.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="message"> the message content </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendAsIs(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
             <summary>
             Convenient method to send out FIX message based on the message type and message content.
            
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             The Engine sends the message as is.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="message"> the message content </param>
             <param name="optionMask"> <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendSync"/> or <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendAsync"/> </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendWithChanges(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType})">
             <summary>
             Convenient method to send out FIX message based on the message type and message content.
            
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             The Engine sends the message as is.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="content">            the message content </param>
             <param name="allowedChangesType"> the parameter takes the next values: </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
             <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.ChangesType"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendWithChanges(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.ChangesType,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
             <summary>
             Convenient method to send out FIX message based on the message type and message content.
            
             Depending on implementation and configuration may send message
             immediately or put it in the outgoing queue either persistent or stateless.
            
             The Engine sends the message as is.
             <p/>
             If session is disposed no more messages should be send by session.
             </summary>
             <param name="content">            the message content </param>
             <param name="allowedChangesType"> the parameter takes the next values: </param>
             <param name="optionMask"> <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendSync"/> or <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType.SendAsync"/> </param>
             <returns> true if message was send immediately, false - message was queued for later sending </returns>
             <exception cref="T:System.InvalidOperationException"> if session is disposed </exception>
             <exception cref="T:System.ArgumentException"> </exception>
             <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.ChangesType"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Dispose">
             <summary>
             Disposes current session, removes its reference from GlobalSessionManager
             and frees all allocated resources. Normally should be called
             after disconnect().
            
             However it is possible to call this method for active session without
             previous disconnect() that will abnormally terminate fix session by closing fix connection
             (without logon exchange). This is useful to terminate stuck sessions
             if standard FIX logoff procedure doesn't work.
             </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.MessageValidator">
            <summary>
            Returns message validator.
            </summary>
            <value> message validator for current session </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SetFixSessionListener(Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener)">
            <summary>
            Sets IFIXSession listener to monitor session
            status and receive incoming messages.
            </summary>
            <param name="listener"> the user specified listener </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.AddInSessionLevelMessageListener(Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener)">
            <summary>
            Add listeners to receive session level incoming messages.
            FIX session level message type:
            <ul>
            <li> 'A' - Logon </li>
            <li> '0' - Heartbeat </li>
            <li> '1' - Test Request </li>
            <li> '2' - Resend Request </li>
            <li> '3' - Reject </li>
            <li> '4' - Sequence Reset </li>
            <li> '5' - Logout </li>
            </ul>
            </summary>
            <param name="listener"> the user specified listener </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.ErrorHandler">
            <summary>
            Sets error handler.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IErrorHandler"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.RejectMessageListener">
            <summary>
            Sets reject listener.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IRejectMessageListener"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SlowConsumerListener">
            <summary>
            Sets slow consumer message listener.
            </summary>
            <value> slow consumer listener </value>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.IFixSessionSlowConsumerListener"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.IFixSession.OutgoingQueueSize">
            <summary>
            Returns outgoing message queue size
            </summary>
            <value></value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.GetOutgoingQueueMessages">
            <summary>
            Returns copies of outgoing messages from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.RetrieveSentMessage(System.Int64)">
            <summary>
            Retrieves sent message from the storage.
            </summary>
            <param name="seqNumber">the sequence number of message</param>
            <returns>the retrieved message</returns>
            <exception cref="T:System.IO.IOException">if error occurred.</exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.RetrieveReceivedMessage(System.Int64)">
            <summary>
            Retrieves received message from the storage.
            </summary>
            <param name="seqNumber">the sequence number of message</param>
            <returns>the retrieved message</returns>
            <exception cref="T:System.IO.IOException">if error occurred.</exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactory">
            <summary>
            <c>IFixSessionFactory</c> defines session level behaviour and other FIXEngine parameters.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactory.CreateInitiatorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Creates the initiator session.
            </summary>
            <param name="sessionParameters"> the session configuration </param>
            <returns> the fix session </returns>
            <exception cref="T:System.IO.IOException"> if the session cannot be created </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactory.CreateAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Creates the acceptor session.
            </summary>
            <param name="sessionParameters"> the session configuration </param>
            <returns> the fix session </returns>
            <exception cref="T:System.IO.IOException"> if the session cannot be created </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactory.CreateAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport)">
            <summary>
            Creates the acceptor session.
            </summary>
            <param name="sessionParameters"> the session configuration </param>
            <param name="transport"> the fix transport </param>
            <returns> the fix session </returns>
            <exception cref="T:System.IO.IOException"> if the session cannot be created </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactoryStrategy">
            <summary>
            The session factory strategy.
            User should implements strategy for customization fix sessions.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactoryStrategy.GetFixSessionFactory(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets fix session factory.
            </summary>
            <param name="parameters"> the session parameters. </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener">
            <summary>
            User must implement this interface to listen for incoming messages and monitor session state.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SetFixSessionListener(Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener.OnSessionStateChange(Epam.FixAntenna.NetCore.FixEngine.SessionState)">
            <summary>
            This method is invoked every time when Session is changed.
            </summary>
            <param name="sessionState"> new session state </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.IRejectMessageListener">
            <summary>
            This is interface for receiving messages rejected from internal queue.
            Sometimes occurs serious problem in session and it couldn't send anymore messages.
            Messages, which were stored in internal queue and waiting for delivering will be removed.
            This listener can notify that message was removed from sending queue.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.IRejectMessageListener.OnRejectMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            On remove message from sending queue.
            </summary>
            <param name="message"> the rejected message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.RegisterSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.RegisteredSessions">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.UnregisterSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.IsSessionRegistered(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.IsSessionRegistered(Epam.FixAntenna.NetCore.FixEngine.SessionId)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.GetSessionParams(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.GetSessionParams(Epam.FixAntenna.NetCore.FixEngine.SessionId)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.AddSessionManagerListener(Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener)">
            <summary>
            Register client ConfiguredSessionListener.
            </summary>
            <param name="listener"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.RemoveSessionManagerListener(Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener)">
            <summary>
            Unregister client ConfiguredSessionListener.
            </summary>
            <param name="listener"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.ConfiguredSessionRegisterImpl.DeleteAll">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager">
            <summary>
            This singleton contains all registered FIX sessions in this application instance.
            Each class in the list backed up by the WeakReference
            so it may return bogus values for sessions that just expired and
            were removed from the list because of that.
            SessionState will be returned as DEAD.
            </summary>
            <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.SessionState.Dead">for such sessions.></seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Instance">
            <summary>
            Gets the <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager"/> instance.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Init">
            <summary>
            Initialize new FixSessionManager.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Shutdown">
            <summary>
            Shutdown the FixAntenna engine, i.e. FixSessionManager, LicenseManager, SchedulerManager.
            </summary>
            <remarks>
            FixSessionManager shutting down automatically when the application exits.
            Use this method only if you need to force shutdown the engine.
            </remarks>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.GetProperties">
            <summary>
            Returns some of system and environment properties for diagnostic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RegisterFixSession(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession)">
            <summary>
            Registers a new <c>session</c>
            </summary>
            <param name="session"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RemoveFixSession(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession)">
            <summary>
            Removes the <c>session</c>.
            </summary>
            <param name="session"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RemoveAllSessions">
            <summary>
            Remove all sessions.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Locate(System.String)">
            <summary>
            Finds the session by sessionID.
            </summary>
            <param name="sessionId"> the unique session identifier </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Locate(Epam.FixAntenna.NetCore.FixEngine.SessionId)">
            <summary>
            Finds the session by sessionID.
            </summary>
            <param name="sessionId"> the unique session identifier </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Locate(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            TODO: implement ASAP
            </summary>
            <param name="senderComId"> </param>
            <param name="senderSubId"> </param>
            <param name="senderLocationId"> </param>
            <param name="targetCompId"> </param>
            <param name="targetSubId"> </param>
            <param name="targetLocationId">
            @return </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.LocateFirst(System.String,System.String)">
            <summary>
            Finds the session with senderCompID and targetCompID. It's possible that can be several such sessions
            but method will return randomly first.
            </summary>
            <param name="senderCompId"> the sender comp id </param>
            <param name="targetCompId"> the target comp id </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.Exists(System.String)">
            <summary>
            Returns true if session with senderCompID and targetCompID exists.
            </summary>
            <param name="sessionId"> the unique session identifier </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.SessionListCopy">
            <summary>
            Gets cloned list of sessions.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RegisterSessionManagerListener(Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener)">
            <summary>
            Register client <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener"/>.
            </summary>
            <param name="listener"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.UnregisterSessionManagerListener(Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener)">
            <summary>
            Unregister client <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener"/>.
            </summary>
            <param name="listener"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CloseAllSession">
            <summary>
            Methods close all sessions.
            <p/>
            <p/>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.DisposeAllSession">
            <summary>
            Methods dispose all sessions.
            <p/>
            <p/>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.ResetSeqNums(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.SetSeqNums(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RarelyChangeList`1">
            <summary>
            This class contains two copies of the lists.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RarelyChangeList`1.Remove(`0)">
            <summary>
            Remove item from list and update(or create if the update is not possible) ReadOnly copy
            This method is not thread safe.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RarelyChangeList`1.Add(`0)">
            <summary>
            Added item to list and update(or create if the update is not possible) ReadOnly copy
            This method is not thread safe.
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RarelyChangeList`1.ReadOnlyCopy">
            <summary>
            Return ReadOnly copy of original list.
            Release the list after use to work properly.
            This method is not thread safe.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.RarelyChangeList`1.ReleaseCopy(System.Collections.Generic.IList{`0})">
            <summary>
            Release the list after use to work properly.
            This method is not thread safe. </summary>
            <param name="copy"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CopyOnEditArrayList`1.Remove(`0)">
            <summary>
            Remove item from list and set 'true' change flag.
            This method is not thread safe.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CopyOnEditArrayList`1.Add(`0)">
            <summary>
            Add item to list and set 'true' change flag.
            This method is not thread safe.
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CopyOnEditArrayList`1.GetReadOnlyCopy">
            <summary>
            
            </summary>
            <returns> read only copy of original list </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CopyOnEditArrayList`1.RemoveAll">
            <summary>
            Clears content of the list.
            </summary>
            <returns>Read only copy of the list before clearing.</returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CopyOnEditArrayList`1.IsEmpty">
            <summary>
            Returns true if the list is empty.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager.CopyOnEditArrayList`1.Count">
            <summary>
            Gets count of elements in the list.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener">
            <summary>
            The listener interface for receiving action events from FixSessionManager.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener.OnAddSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Invoked when the configured fixSession added.
            </summary>
            <param name="params"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener.OnRemoveSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Invoked when the configured fixSession removed.
            </summary>
            <param name="params"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionRegister.AddSessionManagerListener(Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener)">
            <summary>
            Register client ConfiguredSessionListener.
            </summary>
            <param name="listener"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionRegister.RemoveSessionManagerListener(Epam.FixAntenna.NetCore.FixEngine.Manager.IConfiguredSessionListener)">
            <summary>
            Unregister client ConfiguredSessionListener.
            </summary>
            <param name="listener"> </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener">
            <summary>
            The listener interface for receiving action events from FixSessionManager.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Manager.FixSessionManager"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener.OnAddSession(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession)">
            <summary>
            Invoked when the fixSession  added.
            </summary>
            <param name="fixSession"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Manager.IFixSessionListListener.OnRemoveSession(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession)">
            <summary>
            Invoked when the fixSession  removed.
            </summary>
            <param name="fixSession"> </param>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.VariableLength">
            <summary>
            Special value for defining the size of field with variable value length
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.Reserve(System.Int32,System.Int32)">
            <summary>
            Specifies tagId and size of the tag value. All tags should be reserved in order like in generated message.
            Use <c>MessageStructure.VariableLength</c> to define the tag value that could be increased dynamically for concrete parameter.
            Keep in mind, this will slow performance and spawn new Objects in runtime.
            Reserved field will be added to the end of the structure.
            </summary>
            <param name="tagId">  tagId </param>
            <param name="length"> required amount of bytes for value or <c>MessageStructure.VariableLength</c> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.Reserve(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies tagId and size of the tag value. Reserved field will be inserted at specified position.
            </summary>
            <param name="position"> position to insent the tag </param>
            <param name="tagId">    tagId </param>
            <param name="length">   required amount of bytes for value or <see cref="F:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.VariableLength"/> </param>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.Reserve(System.Int32,System.Int32,System.Int32,Epam.FixAntenna.NetCore.FixEngine.ValueType)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.Append(Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Append fields to the end of current structure.
            </summary>
            <param name="struct"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.SetLength(System.Int32,System.Int32)">
            <summary>
            Change the length for specific tag.
            </summary>
            <param name="tagId"> </param>
            <param name="length"> required amount of bytes for value or <see cref="F:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.VariableLength"/> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.SetLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Change the length for specific tag.
            </summary>
            <param name="tagId"> </param>
            <param name="occurance"> </param>
            <param name="length">    required amount of bytes for value or <see cref="F:Epam.FixAntenna.NetCore.FixEngine.MessageStructure.VariableLength"/> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.#ctor(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Default constructor with <see cref="T:Epam.FixAntenna.NetCore.FixEngine.SessionParameters"/> object. This parameters will be used for building new PreparedMessage
            objects.
            </summary>
            <param name="sessionParameters"> SessionParameters object </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds FixMessage object from exist template. Instance is received from pool.
            </summary>
            <param name="message"> </param>
            <param name="userStructure">
            @return </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException">
             </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds FixMessage object from exist template.
            </summary>
            <param name="message"> </param>
            <param name="userStructure">
            @return </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException">
             </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds FixMessage object with specified type, message structure and prefilled header information
            </summary>
            <param name="msgTypeStr">    message type </param>
            <param name="userStructure"> message structure </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds FixMessage object with specified type, message structure and prefilled header information
            </summary>
            <param name="msgTypeStr">    message type </param>
            <param name="userStructure"> message structure </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds FixMessage object with specified type, message structure and prefilled header information
            </summary>
            <param name="msgType">       message type </param>
            <param name="userStructure"> message structure </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds FixMessage object with specified type, message structure and prefilled header information
            </summary>
            <param name="msgType">       message type </param>
            <param name="userStructure"> message structure </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from exist template with specified message structure and prefilled
            header and trailer.
            </summary>
            <param name="template"> </param>
            <param name="msgType"> </param>
            <param name="userStructure"> </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from exist template with specified message structure and prefilled
            header and trailer.
            </summary>
            <param name="template"> </param>
            <param name="msgType"> </param>
            <param name="userStructure"> </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from exist template with specified message type, message structure
            and prefilled header and trailer.
            </summary>
            <param name="template">      FixMessage object </param>
            <param name="userStructure"> template structure </param>
            <param name="msgType">       type of the template </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> exception </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessageFromString(System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message"> </param>
            <param name="structure"> </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessageFromString(System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message"> </param>
            <param name="structure"> </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessageFromString(System.Byte[],System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message">   message string </param>
            <param name="structure"> message structure object </param>
            <param name="type">      message type </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> exception </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessageFromString(System.Byte[],System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message">   message string </param>
            <param name="structure"> message structure object </param>
            <param name="type">      message type </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> exception </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessageFromString(System.Byte[],System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message"> </param>
            <param name="type"> </param>
            <param name="structure"> </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.PrepareMessageFromString(System.Byte[],System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure,System.Boolean)">
            <summary>
            Builds <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/> object from String object.
            </summary>
            <param name="message"> </param>
            <param name="type"> </param>
            <param name="structure"> </param>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.BuildStructureFromFixMessage(Epam.FixAntenna.NetCore.FixEngine.MessageStructure,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.GetBytesLength(System.Int64)">
            <summary>
            returns size of serialized long in bytes
            </summary>
            <param name="num"> number </param>
            <returns> number of bytes </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.FormatUInt(System.Int64)">
            <seealso cref="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUInt(System.Int64)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.PreparedMessageUtil.ParseInt(System.Byte[],System.Int32,System.Int32)">
            <seealso cref="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseInt(System.Byte[],System.Int32,System.Int32)"> </seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.FilteredFixServerListener">
            <summary>
            Proxy listener for filtering incoming connections.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.IScheduledFixSession">
            <summary>
            Interface for FIX session which could have scheduled start/stop time.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.IScheduledFixSession.Schedule">
            <summary>
            Init scheduler with start/stop tasks for this session.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.IScheduledFixSession.Deschedule">
            <summary>
            Deactivate scheduled tasks for this session.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.MultipartCronExpression">
            <summary>
            Keeps a list of cron expressions.
            Cron expressions are passed in a string with the "|" delimiter.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.MultipartCronExpression.GetTimeBefore(System.DateTimeOffset)">
            <summary>
            Find the closest time before the passed date that satisfied at least one of the cron expressions.
            See <see cref="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.MultipartCronExpression.GetTimeBefore(System.DateTimeOffset,Quartz.CronExpression)"/>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.MultipartCronExpression.GetTimeAfter(System.DateTimeOffset)">
            <summary>
            Find the closest time after the passed date that satisfied at least one of the cron expressions.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.MultipartCronExpression.GetTimeBefore(System.DateTimeOffset,Quartz.CronExpression)">
            <summary>
            Find the closest time before the passed date that satisfied the cron expression.
            Had to implement this as GetTimeBefore from CronExpression is not implemented and always returns null.
            
            Calculation is based on the existing GetNextValidTimeAfter method and the binary search idea.
            Basically, we need to find an appropriate value of the function y(t) = GetNextValidTimeAfter(t).
            This function is non-decreasing, and this fact allows using the binary search.
            We want to find "t" that satisfies the cron expression and y(t) >= date or y(t) is null.
            y(t) = null means that no time in future after the "t" value satisfies the cron expression).
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.Schedule.IsInsideInterval(System.DateTimeOffset)">
            <summary>
            Check if a date is inside interval defined by the schedule.
            If a date satisfies TradePeriodBegin or TradePeriodEnd then it's not inside the interval
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.ScheduledFixServer">
            <summary>
            FIXServer implementation that support scheduling of allow/deny policies for incoming connections.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.ScheduledFixServer.#ctor">
            <summary>
            Creates a scheduled fix server.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Scheduler.ScheduledFixServer.#ctor(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates a scheduled fix server.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.Tasks.AbstractSessionTask">
            <summary>
            Abstract task for session processing.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.Tasks.InitiatorSessionStartTask">
            <summary>
            Start initiator session. If it not exists than create it first.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.Tasks.SessionStopTask">
            <summary>
            Thi task disconnects specific session.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Scheduler.Tasks.TestRequestTask">
            <summary>
            Check if test request is send and replay received.
            If test request is send and no replay received during heartbeat+20%
            seconds, session wil be disconnected.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.SessionParameters">
            <summary>
            This bean contains all session level configuration for current session.
            <p/>
            It is possible to confiniently define a list of custom FIX fields  that will be added to each message.
            For more complex message customization take a look at <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory"/>
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory"> for more precise customization </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.Configuration">
            <summary>
            Gets or sets Configuration.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.FixVersion">
            <summary>
            Gets FIX version.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.FixVersionFromString(System.String)">
            <summary>
            Sets FIX version
            </summary>
            <param name="fixVersion"></param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AppVersion">
            <summary>
            Gets or sets the App version.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AppVersionFromString(System.String)">
            <summary>
            Set FixVersionContainer by provided appVersion string.
            </summary>
            <param name="appVersion"></param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.UserDefinedFields">
            <summary>
            Gets or sets user defined fields.
            <p/>
            If this list is not empty, Engine add it to each outgoing message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddHeaderField(System.Int32,System.Byte[])">
            <summary>
            Add user defined field.
            </summary>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.SenderCompId">
            <summary>
            Gets or sets sender comp id.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.TargetCompId">
            <summary>
            Gets or sets target comp id.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.SenderSubId">
            <summary>
            Gets or sets sender sub id.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.TargetSubId">
            <summary>
            Gets or sets target sub id.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.SenderLocationId">
            <summary>
            Gets or sets sender location id.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.TargetLocationId">
            <summary>
            Gets or sets target location id.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.SetSessionId(System.String)">
            <summary>
            Change session identifier
            </summary>
            <param name="sessionId"> unique string value. maximum 200 characters length. Allowed characters: a-z, A-Z, 0-9, '.',
             '-', '_', ' '(space) and '!' </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.HeartbeatInterval">
            <summary>
            Gets or sets heartbeat interval.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.Host">
            <summary>
            Gets or sets host.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.HasPort">
            <summary>
            Returns true if the Port is set.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.Port">
            <summary>
            Gets or sets port.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.ForceSeqNumReset">
            <summary>
            Gets or sets force sequence reset option.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.IncomingLoginMessage">
            <summary>
            Gets or sets incoming login fields.
            </summary>
            <value> FixMessage list of field </value>
            <remarks>Engine use IncomingLoginMessage only for acceptor session.</remarks>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.OutgoingLoginMessage">
            <summary>
            Gets or sets outgoing login fields.
            <p/>
            This parameter used only for initiator session,
            Engine added outgoingLoginFixMessage to login message.
            </summary>
            <value> list of fields </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddOutgoingLoginField(System.Int32,System.String)">
            <summary>
            Add field to outgoing login fields list.
            </summary>
            <param name="tag"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddOutgoingLoginField(System.Int32,System.Byte[])">
            <summary>
            Add field to outgoing login fields list.
            </summary>
            <param name="tag"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddOutgoingLoginField(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add field to outgoing login fields list.
            </summary>
            <param name="tag"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddOutgoingLoginField(System.Int32,System.Int64)">
            <summary>
            Add field to outgoing login fields list.
            </summary>
            <param name="tag"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddOutgoingLoginField(System.Int32,System.Double,System.Int32)">
            <summary>
            Add field to outgoing login fields list.
            </summary>
            <param name="tag"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddOutgoingLoginField(System.Int32,System.DateTimeOffset,Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType)">
            <summary>
            Add field to outgoing login fields list.
            </summary>
            <param name="tag"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.Clone">
            <summary>
            Creates and returns a copy of this object.
            </summary>
            <returns> SessionParameters </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.ToProperties">
            <summary>
            Creates and returns a copy of this object.
            The engine calls this method when the specific parameters should be serialized to properties.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.FromProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates the SessionParameters from properties.
            The engine calls this method when the stored parameters should be de-serialized from properties.
            </summary>
            <param name="properties"> the properties </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.LastSeqNumResetTimestamp">
            <summary>
            Gets or sets last seq num reset timestamp.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.Destinations">
            <summary>
            Gets alternative(backup) destinations for initiator. </summary>
            <value> list of alternative destinations. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddDestination(System.String,System.Int32)">
            <summary>
            Add alternative(backup) destination for initiator. </summary>
            <param name="host"> backup host </param>
            <param name="port"> backup port </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddDestination(System.Net.DnsEndPoint)">
            <summary>
            Add alternative(backup) destination for initiator. </summary>
            <param name="destination"> backup address </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.AddAllDestinations(System.Collections.Generic.ICollection{System.Net.DnsEndPoint})">
            <summary>
            Add alternative(backup) destinations for initiator. </summary>
            <param name="destinations"> backup addresses </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.RemoveDestination(System.String,System.Int32)">
            <summary>
            Remove alternative(backup) destination from connections list. </summary>
            <param name="host"> backup host </param>
            <param name="port"> backup port </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.RemoveDestination(System.Net.DnsEndPoint)">
            <summary>
            Remove alternative(backup) destination from connections list. </summary>
            <param name="destination"> backup address </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.RemoveAllDestinations(System.Collections.Generic.ICollection{System.Net.DnsEndPoint})">
            <summary>
            Remove alternative(backup) destinations from connections list. </summary>
            <param name="destinations"> backup addresses </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CreateNewFixSession">
            <summary>
            Creates initiator fix session.
            <p/>
            User can use
            <c>StandardFixSessionFactory.GetFactory(SessionParameters).CreateInitiatorSession(SessionParameters)</c>
            instead this method.
            </summary>
            @deprecated use <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CreateAcceptorSession"/> or <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CreateInitiatorSession"/> instead
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CreateAcceptorSession">
            <summary>
            Creates acceptor session in disconnected state
            </summary>
            <returns> FIX session </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CreateInitiatorSession">
            <summary>
            Creates initiator session
            </summary>
            <returns> FIX session </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CreateScheduledInitiatorSession">
            <summary>
            Creates scheduled initiator session
            </summary>
            <returns> FIX session </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.CustomLoader">
            <summary>
            Gets or sets the loader for loading configurable classes.
            </summary>
            <value> </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.IsSimilar(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Return true if parameter object describe the same FIX session.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionParameters.IsSimilar(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,System.Collections.Generic.List{System.String})">
            <summary>
            Return true if parameter object describe the same FIX session.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.SessionState">
            <summary>
            Session state enum
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.SessionState.WaitingForForcedLogoff">
            <summary>
            Wait for Logout answer
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.SessionState.WaitingForForcedDisconnect">
            <summary>
            Wait a bit to close session after sending Logout
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.SessionState.IsDisconnected(Epam.FixAntenna.NetCore.FixEngine.SessionState)">
            <summary>
            Checks the session`s state and returns true if state is Disconnected or DisconnectedAbnormally.
            </summary>
            <param name="sessionState">Session state</param>
            <returns>true if state is Disconnected or DisconnectedAbnormally, false otherwise.</returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession">
            <summary>
            The abstract session implementation.
            Provides base functional for acceptor and initiator sessions.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.#ctor(Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory,Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain)">
            <summary>
            Creates the <c>AbstractFIXSession</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.#ctor">
            <summary>
            For testing purposes
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ExtendedFixSessionListener">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.StorageFactory">
            <summary>
            Gets storage factory
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RejectMessageListener">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ErrorHandler">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.FixSessionOutOfSyncListener">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SlowConsumerListener">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.MarkShutdownAsGraceful">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ClearQueue">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.QueuedMessagesCount">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.LockSending">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.UnlockSending">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetOutOfTurnMode(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ResetSequenceNumbers">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ResetSequenceNumbers(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetSequenceNumbers(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetFixSessionListener(Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.AddInSessionLevelMessageListener(Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.AddOutSessionLevelMessageListener(Epam.FixAntenna.NetCore.FixEngine.Session.ITypedFixMessageListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.AddUserGlobalMessageHandler(Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractUserGlobalMessageHandler)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.OutgoingStorage">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.IncomingStorage">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.MessageQueue">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.OutgoingQueueSize">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetOutgoingQueueMessages">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RetrieveSentMessage(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RetrieveReceivedMessage(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SaveSessionParameters">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Connect">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConnectAsync">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Reject(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Parameters">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.MessageFactory">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SessionState">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RuntimeState">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.IsStatisticEnabled">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.BytesRead">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.IsEstablished">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.BytesSent">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.NoOfInMessages">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.NoOfOutMessages">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.LastInMessageTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.LastOutMessageTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.MessageHandlers">
            <summary>
            Gets chain of message handlers.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Init">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.PrepareForConnect">
            <summary>
            Initializes the resources and sends a logon message.
            </summary>
            <exception cref="T:System.IO.IOException"> - if I/O error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.InitSessionInternal">
            <summary>
            Initialize session internal.
            <p/>
            <p/>
            The method is created all session object: in/out storage and pumper/reader, etc.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Disconnect(System.String)">
            <summary>
            Disconnect the session.
            <para>
            The method sends the logof message, if response is not received during the HBI,
            shutdown the session.
            </para>
            </summary>
            <param name="reason"> the reason, if parameter is not null, the logof message will be send with 58=reason. </param>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Disconnect(System.String)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.DisconnectAsync(System.String)">
            <summary>
            Disconnect the session. Async version.
            <para>
            The method sends the logof message, if response is not received during the HBI,
            shutdown the session.
            </para>
            </summary>
            <param name="reason"> the reason, if parameter is not null, the logof message will be send with 58=reason. </param>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Disconnect(System.String)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Disconnect(Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ForcedDisconnect(Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.TryStartSendingLogout">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Shutdown(Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.CloseTransport">
            <summary>
            Close the transport.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendLogoff(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends logout over "Out of turn" mode. Only sessions messages will be sends.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessageAndGetQueueSize(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendAsIs(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendAsIs(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendWithChanges(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.ChangesType,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendWithChangesAndGetQueueSize(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.ChangesType,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendWithChanges(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType})">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.PrepareMessage(Epam.FixAntenna.NetCore.Message.FixMessage,System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.PrepareMessage(System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.PrepareMessageFromString(System.Byte[],Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.PrepareMessageFromString(System.Byte[],System.String,Epam.FixAntenna.NetCore.FixEngine.MessageStructure)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessageAndGetQueueSize(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendMessageOutOfTurn(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.MessageValidator">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SendTestRequest">
            <summary>
            Send test request.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.CheckHasSessionSendOrReceivedTestRequest">
            <summary>
            The method checks if TR send or received.
            <para>
            If session is not received any messages during HB interval the HB will be send and
            If no response received session will be disconnected;
            </para>
            <para>
            This is helper method for session task.
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.DisconnectTestRequestIsLost">
            <summary>
            Disconnect the session if test request doesn't received.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetHbiPlusReasonableTransmissionTimeMillis">
            <summary>
            Returns configured HBI plus configured "reasonable transmission time"
            </summary>
            <returns>HBI + RTT in milliseconds</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RestoreSessionAfterReceivedTestRequest">
            <summary>
            Restore the session if test request is received.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetAttribute(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetAttributeAsLong(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetAttribute(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetAttributeAsBool(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetAttribute(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SetAttribute(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetAttribute(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.GetAndRemoveAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RemoveAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SubscribeForAttributeChanges(Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute,Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSessionAttributeListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.AddSessionStateListener(Epam.FixAntenna.NetCore.FixEngine.Session.IFixSessionStateListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RemoveSessionStateListener(Epam.FixAntenna.NetCore.FixEngine.Session.IFixSessionStateListener)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.LastDisconnectReason">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.FixSessionListenerObserver.OnSessionStateChange(Epam.FixAntenna.NetCore.FixEngine.SessionState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.FixSessionListenerObserver.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SessionStateAdapter.OnSessionStateChange(Epam.FixAntenna.NetCore.FixEngine.SessionState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.SessionStateAdapter.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.IsBlockingSocket">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.ReadMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.WaitUntilReadyToWrite">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.Close">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.OptimalBufferSize">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.RemoteHost">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.ConsumingControlTransportWrapper.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.InSeqNum">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.OutSeqNum">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.RegisterSessionTasks">
            <summary>
            Register session`s scheduled tasks:
            	- Scheduled SeqNum reset task
            	- HB
            	- TestRequest tasks
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession.UnRegisterSessionTasks">
            <summary>
            De-register session scheduled tasks:
            	- SeqNum reset
            	- HB
            	- TestRequest
            	- Session schedule
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AcceptorFixSession.Connect">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AcceptorFixSession.Reject(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AcceptorFixSession.IsResetSeqNumFlagRequiredForInitLogon">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AcceptorFixSession.ResetSeqNumFlagIsEnabled(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AcceptorFixSession.GetAndRemoveAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.InitTransport">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.SetFixSessionListener(Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.ExtendedListenerImpl.OnMessageReceived(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.ExtendedListenerImpl.OnMessageSent(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.ExtendedListenerImpl.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.Disconnect(Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.StartSession">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.ConnectInternal">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.SwitchToBackUp">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.SwitchToPrimary">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.AutoreconnectFixSession.IsRunningOnBackup">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory">
            <summary>
            The abstract fix message factory implementation.
            This class provides the base functionality to work with message.
            All sub classes should implement <c>AsByteArray</c> method to provide ability
            to wrap fix content (adds or updates sequence, body length and checksum fields).
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.MinSeqNumFieldsLength">
            <summary>
            Minimum length of the SeqNum type fields.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.GetRejectForMessageTag(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,System.String)">
            <summary>
            Creates reject message.
            </summary>
            <param name="rejectMessage"> the rejected message </param>
            <param name="refTagId">   the reference tag </param>
            <param name="rejectReason">  the reject reason </param>
            <param name="rejectText">    the reject text </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.GetEndSequenceNumber">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.SetSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.SetRuntimeState(Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.Serialize(Epam.FixAntenna.NetCore.Message.MsgBuf,System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.Serialize(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType},Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.GetCurrentSendingTime">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.SendingTime">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixMessageFactory.CompleteMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory">
            <summary>
            This is abstract implementation of FixSessionFactory.
            This class provides the base functionality for creates initiator and acceptor session,
            and configurations it listeners. The user implementation should override <see cref="!:GetMessageFactory"/>
            method.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixSession"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardSessionFactory"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory.GetFixVersion">
            <summary>
            Gets fix version.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory.SetFixVersion(Epam.FixAntenna.NetCore.Common.FixVersion)">
            <summary>
            Sets fix version.
            </summary>
            <param name="fixVersion"> the fix version </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory.CreateAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory.CreateAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Common.AbstractFixSessionFactory.MessageFactory">
            <summary>
            Gets message factory.
            </summary>
            <value> Method returns the message factory instance. </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.EnqueuedFixMessage">
            <inheritdoc/>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute">
            <summary>
            Enum define the session all attributes.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.GetAttribute(System.String)"></seealso>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SetAttribute(System.String,System.Object)"></seealso>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.RemoveAttribute(System.String)"></seealso>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.LastRrSeqNum">
            <summary>
            The last RR seq num occurred when engine send RR and after every saves it to file.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.DeleteLastProcessedSeqNumFromFile">
            <summary>
            The <c>DeleteLastProcessedSeqNumFromFile</c> is present in session attributes only when
            the last processed seq num is load from session parameters file. If this flag is set the session should
            update the appropriate parameter in properties file.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.LastSentTestReqId">
            <summary>
            This constant signals that test request sent by fix session.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.SentTestReqNumberId">
            <summary>
            This constant signals that how many test request sent by fix session.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.LastReceivedTestReqId">
            <summary>
            This constant signals that test request had been received by fix session.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.IsSendResetSeqNum">
            <summary>
            This is only for internal use.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.StartOfRrRange">
            <summary>
            This is only for internal use.
            Start of sequence range.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.EndOfRrRange">
            <summary>
            This is only for internal use.
            End of sequence range.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.StartRrSeqNum">
            <summary>
            This is only for internal use.
            Indicates the first incoming logon sequence number.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.RejectSession">
            <summary>
            This is only for internal use.
            Indicates the session is in state Reject
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.TestRequestIsSentForSeqReset">
            <summary>
            This is only for internal use.
            Indicates that TR was send for SR.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.IntradayLogonIsSent">
            <summary>
            This is only for internal use.
            Indicates that logon was send for SR.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.SimilarRrCounter">
            <summary>
            This attribute contains how many similar ResendRequests were sent, to prevent infinite resent loop. </summary>
            <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.AllowedCountOfSimilarRr"></seealso>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.LastRrRange">
            <summary>
            This attribute contains range (startSeqNum-EndSeqNum) of last sent ResendRequest. It used to detect sending
            similar RR. </summary>
            <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.AllowedCountOfSimilarRr"> </seealso>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.SequenceWasDecremented">
            <summary>
            This attribute contains original sequence number.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.IBackupFixSession">
            <summary>
            The <c>IBackupFIXSession</c> provides ability to switch the connection from
            the primary host to backup and vice versa.
            The backup session should configured by engine.properties and default.properties configuration files.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IBackupFixSession.SwitchToBackUp">
            <summary>
            The method, switch current connection to backup.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IBackupFixSession.SwitchToPrimary">
            <summary>
            The method, switch current connection to primary.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IBackupFixSession.IsRunningOnBackup">
            <summary>
            Returns true, if session connected to backup host.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.IEnqueuedFixMessage">
            <summary>
            Represents FIX message and sending params obtained from <see cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession">
            <summary>
            Extended fix session.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.ExtendedFixSessionListener">
            <summary>
            Gets extended fix session listener.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.Shutdown(Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason,System.Boolean)">
            <summary>
            Shutdown the session with specified reason.
            </summary>
            <param name="reason">   disconnect reason </param>
            <param name="blocking"> If the parameter is true, the next call of method is blocking. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.TryStartSendingLogout">
            <summary>
            Returns true if the fix session has marked as started sending first or reply logout message
            Returns false if the fix session was already marked before this call
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.ForcedDisconnect(Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason,System.String,System.Boolean)">
            <summary>
            Gracefully disconnects current session but wait for answer forcedLogoffTimeout.
            
            Logoff with specified reason will be sent to your counterparty. Session will wait the answer for some period,
            defined by forcedLogoffTimeout configuration property.
            <i>Note: This method doesn't guarantee immediate shutdown,
            since FIX protocol require us to wait for counterparty logoff reply.
            </i>
            <i>Note: Use this method if you need to close session in exceptional cases and when there is a chance that
            counterparty newer answer.
            </i>
            </summary>
            <param name="reasonType">      the disconnect reason type</param>
            <param name="reason">          the reason </param>
            <param name="continueReading"> if false then reading of incoming messages will be stopped. This can be used for prevent
                                   reading of messages with broken sequencing. </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.RuntimeState">
            <summary>
            Gets session parameter instance.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.IncomingStorage">
            <summary>
            Gets incoming message storage.
            </summary>
            <value> message storage </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.OutgoingStorage">
            <summary>
            Gets outgoing message storage.
            </summary>
            <value> message storage </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.MessageQueue">
            <summary>
            Gets internal message queue.
            </summary>
            <value> message storage </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SaveSessionParameters">
            <summary>
            Save session parameters to file.
            </summary>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.MessageFactory">
            <summary>
            Gets message factory.
            </summary>
            <value> message factory </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.LastInMessageTimestamp">
            <summary>
            Gets last received message timestamp in milliseconds.
            </summary>
            <value> timestamp </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.IsEstablished">
            <summary>
            Gets established session timestamp in milliseconds.
            </summary>
            <value> timestamp </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.IsStatisticEnabled">
            <summary>
            Shows statistics on or off.
            </summary>
            <returns> true is statistic is enabled </returns>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.BytesSent"></seealso>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.BytesRead"></seealso>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.NoOfInMessages"></seealso>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.NoOfOutMessages"></seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.BytesSent">
            <summary>
            Gets send bytes.
            </summary>
            <value> number of send bytes or -1 if statistic is disabled </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.BytesRead">
            <summary>
            Gets read bytes.
            </summary>
            <value> number of read bytes or -1 if statistic is disabled </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.NoOfInMessages">
            <summary>
            Gets number of received message.
            </summary>
            <value> number of received message or -1 if statistic is disabled </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.NoOfOutMessages">
            <summary>
            Gets number of sent message.
            </summary>
            <value> number of sent message or -1 if statistic is disabled </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.LastOutMessageTimestamp">
            <summary>
            Gets time when the message is sent
            </summary>
            <value> time when the message is sent or -1 if statistic is disabled </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SetAttribute(System.String,System.Object)">
            <summary>
            Sets session attribute.
            </summary>
            <param name="key">    the attribute key </param>
            <param name="value"> the attribute value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.GetAttribute(System.String)">
            <summary>
            Gets session attribute value.
            </summary>
            <param name="key"> the attribute key </param>
            <returns> attribute value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.RemoveAttribute(System.String)">
            <summary>
            Removes session attribute.
            </summary>
            <param name="key"> the attribute key </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SendMessageOutOfTurn(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Sends message out of turn.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="message"> the message </param>
            <returns> true if message was send immediately, false - message was queued for later sending </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SetOutOfTurnMode(System.Boolean)">
            <summary>
            Sets OutOf turn mode.
            </summary>
            <param name="mode"> the mode </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SendMessageAndGetQueueSize(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <summary>
            Do the same that <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)"/> and return queue size.
            </summary>
            <returns> queue size. 0 if message was send synchronously </returns>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SendWithChangesAndGetQueueSize(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.ChangesType,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <summary>
            Do the same that <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendWithChanges(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.ChangesType,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)"/> and return queue size.
            </summary>
            <returns> queue size. 0 if message was send synchronously </returns>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendWithChanges(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.ChangesType,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.SendMessageAndGetQueueSize(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <summary>
            Do the same that <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)"/> and return queue size.
            </summary>
            <returns> queue size. 0 if message was send synchronously </returns>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.SendMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.MarkShutdownAsGraceful">
            <summary>
            Marks the session shutdown as gracefully.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession.ClearQueue">
            <summary>
            Clears output message queue.
            Method also reject all messages from the queue.
            To use this feature, the user should set the <c>RejectMessageListener</c> listener.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.AbstractSerializationStrategy.GetBeginStringFieldWithBodyLengthTag">
            <summary>
            Gets header
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.CmeSecureLogonStrategy">
            <summary>
            CME secure logon provides an ability to logon using SHA256 digital signature technique.
            This logon feature has been introduced by CME and provides highest security.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix40MessageFactory">
            <summary>
            The FIX 4.0 message factory implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix40MessageFactory.#ctor">
            <summary>
            Creates the <c>FIX40MessageFactory</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix40MessageFactory.SetSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix40MessageFactory.GetRejectForMessageTag(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix40MessageFactory.GetEndSequenceNumber">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix41MessageFactory">
            <summary>
            The FIX 4.1 message factory implementation.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix42MessageFactory">
            <summary>
            The FIX 4.2 message factory implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix42MessageFactory.#ctor">
            <summary>
            Creates the <c>FIX42MessageFactory</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix42MessageFactory.GetRejectForMessageTag(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix43MessageFactory">
            <summary>
            The FIX 4.3 message factory implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix43MessageFactory.GetRejectForMessageTag(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix44MessageFactory">
            <summary>
            The FIX 4.4 message factory implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix44MessageFactory.SetSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix44MessageFactory.GetLoginHeader">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fix44MessageFactory.CompleteLogin(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fixt11MessageFactory">
            <summary>
            The FIXT 1.1 message factory implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fixt11MessageFactory.GetLoginHeader">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.Fixt11MessageFactory.CompleteLogin(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory">
            <summary>
            The standard message factory implementation.
            This class implements <c>AsByteArray</c> method for wrapping message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.#ctor">
            <summary>
            Creates the <c>StandardMessageFactory</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.SetSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.Serialize(Epam.FixAntenna.NetCore.Message.MsgBuf,System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <summary>
            Wraps the sending message.
            </summary>
            <param name="msgType">   the message type, if is null - the message send as is,
                             and if is '' - method updates body length, sequence number, sending time and checksum fields,
                             otherwise method wraps the <c>fixFields</c>.
                             '' is also used for sending logon message. </param>
            <param name="fixFields"> the list of fix fields </param>
            <returns> bytes of sending message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.SerializePreparedMessage(Epam.FixAntenna.NetCore.Message.MsgBuf,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <summary>
            Wraps the sending message.
            </summary>
            <param name="message"> preparedMessage </param>
            <param name="buffer">  ByteBuffer for write </param>
            <param name="context"> Serialization context</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.Serialize(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType},Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,Epam.FixAntenna.NetCore.FixEngine.SerializationContext)">
            <summary>
            Wraps the sending message.
            </summary>
            <param name="content">     the list of fix fields </param>
            <param name="changesType"> the changesType </param>
            <returns> bytes of sending message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.SafeSetValueAfter(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,System.Byte[])">
            <summary>
            If tag exist update fix field, otherwise added fix field after afterTag,
            if afterTag field exists.
            </summary>
            <param name="fixMessagest"> the fix message </param>
            <param name="afterTag">     the tag, if afterTag exists, the <c>tag</c> insert after it </param>
            <param name="tag">          the to insert tag </param>
            <param name="value">        the value if insert tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.GetSenderTargetHeader">
            <summary>
            Gets header with sender and target fields.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.GetBeginStringFieldWithBodyLengthTag">
            <summary>
            Gets header
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.CompleteMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Completes the message <c>content</c> with necessarily fields.
            </summary>
            <param name="msgType"> the message type field </param>
            <param name="content"> the content of message </param>
            <returns> the completed message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardMessageFactory.GetCurrentSendingTime">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardSessionFactory">
            <summary>
            This class implements the abstract method <see cref="!:GetMessageFactory"/>
            for creation <see cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory"/> instances.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardSessionFactory.#ctor(System.Type)">
            <summary>
            Creates the <see cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory"/>.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Impl.StandardSessionFactory.MessageFactory">
            <summary>
            Gets the <see cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory"/>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.#ctor(Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory,Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain)">
            <summary>
            Creates the <c>InitiatorFIXSession</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.GetTransport(System.String,System.Int32,Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets transport.
            </summary>
            <param name="host">              the host </param>
            <param name="port">              the port </param>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.IsActive">
            <summary>
            Returns true, if session is in active state.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.Init">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.Connect">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.SessionState">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.Reject(System.String)">
            <summary>
            Unsupported for InitiatorFIXSession. Always throws IllegalStateException.
            </summary>
            <exception cref="T:System.InvalidOperationException"> </exception>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixSession.Reject(System.String)"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.InitiatorFixSession.Disconnect(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AffinitySupportThread.ApplyAffinity(System.Int32[])">
            <summary>
            This method pins current thread to the first defined parameter with cpu id.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AffinitySupportThread.IsCpuIdValid(System.Int32)">
            <summary>
            Checks that CPU identifier is in valid range.
            </summary>
            <param name="cpuId">Zero based identifier of CPU core.</param>
            <returns>Returns true, if provided value is in range [0..CpuCount-1], false otherwise. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AffinitySupportThread.GetDefinedAffinity(System.Int32[])">
            <param name="affinities"> </param>
            <returns> first defined affinity or undefined value if all values are undefined </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue{Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType},Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage,Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport,Epam.FixAntenna.NetCore.FixEngine.Session.ISessionSequenceManager)">
            <summary>
            Creates the <c>AsyncMessagePumper</c>.
            </summary>
            <param name="queue">          the output queue </param>
            <param name="messageFactory"> the output message storage </param>
            <param name="transport">      the transport </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.IsStatisticEnabled">
            <returns> true is statistic is enabled </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.Statistic">
            <summary>
            Gets statistic of processed messages.
            WARNING: Before the call to ensure that the statistics are included.
            </summary>
            <value> MessageStatistic </value>
            <exception cref="T:System.InvalidOperationException"> if <c>statisticEnabled</c> is false </exception>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.IsStatisticEnabled"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.EnqueueHeartbeatToSend">
            <summary>
            Sends the heartbeat message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.Shutdown">
            <summary>
            Shutdown the pumper.
            <p/>
            This method calls engine before the session is close.
            This is blocked method.
            If queue has the messages and if message rejecting is
            enabled, the messages are rejecting, <see cref="T:Epam.FixAntenna.NetCore.FixEngine.IRejectMessageListener"/>.
            This methods should be called from other thread
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.RejectQueueMessages">
            <summary>
            Reject all non send message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.Send(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <summary>
            Pool the message to queue.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="content"> the message content </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.Send(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType})">
            <summary>
            Pool the message to queue.
            </summary>
            <param name="content">     the message content </param>
            <param name="changesType"> the change type </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.IsQueueTooBig">
            <summary>
            Checks the queue size. The method is blocking.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.IsQueueTooBigForSessionMessages">
            <summary>
            Checks the queue size. The method is blocking.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.OutgoingMessageStorage">
            <summary>
            Gets outgoing message storage.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.AsyncMessagePumper.GracefulShutdown">
            <summary>
            Sets gracefulShutdown flag.
            </summary>
            <value> the graceful shutdown flag </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader">
            <summary>
            The <c>MessageReader</c> reads message from transport.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.#ctor(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage,Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ICompositeMessageHandlerListener,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport)">
            <summary>
            Creates <c>MessageReader</c>.
            </summary>
            <param name="messageStorage">              the message storage </param>
            <param name="session">           the session </param>
            <param name="compositeFixSessionListener"> the session listener </param>
            <param name="transport">                   the transport </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.Shutdown">
            <summary>
            Shutdown the reader.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.IsStatisticEnabled">
            <returns> true is statistic is enabled </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.MessageStatistic">
            <summary>
            Gets statistic of processed messages.
            WARNING: Before the call to ensure that the statistics are included.
            </summary>
            <value> MessageStatistic </value>
            <exception cref="T:System.InvalidOperationException"> if <c>statisticEnabled</c> is false </exception>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.IsStatisticEnabled"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.ProcessBufferedMessages">
            <summary>
            Handles messages buffered during processing filling the gap
            </summary>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.IncomingMessageStorage">
            <summary>
            Gets incoming message storage.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.GracefulShutdown">
            <summary>
            Sets graceful shutdown flag.
            </summary>
            <value> the graceful shutdown flag </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper">
            <summary>
            The message pumper writes messages to transport.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1"> </seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType"> </seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.Message.MessageStorage"> </seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory"> </seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue{Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType},Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage,Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport,Epam.FixAntenna.NetCore.FixEngine.Session.ISessionSequenceManager)">
            <summary>
            Creates the <c>SyncBlockingMessagePumper</c>.
            </summary>
            <param name="extendedFixSession"> the session </param>
            <param name="queue">              the output queue </param>
            <param name="messageFactory">     the output message storage </param>
            <param name="transport">          the transport </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.IsStatisticEnabled">
            <returns> true is statistic is enabled </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.Statistic">
            <summary>
            Gets statistic of processed messages.
            WARNING: Before the call to ensure that the statistics are included.
            </summary>
            <value> MessageStatistic </value>
            <exception cref="T:System.InvalidOperationException"> if <c>statisticEnabled</c> is false </exception>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.IsStatisticEnabled"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.CheckQueueAndFillBuffer">
            <returns> buffered messages count or -1 if buffering is blocked by another thread </returns>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.EnqueueHeartbeatToSend">
            <summary>
            Sends the heartbeat message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.Shutdown">
            <summary>
            Shutdown the pumper.
            <p/>
            This method calls engine before the session is close.
            This is blocked method.
            If queue has the messages and if message rejecting is </summary>
            enabled, the messages are rejecting, <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IRejectMessageListener">.
            This methods should be called from other thread </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.RejectQueueMessages">
            <summary>
            Reject all non send message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.Send(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <summary>
            Pool the message to queue.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="content"> the message content </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.Send(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType})">
            <summary>
            Pool the message to queue.
            </summary>
            <param name="content">     the message content </param>
            <param name="changesType"> the change type </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.IsQueueTooBig">
            <summary>
            Checks the queue size. The method is blocking.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.IsQueueTooBigForSessionMessages">
            <summary>
            Checks the queue size. The method is blocking.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.GetOutgoingMessageStorage">
            <summary>
            Gets outgoing message storage.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncBlockingMessagePumper.GracefulShutdown">
            <summary>
            Sets gracefulShutdown flag.
            </summary>
            <value> the graceful shutdown flag </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper">
            <summary>
            The message pumper writes messages to transport.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory"></seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue{Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType},Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage,Epam.FixAntenna.NetCore.FixEngine.IFixMessageFactory,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport,Epam.FixAntenna.NetCore.FixEngine.Session.ISessionSequenceManager)">
            <summary>
            Creates the <c>SyncMessagePumper</c>.
            </summary>
            <param name="queue">          the output queue </param>
            <param name="messageFactory"> the output message storage </param>
            <param name="transport">      the transport </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.IsStatisticEnabled">
            <returns> true is statistic is enabled </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.Statistic">
            <summary>
            Gets statistic of processed messages.
            WARNING: Before the call to ensure that the statistics are included.
            </summary>
            <value> MessageStatistic </value>
            <exception cref="T:System.InvalidOperationException"> if <c>statisticEnabled</c> is false </exception>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader.IsStatisticEnabled"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.EnqueueHeartbeatToSend">
            <summary>
            Sends the heartbeat message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.Shutdown">
            <summary>
            Shutdown the pumper.
            <p/>
            This method calls engine before the session is close.
            This is blocked method.
            If queue has the messages and if message rejecting is </summary>
            enabled, the messages are rejecting, <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IRejectMessageListener" />
            This methods should be called from other thread
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.RejectQueueMessages">
            <summary>
            Reject all non send message.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.Send(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.FixSessionSendingType)">
            <summary>
            Pool the message to queue.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="content"> the message content </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.Send(Epam.FixAntenna.NetCore.Message.FixMessage,System.Nullable{Epam.FixAntenna.NetCore.FixEngine.ChangesType})">
            <summary>
            Pool the message to queue.
            </summary>
            <param name="content">     the message content </param>
            <param name="allowedChangesType"> the change type </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.IsQueueTooBig">
            <summary>
            Checks the queue size. The method is blocking.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.IsQueueTooBigForSessionMessages">
            <summary>
            Checks the queue size. The method is blocking.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.GetOutgoingMessageStorage">
            <summary>
            Gets outgoing message storage.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.SyncMessagePumper.GracefulShutdown">
            <summary>
            Sets gracefulShutdown flag.
            </summary>
            <value> the graceful shutdown flag </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.ISessionStateListenSupport">
            <summary>
            This is markup interface
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.LoggingErrorHandler.OnWarn(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.LoggingErrorHandler.OnError(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.LoggingErrorHandler.OnFatalError(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalMessageHandler">
            <summary>
            Abstract global handler. Provides functionality for call chained handlers.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalMessageHandler.NextHandler">
            <summary>
            Gets or sets the next message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalMessageHandler.CallNextHandler(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Invokes the next message handler.
            </summary>
            <param name="message"> the message
             </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler">
            <summary>
            The abstract post process message handler
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler.SetNext(Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.IPostProcessMessageHandler)">
            <summary>
            Sets the next message handler.
            </summary>
            <param name="handler"> the next message handler </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler.NextHandler">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler.CallNextHandler(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Invokes the next message handler.
            </summary>
            <param name="message"> the message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler.OnPostProcessMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler.HandleMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Handle message, user should override this method.
            </summary>
            <param name="message"> the message </param>
            <returns> if true - call next handler </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractSessionMessageHandler">
            <summary>
            The abstract session message handler
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractSessionMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractSessionMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractUserGlobalMessageHandler.ProcessMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Process input message in user message handler
            </summary>
            <param name="message"> </param>
            <returns> true - to process next handler in chain
                    false - stop further chain handlers processing </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractUserGlobalMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Cme.ILinkQuietLogonModeHandler">
             <summary>
             This class shutdown session with only warning notification if session get other then Logon(A) message in answer
             to Logon(A) request.
            
             Default FIX Antenna behaviour in such case - send Logout(5) message with warning and forceble shutdown session
             with error.
             </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler">
            <summary>
            The composite message handler, provides the custom message type handling.
            For handling specific message type,
            use <see cref="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.AddSessionMessageHandler(System.String,Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ISessionMessageHandler)"/> with specific handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.AddSessionMessageHandler(System.String,Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ISessionMessageHandler)">
            <summary>
            Adds the message handler for message type.
            </summary>
            <param name="msgType">        the message type </param>
            <param name="messageHandler"> the message handler </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.OnSessionStateChange(Epam.FixAntenna.NetCore.FixEngine.SessionState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.SetUserListener(Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener)">
            <summary>
            Sets the user handler.
            The user handler calls if custom message handler is no exists.
            </summary>
            <param name="listener"> the user listener </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.AddUserSessionMessageListener(Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener)">
            <summary>
            Sets listener to receive session level incoming messages.
            </summary>
            <param name="listener"> the user listener </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeMessageHandler.UserListenerDelegate.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeSystemMessageHandler.AbstractGlobalMessageHandlerAnonymousInnerClass.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeSystemMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.CompositeUserMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.AcceptorMissedResetOnLogonHandler">
            Missed reset handler: disconnect sessions with a special <seealso cref="F:Epam.FixAntenna.NetCore.FixEngine.Session.DisconnectReason.PossibleMissedReset"/>
            if incoming LOGON message has a sequence number higher than expected by <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.ResetThreshold"/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.AcceptorMissedResetOnLogonHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.AcceptorMissedResetOnLogonHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.EnhancedRrMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.EnhancedRrMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.EnhancedTestRequestMessageHandler.HandleTestRequestAction.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.EnhancedTestRequestMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.EnhancedTestRequestMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.GarbledMessageHandler">
            <summary>
            The garbled message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.GarbledMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            The next handler calls only:
            1. if message starts with 8 tag; <br/>
            2. if the second tag is 9. <br/>
            3. if the third tag is 35 <br/>
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.InvalidIncomingLogonMessageHandler">
            <summary>
            The global logon message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.InvalidIncomingLogonMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            The handler calls the next handler only if the session state is <c>WaitingForLogon</c>
            and the first message is 'A', otherwise the session is shutdown.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"></seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.MessageValidatorHandler">
            <summary>
            The message validator handler.
            If validation is enabled, handler uses the real validator from validation module,
            otherwise dummy implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.MessageValidatorHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            This handler calls the indirect validation library, if this library exists in class patch.
            If received message not valid the reject message will be send with reject code.
            <p/>
            Reject codes: <br/>
            '0'  Invalid tag number <br/>
            '1' 	Required tag missing <br/>
            '2' 	Tag not defined for this message type <br/>
            '3' 	Undefined Tag <br/>
            '4' 	Tag specified without a value <br/>
            '5' 	Value is incorrect (out of range) for this tag <br/>
            '6' 	Incorrect data format for value <br/>
            '7' 	Decryption problem <br/>
            '8' 	Signature problem <br/>
            '9' 	CompID problem <br/>
            '10' SendingTime (52) accuracy problem <br/>
            '11' Invalid MsgType (35) <br/>
            '12' XML Validation error <br/>
            '13' Tag appears more than once <br/>
            '14' Tag specified out of required order <br/>
            '15' Repeating group fields out of order <br/>
            '16' Incorrect NumInGroup count for repeating group <br/>
            '17' Non "data" value includes field delimiter (SOH character) <br/>
            '99' Other
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.MsgLoggingHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.MsgLoggingHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.OutOfSequenceMessageHandler">
            <summary>
            The out of sequence global message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.OutOfSequenceMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            If incoming sequence is equals to expected the next handler will be calls.
            <p/>
            If incoming sequence > expected the '2' message will be send, otherwise
            the session is shutdown.
            </summary>
            <param name="message"> the received message. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.OutOfSequenceMessageHandler.IsSeqResetAndNewSeqNoIsLessThanExpected(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int64)">
            <summary>
            Returns true if message is sequence reset and its NewSeqNo is less than expected.
            </summary>
            <param name="message"> the message </param>
            <param name="expectedSeqNum">the expected sequence number</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.OutOfSequenceMessageHandler.IsMsgShouldBeProcessedAnyway(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true if message should be processed anyway.
            <p/>
            The methods returns true only for next message types: logon, logout, SR, RR.
            <ul>
            <li>logon - will be processed anyway if logon has 34=1 and 141=Y.</li>
            <li>logout - will be processed anyway if session has <c>SessionState.WAITING_FOR_LOGOFF</c>.</li>
            <li>SR - will be processed if 123=N or 123 does not exist.</li>
            <li>RR - will be processed if 43=Y.</li>
            </ul>
            </summary>
            <param name="message"> the message </param>
            <returns> boolean </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.OutOfSequenceMessageHandler.ProcessMessageWithHighSeqNum(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int64,System.Int64)">
            <summary>
            Process message with high seq num.
            <p/>
            The methods request missing messages.
            Note: The incoming seq num will be decremented.
            </summary>
            <param name="message">        the message </param>
            <param name="incomingSeqNum"> the incoming seq num </param>
            <param name="expectedSeqNum"> the expected seq num </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.OutOfSequenceMessageHandler.ProcessMessageWithLowSeqNum(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int64,System.Int64)">
            <summary>
            Process message with low seq num.
            <p/>
            Note:
            The incoming message will be ignored only if message has 43=Y and incoming seq num is low than expected.
            </summary>
            <param name="message">        the message </param>
            <param name="incomingSeqNum"> the incoming seq num </param>
            <param name="expectedSeqNum"> the expected seq num </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.PossDupMessageHandler">
            <summary>
            The global PossDup message handler.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.PossDupMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.PossDupMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            The method validates the message only if PossDupFlag is
            set to true, otherwise the next handler is invoked.
            The content of message should includes Smh.OrigSendingTime, Smh.SendingTime, if this
            fields are incorrect the reject message will be send.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.QuietLogonModeHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            The handler calls the next handler only if the session state is <c>WAITING_FOR_LOGON</c>
            and the first message is 'A',
            otherwise the session is shutdown.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.RrSequenceRangeResponseHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.RrSequenceRangeResponseHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SenderTargetIdConsistencyHandler">
            <summary>
            Global sender target consistency handler.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SenderTargetIdConsistencyHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SenderTargetIdConsistencyHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SendingTimeAccuracyHandler">
            <summary>
            The global sending time accuracy handler.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SendingTimeAccuracyHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SendingTimeAccuracyHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SendingTimeAccuracyHandler.ValidateSendingTime(System.DateTime)">
            <summary>
            Validates the sending time field(52 tag).
            </summary>
            <returns> true if need to call next handler </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.SendingTimeAccuracyHandler.ParseMessageTimestamp(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Parse message timestamp to local field
            </summary>
            <param name="message"> the incoming message </param>
            <returns> true if parse was successful </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.ThrottleCheckingHandler">
            <summary>
            Throttling checking handler driven by <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.ThrottleCheckingPeriod"/>
            and <seealso cref="T:Epam.FixAntenna.NetCore.Configuration.Config"/> parameter throttleChecking.msgType.threshold
            if <seealso cref="F:Epam.FixAntenna.NetCore.Configuration.Config.ThrottleCheckingEnabled"/> set to true
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.ThrottleCheckingHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.ThrottleCheckingHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.VersionConsistencyHandler">
            <summary>
            The version consistency handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Global.VersionConsistencyHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            This handler checks the 8 tag in all incoming message.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain">
            <summary>
            The <c>HandlerChain</c> provides the <tt>chain of responsibility</tt> pattern.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.#ctor">
            <summary>
            Creates the <c>HandlerChain</c> with composite message handler.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.AddSessionMessageHandler(System.String,Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ISessionMessageHandler)">
            <summary>
            Adds the specific message handle.
            </summary>
            <param name="msgType">        the message type </param>
            <param name="messageHandler"> the message handler </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.AddGlobalMessageHandler(Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalMessageHandler)">
            <summary>
            Adds the global message handler.
            The handler adds to the end of handlers list.
            </summary>
            <param name="globalMessageHandler"> the global message handler </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.AddGlobalPostProcessMessageHandler(Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.AbstractGlobalPostProcessSessionMessageHandler)">
            <summary>
            Adds the global message handler.
            The handler adds to the stert of handlers list.
            </summary>
            <param name="globalMessageHandler"> the global message handler </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.OnMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.OnSessionStateChange(Epam.FixAntenna.NetCore.FixEngine.SessionState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.SetUserListener(Epam.FixAntenna.NetCore.FixEngine.IFixSessionListener)">
            <summary>
            Sets the user message compositeListener.
            </summary>
            <param name="listener"> the session compositeListener </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.HandlerChain.AddInSessionMessageListener(Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener)">
            <summary>
            Sets listener to receive session level incoming messages.
            </summary>
            <param name="listener"> the user listener </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ICompositeMessageHandlerListener">
            <summary>
            Composite message handler.
            Provides ability to listen incoming messages from <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.IoThreads.MessageReader"/>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ICompositeMessageHandlerListener.OnMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Invoked when incoming message received.
            </summary>
            <param name="messageBuf"> the message </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.IPostProcessMessageHandler">
            <summary>
            Post process message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.IPostProcessMessageHandler.OnPostProcessMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            On post process message
            </summary>
            <param name="message"> the message </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ISessionMessageHandler">
            <summary>
            The base interface for message handlers.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.ISessionMessageHandler.Session">
            <summary>
            Sets the extended fix session.
            </summary>
            <value> the extended fix session  </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.HeartbeatMessageHandler">
            <summary>
            The heartbeat message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.HeartbeatMessageHandler.#ctor">
            <summary>
            Creates the <c>HeartbeatMessageHandler</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.HeartbeatMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            If the message contains the 112 tag,
            the value of 112 tag will be save as session attribute
            <c>LastReceivedTestReqID</c>.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.IgnoreMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogoffMessageHandler">
            <summary>
            The Logoff message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogoffMessageHandler.#ctor">
            <summary>
            Creates the <c>LogoffMessageHandler</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogoffMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            The method is shutdown the fix session.
            If session is not in <c>WAITING_FOR_LOGOFF</c> state, the logoff message will be sent.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogonMessageHandler">
            <summary>
            Logon message handler.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogonMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogonMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
             <summary>
             If session received the valid logon message and the session has
             <c>WAITING_FOR_LOGON</c> state, the handler changed the session state to <c>CONNECTED</c>
             <p/>
             Error occurred if:<para>
             </para>
             1. 108 tag has negative value.<para>
             </para>
             2. 141 tag is set and 34 tag has value not equals to 1.<para>
            
             </para>
             </summary>
             <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.LogonMessageHandler.ExtractAllMessagesAndResend(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,System.Int64,System.Int64)">
            <summary>
            Handle the resend request.
            </summary>
            <param name="resendRequestMessage"> original ResendRequest </param>
            <param name="fixSession">           current FIXSession object </param>
            <param name="beginSeqNum">          start of requested interval </param>
            <param name="endSeqNum">            end of requested interval </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.ResendRequestMessageHandler">
            <summary>
            The Resend request message handler.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.ResendRequestMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.ResendRequestMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.ResendRequestMessageHandler.ExtractAllMessagesAndResend(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,System.Int64,System.Int64)">
            <summary>
            Handle the resend request.
            </summary>
            <param name="resendRequestMessage">  original ResendRequest </param>
            <param name="fixSession"> current FIXSession object </param>
            <param name="beginSeqNum"> start of requested interval </param>
            <param name="endSeqNum"> end of requested interval </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.SequenceResetMessageHandler">
            <summary>
            The sequence reset handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.SequenceResetMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.TestRequestMessageHandler">
            <summary>
            The test request message handler.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.TestRequestMessageHandler.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Sends the heartbeat message response.
            If received message contents the 112 tag, the field will be add to response.
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.IFixMessageListener.OnNewMessage(Epam.FixAntenna.NetCore.Message.FixMessage)"/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.Util.RrMessageCarrierSender.SendGapFill(System.Int64,System.Int64,System.Byte[])">
            <summary>
            Sent gap fill message.
            </summary>
            <param name="newSeqNo"> the new value of NewSeqNo tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.PerType.Util.StorageExtractor.OnMessage(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.AppendIncomingMessageHandler">
            <summary>
            Handler appends message to incoming storage.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.AppendIncomingMessageHandler.HandleMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.AppendIncomingMessageHandler.Session">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.IncrementIncomingMessageHandler">
            <summary>
            Handler increment incoming sequence number.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.IncrementIncomingMessageHandler.HandleMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.LastProcessedSequenceMessageHandler">
            <summary>
            Handler process the sequence numbers of incoming messages.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.LastProcessedSequenceMessageHandler.HandleMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.Post.RestoreSequenceAfterResendRequestHandler.HandleMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.DeliverToCompIdMessageHandler">
            <summary>
            This handler is used for Third Party Message routing.
            Session massages are skipped.
            <p/>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.DeliverToCompIdMessageHandler.ProcessMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.DeliverToCompIdMessageHandler.IsDeliverMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Checks if message has deliver tag.
            </summary>
            <param name="message"> the fix message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.DeliverToCompIdMessageHandler.ProcessDeliverMessage(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Deliver message handler.
            </summary>
            <param name="message"> the deliver message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.DeliverToCompIdMessageHandler.Lookup(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Lookup fix session.
            </summary>
            <param name="senderComId">  the sender name </param>
            <param name="targetCompId"> the target name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.LastProcessedSequenceSyncMessageHandler.ProcessMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.MessageHandler.User.LastProcessedSlowConsumerCheckerMessageHandler.ProcessMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.Reinit(Epam.FixAntenna.NetCore.FixEngine.Session.AbstractFixSession)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SeqResendManager">
            <summary>
            Gets sequence resend manager.
            </summary>
            <value> SequenceResendManager </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.GetExpectedIncomingSeqNumber">
            <summary>
            Gets expected sequence number.
            <para>
            If in the session <see cref="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.LastRrSeqNum"/> attribute is set the seq number takes from it;
            Otherwise if processed seq number is set in the session parameters the expected seq num takes from it;
            Otherwise the seq number takes from incoming seq num.</para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.DecrementIncomingSeqNumber">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SaveProcessedSeqNumberOnShutdown">
            <summary>
            Store the last processed seq number.
            <para>The method work only when last processed and last incoming seq nums are not equals.</para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SaveCurrentProcessedSequence">
            <summary>
            Saves the processed seq ID.
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SaveSessionParameters">
            <summary>
            Save session parameters in file.
            If session attribute <see cref="F:Epam.FixAntenna.NetCore.FixEngine.Session.ExtendedFixSessionAttribute.LastRrSeqNum"/> is set the incoming seq num will be saved;
            And if <c>sessionParameters.GetProcessedIncomingSequenceNumber()</c> is set the last processed seq num will be saved;
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SaveRestoredSequences">
            <summary>
            Restore session parameters file.
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.RestoreSessionParameters">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.LoadStoredParameters">
            <summary>
            Loads sequences from file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.GetRrSequenceFromSession">
            <summary>
            Gets RR sequence from session attribute.
            </summary>
            <returns> RR num or null. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SaveRrSequence(System.Int64)">
            <summary>
            Saves the RR seq.
            </summary>
            <param name="lastRrSeq"> the resend request sequence </param>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.RemoveRrSequenceFromSession(System.Nullable{System.Int64})">
            <summary>
            Remove RR seq from session.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.RemoveRangeOfRrSequence">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.GetStartRangeOfRrSequence">
            <summary>
            Gets start of RR range.
            </summary>
            <returns> start of range or -1 </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.GetEndRangeOfRrSequence">
            <summary>
            Gets end of RR range.
            </summary>
            <returns> end of range or -1 </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.IsSequenceInRange(System.Int64)">
            <summary>
            Returns true if <c>seqNum</c> in range.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.IsRRangeExists">
            <summary>
            Returns true if range exists.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.IsRrSequenceActive">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.UpdateEndOfRrRange(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.UpdateLastRrSequence(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.ResetSequencesOnRequest(System.Int64)">
            <summary>
            Reset sequences in file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.ResetSequencesOnLogon">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.DoAfterMessageProcessActions">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.IncrementProcessedSequence">
            <summary>
            Increment processed sequence.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.GetCountOfSentRequests(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.RequestLostMessages(System.Int64,System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.InitSeqNums(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.SetResetSeqNumFlagIntoOutgoingLogon">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.ConfigureStateBeforeReset">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.IsResetTimeMissed(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.InitLastSeqNumResetTimestampOnNewSession">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.ResetSeqNumForNextConnect">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.ApplyOutSeqnum(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.ApplyInSeqNum(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.IncrementOutSeqNum">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.SendRequestForResend(System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.IsBlockResendSupported(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.RequestLostMessages(System.Int64,System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.IsBufferEmpty">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.PutMessageIntoBuffer(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.TakeMessageFromBuffer">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.IsMessageProcessingFromBufferStarted">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.IsRrRangeActive">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.StandardSessionSequenceManager.AbstractSequenceResendManager.SkipMessagesFromBufferTillSeqNum(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType">
            <summary>
            IQueueable element consists of FixMessage and message type.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithTypeFactory"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType.FixMessage">
            <summary>
            Gets list of fields.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType.ChangesType">
            <summary>
            Gets change type
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType.#ctor">
            <summary>
            Creates <c>FixMessageWithType</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType.SerializeTo(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <summary>
            Serialize instance to byte array.
            </summary>
            <param name="buffer"> byte buffer </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            DeSerialize instance from byte array.
            </summary>
            <param name="bytes">  the array of bytes </param>
            <param name="offset"> the offset in buffer </param>
            <param name="length"> the number of array elements to be read </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithType.IsApplicationLevelMessage">
            <summary>
            Check message type.
            </summary>
            <returns> true if message has application level type </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithTypeFactory">
            <summary>
            FixMessageWithType type factory.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueableFactory`1"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.FixMessageWithTypeFactory.CreateObject">
            <summary>
            Create FixMessageWithType instance.
            </summary>
            <returns> FixMessageWithType
             </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.ReflectStorageFactory">
            <summary>
            Helper class to create storage factory.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.ReflectStorageFactory.CreateStorageFactory(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates storage factory.
            <p/>
            If <see cref="F:Epam.FixAntenna.NetCore.Configuration.Config.StorageFactory"/> is not configured the <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory"/> will be used.
            </summary>
            <param name="configuration"> the configuration </param>
            <returns> StorageFactory  </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildSessionParametersList">
            <summary>
            Build list of SessionParameters using default configuration file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildSessionParametersList(System.String)">
            <summary>
            Build list of SessionParameters using input file name.
            </summary>
            <param name="file"> configuration file </param>
            <returns> list of SessionParameters </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildAcceptorSessionParametersList">
            <summary>
            Build list of acceptor's SessionParameters using default configuration file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildInitiatorSessionParametersList">
            <summary>
            Build list of initiator's SessionParameters using default configuration file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildAcceptorSessionParametersList(System.String)">
            <summary>
            Build list of acceptor's SessionParameters using input file name.
            </summary>
            <param name="file"> configuration file </param>
            <returns> list of SessionParameters </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildInitiatorSessionParametersList(System.String)">
            <summary>
            Build list of acceptor's SessionParameters using input file name.
            </summary>
            <param name="file"> configuration file </param>
            <returns> list of SessionParameters </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildSessionParameters(System.String)">
            <summary>
            Build SessionParameters using default configuration file name and session id.
            </summary>
            <param name="sessionId"> specific session id </param>
            <returns> session parameters </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionParametersBuilder.BuildSessionParameters(System.String,System.String)">
            <summary>
            Build SessionParameters using input file name and session id.
            </summary>
            <param name="file"> configuration file </param>
            <param name="sessionId">   specific session id </param>
            <returns> session parameters </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionStatusCheckerThread">
            <summary>
            Checks the session status after specific timeout, if the session state is
            the same disconnect the session with specific reason.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Util.SessionStatusCheckerThread.#ctor(Epam.FixAntenna.NetCore.FixEngine.Session.IExtendedFixSession,System.Int32,Epam.FixAntenna.NetCore.FixEngine.SessionState,System.String,System.Boolean)">
            <summary>
            Creates the <c>SessionStatusCheckerThread</c>.
            </summary>
            <param name="session">            the monitored session </param>
            <param name="timeout">            the time to wait before close the session </param>
            <param name="state">              the initial session state </param>
            <param name="reason">             the closed reason if session will be closed </param>
            <param name="notifyErrorHandler"> if sets to true the session error handler
                                      will be notify with error level and reason message. </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.SessionValidatorFactory">
            <summary>
            The session validator factory creates the validator for sessions.
            <p/>
            If <c>validation</c> parameter is set to true, the factory loads the <see cref="T:Epam.FixAntenna.NetCore.Validation.ValidationEngine"/> implementation,
            otherwise if error occurred or <c>validation</c> parameter is set to false the
            <see cref="T:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator"/> will be used instead.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.SessionValidatorFactory.GetMessageValidator(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets the <c>IMessageValidator</c> for session.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.SessionValidatorFactory.MessageValidatorImpl.ValidateContent(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.SessionValidatorFactory.MessageValidatorImpl.ContentValidation">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.SessionValidatorFactory.MessageValidatorImpl.Validate(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.SessionValidatorFactory.MessageValidatorImpl.Validate(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Validation.IValidationResult)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.ValidationResultWrapper">
            <summary>
            Wraps the <see cref="T:Epam.FixAntenna.NetCore.Validation.Error.FixErrorContainer"/>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.ValidationResultWrapper.#ctor(Epam.FixAntenna.NetCore.Validation.Error.FixErrorContainer)">
            <summary>
            Creates the <c>ValidationResultWrapper</c>.
            </summary>
            <param name="errorContainer"> the error container </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.ValidationResultWrapper.IsMessageValid">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.ValidationResultWrapper.Errors">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Session.Validation.ValidationResultWrapper.Reset">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory">
            <summary>
            Standard session factory.
            Engine used this factory for creation initiator and acceptor sessions.
            User can replace current behaviour by using <see cref="M:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory.SetFixSessionFactoryStrategy(Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactoryStrategy)"/> method.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory.SetFixSessionFactoryStrategy(Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactoryStrategy)">
            <summary>
            Replace default strategy with own implementation.
            </summary>
            <param name="astrategy"> strategy </param>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.IFixSessionFactoryStrategy"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory.CreateInitiatorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory.CreateAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.StandardFixSessionFactory.CreateAcceptorSession(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.StorageCleanupMode">
            <summary>
            This enum specifies cleaning mode for message storage of sessions.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.StorageCleanupMode.Backup">
            <summary>
            Back up the session storage logs
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.StorageCleanupMode.Delete">
            <summary>
            Delete the session storage logs
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.BackupStorageTimestampFactory.GetStorageTimestamp(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Returns an appropriate StorageTimestamp implementation
            </summary>
            <returns> StorageTimestamp implementation </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.DefaultLogFileLocator">
            <summary>
            The default file locator implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.DefaultLogFileLocator.#ctor(System.String,System.String)">
            <summary>
            Creates the <c>DefaultLogFileLocator</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.DefaultLogFileLocator.GetFileName(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory">
            <summary>
            Provides ability to store messages in the file.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.BackupIncomingLogFileLocator">
            <summary>
            Locator for backup files of incoming storage
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.BackupOutgoingLogFileLocator">
            <summary>
            Locator for backup files of outgoing storage
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.IncomingLogFileLocator">
            <summary>
            Locator for incoming storage file
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.OutgoingLogFileLocator">
            <summary>
            Locator for outgoing storage file
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory._propertyFileLocator">
            <summary>
            Locator for session property file
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.QueueFileLocator">
            <summary>
            Locator for outgoing queue
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.#ctor(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates the <c>FilesystemStorageFactory</c> storage.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.CreateQueue(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets queue for session.
            If parameter <c>inMemoryQueue</c> configured, the queue will be <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1"/>,
            otherwise <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1"/>.
            </summary>
            <param name="sessionParameters"> the parameter for session </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.CreateIncomingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets incoming message storage.
            If parameter <c>incomingStorageIndexed</c> configured, the message storage will be <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage"/>,
            otherwise <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage"/>
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory"> </seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.CreateOutgoingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets outgoing message storage.
            If parameter <c>outgoingStorageIndexed</c> configured, the message storage will be <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage"/>,
            otherwise <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage"/>
            </summary>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.SaveSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <summary>
            Stores session parameters to file.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <param name="state"> session runtime state </param>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory.LoadSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <summary>
            Loads session parameters from file.
            </summary>
            <param name="sessionParameters"> the session parameters</param>
            <param name="state"> session runtime state </param>
            <returns>true if loaded</returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage">
            <summary>
            Abstract file storage implementation.
            The base functionality of this class.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.RetrieveMessages(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.RetrieveMessage(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.Initialize">
            <summary>
            Initialize the storage. <br/>
            <b>This method should be called before file storage is used.
            Storage file and some variable (like <see cref="F:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.FormatLength"/>) are initialized in it.</b>
            </summary>
            <returns> the last sequence number </returns>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.AppendMessage(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.AppendMessage(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.AppendMessage(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.AppendMessage(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends message to storage
            </summary>
            <param name="ticks">the timestamp parameter </param>
            <param name="message"> the array of bytes </param>
            <param name="offset"> </param>
            <param name="length"> </param>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.BackupStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.Close">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.CalculateFormatLength">
            <summary>
            This method is used to calculate <see cref="F:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.FormatLength"/>.
            Override it to change how <see cref="F:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.FormatLength"/> is calculated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.FileName">
            <summary>
            Gets or sets the file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.GetNextSequenceNumber">
            <summary>
            Gets next sequence number.
            </summary>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.BackupStorageFile(System.String,System.String)">
            <summary>
            Backups storage file.
            </summary>
            <param name="fullPathToStorageFile"> the path to file of in/out file </param>
            <param name="fullPathToDestinationBackupFile"> the destination place to backup file </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.DeleteStorageFile(System.String)">
            <summary>
            Deletes storage file.
            </summary>
            <param name="fullPathToStorageFile"> the path to in/out file </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.IsClosed">
            <summary>
            Returns true if storage is closed.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage">
            <summary>
            File message storage implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.#ctor(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates <c>FlatFileMessageStorage</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.OpenStorageFile">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.RetrieveMessagesImplementation(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)">
            <summary>
            The method <c>RetrieveMessages</c> is not supported in this instance.
            </summary>
            <exception cref="T:System.IO.IOException"> Message retrieval is not possible for flat files </exception>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.RetrieveMessages(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.GetNextSequenceNumber">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.AppendMessage(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.AppendMessage(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends message to storage
            </summary>
            <param name="ticks"> the timestamp parameter, in .Net Tick units.</param>
            <param name="message">   the array of bytes </param>
            <param name="offset"> </param>
            <param name="length">  </param>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.FlatFileMessageStorage.RetrieveSequenceNumber(System.String)">
            <summary>
            Retrieves the last sequence number.
            </summary>
            <param name="fileName"> the file name </param>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage">
            <summary>
            Indexed message storage implementation.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.FilesystemStorageFactory"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.CalculateFormatLength">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.RetrieveMessagesImplementation(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)">
            <summary>
            Retrieves message from storage.
            </summary>
            <param name="from">     the start sequence position </param>
            <param name="to">       the end sequence position </param>
            <param name="listener"> the callback listener </param>
            <param name="blocking"> if sets to true the method call not blocking </param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.StorageClosedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.OpenStorageFile">
            <summary>
            Opens the indexed file. </summary>
            <exception cref="T:System.IO.IOException"> if I/O errors occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.Close">
            <summary>
            Close the storage.
            </summary>
            <exception cref="T:System.IO.IOException"> if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.BackupStorageFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.IndexedMessageStorage.DeleteStorageFile(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage">
            <summary>
            <para>WARNING: Can persist message with sequence number is not greater than 178,956,969.</para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.Initialize">
            <summary>
            Opens the indexed file. Make mapped byte buffers
            </summary>
            <returns> last send sequence number </returns>
            <exception cref="T:System.IO.IOException">if I/O errors occurred</exception>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.Initialize"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.CalculateFormatLength">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.AppendMessage(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.AppendMessage(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.RetrieveMessagesImplementation(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)">
            <summary>
            Retrieves message from storage.
            </summary>
            <param name="from">     the start sequence position </param>
            <param name="to">       the end sequence position </param>
            <param name="listener"> the callback listener </param>
            <param name="blocking"> if sets to true the method call not blocking </param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.StorageClosedException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.GetNextSequenceNumber">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.BackupStorageFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.DeleteStorageFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage.Close">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfMessageStorage.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfMessageStorage.Close">
            <inheritdoc />
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedFileMessageStorage.DefaultMaxFileSize">
            <summary>
            The default maximum file size is 100MB.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedFileMessageStorage.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedFileMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedFileMessageStorage.BackupStorageFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedFileMessageStorage.DeleteStorageFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedIndexedMessageStorage.OpenStorageFile">
            <summary>
            Opens the indexed file. </summary>
            <exception cref="T:System.IO.IOException"> if I/O errors occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedIndexedMessageStorage.CalculateFormatLength">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedIndexedMessageStorage.RetrieveMessagesImplementation(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)">
            <summary>
            Retrieves message from storage.
            </summary>
            <param name="from">     the start sequence position </param>
            <param name="to">       the end sequence position </param>
            <param name="listener"> the callback listener </param>
            <param name="blocking"> if sets to true the method call not blocking </param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.StorageClosedException"></exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedIndexedMessageStorage.Close">
            <summary>
            Close the storage.
            </summary>
            <exception cref="T:System.IO.IOException">if I/O error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedIndexedMessageStorage.GetNextSequenceNumber">
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.AbstractFileMessageStorage.GetNextSequenceNumber"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.File.SlicedIndexedMessageStorage.AppendMessageInternal(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.ILogFileLocator">
            <summary>
            Located the full file name.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.ILogFileLocator.GetFileName(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets file name from session parameters.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <returns> the file name for session parameters, the result file name consists of sender and target parameters </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage">
            <summary>
            The common message storage interface.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.Initialize">
            <summary>
            Initialize the storage.
            </summary>
            <returns> the next sequence number </returns>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.AppendMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends message to storage.
            </summary>
            <param name="message"> the message </param>
            <param name="offset">  the initial offset </param>
            <param name="length">  the length </param>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.AppendMessage(System.Byte[])">
            <summary>
            Appends message to storage.
            </summary>
            <param name="message"> the message </param>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.AppendMessage(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends message to storage with the given formatted timestamp.
            </summary>
            <param name="timestampFormatted"> the message timestamp </param>
            <param name="message"> the message </param>
            <param name="offset">  the initial offset </param>
            <param name="length">  the length </param>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.AppendMessage(System.Byte[],System.Byte[])">
            <summary>
            Appends message to storage with the given formatted timestampFormatted.
            </summary>
            <param name="timestampFormatted"> the message timestampFormatted </param>
            <param name="message"> the message </param>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.RetrieveMessage(System.Int64)">
            <summary>
            Retrieves message from storage.
            </summary>
            <param name="seqNumber"> the sequence number of message </param>
            <returns> the retrieved message </returns>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.RetrieveMessages(System.Int64,System.Int64,Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener,System.Boolean)">
            <summary>
            Retrieves message from storage.
            </summary>
            <param name="fromSeqNum"> the from sequence number </param>
            <param name="toSeqNun">   the to sequence number </param>
            <param name="listener">   the callback listener </param>
            <param name="blocking">   if parameter is true, the execution start in current thread context, otherwise in the new thread context. </param>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.Close">
            <summary>
            Close the storage.
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage.BackupStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Backup the storage.
            </summary>
            <param name="sessionParameters"> the session parameters
             </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener">
            <summary>
            Message storage listener.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorage"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IMessageStorageListener.OnMessage(System.Byte[])">
            <summary>
            This method fired when message is retrieved.
            </summary>
            <param name="message"> retrieved message </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.InMemoryStorageFactory">
            <summary>
            In memory storage factory implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.InMemoryStorageFactory.CreateIncomingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.InMemoryStorageFactory.CreateOutgoingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.InMemoryStorageFactory.SaveSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.InMemoryStorageFactory.LoadSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.InMemoryStorageFactory.CreateQueue(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Create and return a InMemoryQueue instance.
            </summary>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory">
            <summary>
            Base storage factory interface. Provides ability to create incoming and outgoing storage.
            To replace the standard implementation, use a <c>storageFactory</c> parameter in properties file.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory.CreateIncomingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Get incoming message storage instance.
            </summary>
            <param name="sessionParameters"> session parameters </param>
            <returns> the incoming message storage </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory.CreateOutgoingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Get outgoing message storage instance.
            </summary>
            <param name="sessionParameters"> session parameters </param>
            <returns> the outgoing message storage </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory.SaveSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <summary>
            Save session parameters.
            </summary>
            <param name="sessionParameters"> session parameters </param>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory.LoadSessionParameters(Epam.FixAntenna.NetCore.FixEngine.SessionParameters,Epam.FixAntenna.NetCore.FixEngine.FixSessionRuntimeState)">
            <summary>
            Save session parameters.
            </summary>
            <param name="sessionParameters"> session parameters </param>
            <returns> true if parameters loaded </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory.CreateQueue(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Get outgoing message queue.
            </summary>
            <param name="sessionParameters"> session parameters </param>
            <returns> the outgoing queue of messages </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.MmfStorageFactory">
            <summary>
            Provides ability to store messages in a file using the memory mapped files technology.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.MmfStorageFactory.CreateIncomingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets incoming message storage.
            If parameter <c>incomingStorageIndexed</c> configured, the message storage will be <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage"/>,
            otherwise <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfMessageStorage"/>
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.MmfStorageFactory.CreateOutgoingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets outgoing message storage.
            If parameter <c>outgoingStorageIndexed</c> configured, the message storage will be <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfIndexedMessageStorage"/>,
            otherwise <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.File.MmfMessageStorage"/>
            </summary>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.MmfStorageFactory.CreateQueue(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets queue for session.
            If parameter <c>inMemoryQueue</c> configured, the queue will be <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1"/>,
            otherwise <see cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1"/>
            </summary>
            <param name="sessionParameters"> the parameter for session </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1">
            <summary>
            Memory queue implementation.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.#ctor">
            <summary>
            Create the memory queue.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Initialize">
            <inheritdoc/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Size">
            <inheritdoc/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.TotalSize">
            <inheritdoc/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.IsAllEmpty">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.AddOutOfTurn(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Poll">
            <inheritdoc/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.OutOfTurnOnlyMode">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.ClearOutOfTurn(System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Commit">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.NotifyAllApplication">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.NotifyAllSession">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.IsShutdown">
            <summary>
            Returns true if queue is shutdown.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.InMemoryQueue`1.IsApplicationCommit">
            <summary>
            Return true if last commit was application.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1">
            <summary>
            IQueue interface.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Initialize">
            <summary>
            Initializes queue. That includes restore of previously
            saved queue content for persistent queues.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Add(`0)">
            <summary>
            Add object to the queue.
            </summary>
            <param name="element"> the element </param>
            <returns> true if element added successfully. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.AddOutOfTurn(`0)">
            <summary>
            Add object to the queue out of turn.
            </summary>
            <param name="element"> the element </param>
            <returns> true if element added successfully. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.ClearOutOfTurn(System.Action{`0})">
            <summary>
            Removes the elements which were added by <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.AddOutOfTurn(`0)"/>. </summary>
            <param name="elementConsumer"> callback for each removed message. It is called after removing next message. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Poll">
            <summary>
            Poll object from the queue (doesn't remove it from queue yet!).
            </summary>
            <returns> the head of this queue, or <tt>null</tt> if this queue is empty </returns>
            <seealso cref="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Commit"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Commit">
            <summary>
            Removes polled object from the queue.
            If nothing was polled - throws IllegalStateException
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.IsEmpty">
            <summary>
            Checks if queue is currently empty.
            </summary>
            <value> true if empty </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Size">
            <summary>
            Returns current queue size.
            </summary>
            <value> queue size </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.TotalSize">
            <summary>
            Returns current total queue size. The total size of the usual queue and the OutOfTurn queue.
            </summary>
            <value> queue size </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.Shutdown">
            <summary>
            Gracefully shutdowns queue.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.OutOfTurnOnlyMode">
            <summary>
            Out of turn messages only mode.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.NotifyAllApplication">
            <summary>
            Notify a new application message exists.
            <para>
            The methods works only if turn "mode on" is off.
            </para>
            </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.OutOfTurnOnlyMode"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.NotifyAllSession">
            <summary>
            Notify a new session message exists.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1.ToArray">
            <summary>
            Return all objects in the queue as array. Method has no impact on poll / commit operations.
            </summary>
            <returns> array of <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable">
            <summary>
            The common queueable interface, supported by <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1"/> .
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueableFactory`1"> </seealso>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueue`1">  </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable.SerializeTo(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <summary>
            The <c>AsByteArray</c> method is responsible for
            write object to buffer of bytes.
            </summary>
            <param name="buffer"> of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            The <c>FromBytes</c> method is responsible for reading object from buffer of bytes.
            </summary>
            <param name="bytes"> buffer of bytes </param>
            <param name="offset"> offset in buffer </param>
            <param name="length"> number of bytes to read
            </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueableFactory`1">
            <summary>
            Base <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable"/> interface.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueableFactory`1.CreateObject">
            <summary>
            Creates new object method.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.Commit">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.AppendEntryToFile(Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable)">
            <summary>
            Appends entry to file.
            <para>
            Methods append entry to file if it is opened.
            </para>
            </summary>
            <returns> false if entry doesn't append to file. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.MmfPersistentInMemoryQueue`1.Restore(System.String)">
            <param name="fileName"> </param>
            <returns> last file position </returns>
            <exception cref="T:System.IO.IOException"> </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1">
            <summary>
            Persistent queue file format is the following: <br/>
            1 byte record length length [n]; <br/>
            n bytes record length [m] <br/>
            m bytes record itself <br/>
            DELETE marker is byte == (byte)0;
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.Commit">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.AppendEntryToFile(Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.IQueueable)">
            <summary>
            Appends entry to file.
            <para>
            Methods append entry to file if it is opened.
            Method truncates the file only if entry is <see cref="F:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.DeleteMarker"/> and size of file gr <c>OneMeg</c>.
            </para>
            </summary>
            <returns> false if entry doesn't append to file. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.QueueableAnonymousInnerClass.SerializeTo(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.Queue.PersistentInMemoryQueue`1.QueueableAnonymousInnerClass.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.SlicedFileStorageFactory.#ctor(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates the <c>SlicedFileStorageFactory</c> storage.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.SlicedFileStorageFactory.CreateIncomingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets incoming message storage.
            If parameter <c>incomingStorageIndexed</c> configured,
            the message storage will be <c>SlicedIndexedMessageStorage</c>,
            otherwise <c>SlicedFileMessageStorage</c>
            </summary>
            <param name="sessionParameters"> the session parameters </param>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Storage.IStorageFactory"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.SlicedFileStorageFactory.CreateOutgoingMessageStorage(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Gets outgoing message storage.
            If parameter <c>outgoingStorageIndexed</c> configured,
            the message storage will be <c>SlicedIndexedMessageStorage</c>,
            otherwise <c>SlicedFileMessageStorage</c>
            </summary>
            <param name="sessionParameters"> the session parameters </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Storage.StorageClosedException">
            <summary>
            Checked exception thrown when an attempt is made to invoke or complete an
            write or read operations with storage that is closed.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.StorageTimestampFactory.GetStorageTimestamp(Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Returns an appropriate StorageTimestamp implementation
            </summary>
            <returns> StorageTimestamp implementation </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Storage.TimestampLogFileLocator.GetFileName(Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport">
            <summary>
            The abstract fix transport implementation,
            provides the base functionality for subclasses.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,Epam.FixAntenna.NetCore.Configuration.Config)">
            <summary>
            Creates the <c>AbstractFIXTransport</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
            <summary>
            Creates the <c>AbstractFIXTransport</c>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.ReadMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.WaitUntilReadyToWrite">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.OptimalBufferSize">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.RemoteHost">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.Close">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.AbstractFixTransport.IsBlockingSocket">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.AcceptorFixTransport">
            <summary>
            Acceptor fix transport implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.AcceptorFixTransport.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,Epam.FixAntenna.NetCore.Configuration.Config)">
             <summary>
            
             </summary>
             <param name="transport"></param>
             <param name="configuration"></param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport">
            <summary>
            TCP socket transport implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.#ctor">
            <summary>
            Creates transport.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.#ctor(System.String,System.Int32)">
            <summary>
            Creates transport.
            </summary>
            <param name="remoteHost"> the transport host </param>
            <param name="remotePort"> the transport port </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.#ctor(System.String,System.Int32,Epam.FixAntenna.NetCore.FixEngine.SessionParameters)">
             <summary>
            
             </summary>
             <param name="remoteHost"></param>
             <param name="remotePort"></param>
             <param name="parameters"></param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates transport.
            </summary>
            <param name="remoteHost">the transport host </param>
            <param name="remotePort">the transpot port </param>
            <param name="enableTcpNoDelay"> enable/disable Nagle sockets algorithm </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.RemoteHost">
            <summary>
            Target host name or IP address.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.RemotePort">
            <summary>
            Target port.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Tcp.TcpTransport.Open">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport">
            <summary>
            UDP transport implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.#ctor(System.String,System.Int32)">
            <summary>
            Creates UDP transport.
            </summary>
            <param name="multicastAddress">the multicast address </param>
            <param name="port">the transport port </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.NetworkInterfaceName">
            <summary>
            Setter for network interface.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.IsBlockingSocket">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.IsSecured">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Open">
            <summary>
            Method opens the transport.
            The implementation create a multicast socket and bind it to a specific port,
            and then joins created socket to multicast group.
            </summary>
            <exception cref="T:System.IO.IOException">if an I/O error occurs</exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Close">
            <summary>
            Closes the transport.
            <p/>
            Leave a multicast group and close socket.
            </summary>
            <exception cref="T:System.IO.IOException">if an I/O error occurs</exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.IsOpen">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Read(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.RemoteEndPoint">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Read(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.Read(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Client.Udp.UdpTransport.WaitUntilReadyToWrite">
            <inheritdoc />
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Transport.ConnectionAuthenticator.ClientOid">
            <summary>
            Indicates that a certificate can be used as a Secure Sockets Layer (SSL) client certificate.
            </summary>
            <remarks>https://oidref.com/1.3.6.1.5.5.7.3.2</remarks>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.FixEngine.Transport.ConnectionAuthenticator.ServerOid">
            <summary>
            Indicates that a certificate can be used as an SSL server certificate.
            </summary>
            <remarks>https://oidref.com/1.3.6.1.5.5.7.3.1</remarks>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ConnectionAuthenticator.ClearCertCache">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper">
            <summary>
            Slices FIX messages from the <c>InputStream</c> or <c>Transport</c> implementations.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Creates <c>FIXMessageChopper</c> with specified message size limit.
            </summary>
            <param name="inputStream">         the input stream to read from. </param>
            <param name="maxMessageSize">      the message size limit. </param>
            <param name="optimalBufferLength"> the optimal length of internal buffer </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.#ctor(System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <c>FIXMessageChopper</c> with specified message size limit.
            </summary>
            <param name="inputStream">         the input stream to read from. </param>
            <param name="maxMessageSize">      the message size limit. </param>
            <param name="optimalBufferLength"> the optimal length of internal buffer </param>
            <param name="validateCheckSum">    do not validate CheckSum(10) if this flag is set to false </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,System.Int32,System.Int32)">
            <summary>
            Creates <c>FIXMessageChopper</c> with specified message size limit.
            </summary>
            <param name="transport">           the transport implementation to read from. </param>
            <param name="maxMessageSize">      the message size limit. </param>
            <param name="optimalBufferLength"> the optimal length of internal buffer </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates <c>FIXMessageChopper</c> with specified message size limit.
            </summary>
            <param name="transport">           the transport implementation to read from. </param>
            <param name="maxMessageSize">      the message size limit. </param>
            <param name="optimalBufferLength"> the optimal length of internal buffer </param>
            <param name="validateCheckSum">    do not validate CheckSum(10) if this flag is set to false </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.RawTags">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.IsMessageGarbled">
            <summary>
            Returns true if last read message is garbled.
            </summary>
            <value> true if last read message is garbled. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.GetBuffer">
            <summary>
            Gets buffer
            </summary>
            <returns> buffer </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.Error">
            <summary>
            Returns error of last read message if message is garbled or null otherwise.
            </summary>
            <value> the instance of error enum. </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ErrorPosition">
            <summary>
            Returns error position of last read message if message is garbled or -1 otherwise.
            </summary>
            <value> the error message string. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Read next message (garbled or non garbled) from
            the <c>InputStream</c> or <c>Transport</c> implementations.
            </summary>
            <returns> the byte representation of FIX message. </returns>
            <exception cref="T:System.IO.IOException"> if some I/O error occurs, or end of file read, or message is too long. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.SetUserParserListener(Epam.FixAntenna.NetCore.FixEngine.Transport.IFixParserListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadAvailableBytesToBuffer">
            <summary>
            Reads array of bytes from transport.
            </summary>
            <returns> true if method reads some byets </returns>
            <exception cref="T:System.IO.IOException"> if transport returns 0 (EOF) </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.IsBlockingSocket">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.IsSecured">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.#ctor(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Read(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Read(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Read(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.WaitUntilReadyToWrite">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.RemoteEndPoint">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Open">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.Close">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.ReadOnlyTransport.IsOpen">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.MessageReadTimeInTicks">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.FixMessageChopper.Reset">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.GarbledMessageError">
            <summary>
            The garbled message error enum.
            Describes errors that occur when parsing messages.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixParserListener">
            <summary>
            This is interface for incoming message listener.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport">
            <summary>
            IFIXTransport interface describe base functionality for transport implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport.ReadMessage(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Read message method.
            </summary>
            <returns> message the message </returns>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport.Write(System.Byte[])">
            <summary>
            Write message method.
            </summary>
            <param name="message"> the message </param>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write message method.
            </summary>
            <param name="message"> the message </param>
            <param name="offset">  the start buffer position </param>
            <param name="length">  the length </param>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport.Close">
            <summary>
            Close transport method.
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport.OptimalBufferSize">
            <summary>
            Gets optimal the size of buffer.
            </summary>
            <value> the buffer size in bytes </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.IFixTransport.RemoteHost">
            <summary>
            Gets remote host.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.IMessageChopper.Error">
            <summary>
            Returns error of last read message if message is garbled or null otherwise.
            </summary>
            <value> the instance of error enum. </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.IMessageChopper.ErrorPosition">
            <summary>
            Returns error position of last read message if message is garbled or -1 otherwise.
            </summary>
            <value> the error message string. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IMessageChopper.SetUserParserListener(Epam.FixAntenna.NetCore.FixEngine.Transport.IFixParserListener)">
            <param name="parserListener"> </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.IMessageChopper.RawTags">
             <summary>
            
             </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.InitiatorFixTransport">
            <summary>
            Initiator fix transport.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.InitiatorFixTransport.#ctor(System.String,System.Int32)">
            <summary>
            Creates <c>InitiatorFIXTransport</c>.
            </summary>
            <param name="host"> the host </param>
            <param name="port"> the port </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.InitiatorFixTransport.Open">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.InitiatorFixTransport.OpenAsync">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.IOutgoingFixTransport">
            <summary>
            Outgoing FIX transport.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IOutgoingFixTransport.Open">
            <summary>
            Open transport method.
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred
             </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.IOutgoingFixTransport.OpenAsync">
            <summary>
            Open transport method. Async version.
            </summary>
            <exception cref="T:System.IO.IOException"> if error occurred
             </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport">
            <summary>
            Common transport interface.
            Provides ability to read and write the messages.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.IsSecured">
            <summary>
            Returns true, if connected through secured connection.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.Write(System.Byte[])">
            <summary>
            Transport dependent write method.
            </summary>
            <param name="message"> actual message </param>
            <exception cref="T:System.IO.IOException"> if unable to write </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transport dependent write method.
            </summary>
            <param name="message"> actual message </param>
            <param name="offset">  the offset in buffer </param>
            <param name="length">  the num of bytes to write </param>
            <exception cref="T:System.IO.IOException"> if unable to write </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transport dependent read method.
            </summary>
            <param name="buffer"> holder for read bytes </param>
            <param name="offset"> in buffer </param>
            <param name="length"> maximum bytes to be read </param>
            <returns> number of byte actually read </returns>
            <exception cref="T:System.IO.IOException"> if unable to read </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.Read(System.Byte[])">
            <summary>
            Transport dependent read method.
            </summary>
            <param name="buffer"> holder for read bytes </param>
            <returns> number of byte actually read </returns>
            <exception cref="T:System.IO.IOException"> if unable to read </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.LocalEndPoint">
            <summary>
            Gets local IPEndPint after the transport connected.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.RemoteEndPoint">
            <summary>
            Gets the remote IPEndPoint after the transport connected.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.Open">
            <summary>
            Open the transport.
            </summary>
            <exception cref="T:System.IO.IOException"> - throws if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.Close">
            <summary>
            Close the transport.
            </summary>
            <exception cref="T:System.IO.IOException"> - throws if error occurred </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport.IsOpen">
            <summary>
            Returns <tt>true</tt> if transport is open.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper">
            <summary>
            Slices and parse FIX messages from the <c>Transport</c> implementations.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <c>NewMessageChopper</c> with specified message size limit.
            </summary>
            <param name="transport">           the transport implementstion to read from. </param>
            <param name="maxMessageSize">      the message size limit. </param>
            <param name="optimalBufferLength"> the optimal length of internal buffer </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.#ctor(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport,System.Int32,System.Int32,System.Boolean,Epam.FixAntenna.NetCore.FixEngine.Transport.IFixParserListener)">
            <summary>
            Creates <c>NewMessageChopper</c> with specified message size limit.
            </summary>
            <param name="transport">           the transport implementstion to read from. </param>
            <param name="maxMessageSize">      the message size limit. </param>
            <param name="optimalBufferLength"> the optimal length of internal buffer </param>
            <param name="parserListener"> </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.RawTags">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.IsMessageGarbled">
            <summary>
            Returns true if last read message is garbled.
            </summary>
            <value> true if last read message is garbled. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.GetBuffer">
            <summary>
            Gets buffer
            </summary>
            <returns> buffer </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.Error">
            <summary>
            Returns error of last read message if message is garbled or null otherwise.
            </summary>
            <value> the instance of error enum. </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.ErrorPosition">
            <summary>
            Returns error position of last read message if message is garbled or -1 otherwise.
            </summary>
            <value> the error message string. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.NewMessageChopper.ReadAvailableBytesToBuffer(Epam.FixAntenna.NetCore.Message.MsgBuf)">
            <summary>
            Reads array of bytes from transport.
            </summary>
            <returns> true if method reads some byets </returns>
            <exception cref="T:System.IO.IOException"> if transport returns -1 (EOF) </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.ParseRequiredTags">
            <summary>
            Contain all required tagId to operate the engine.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.ParseRequiredTags.IsRequired(System.Int32)">
            <summary>
            Do checks: this tag is required to operate the engine. </summary>
            <param name="tag"> for check </param>
            <returns> true if is required </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Firewall.PassthroughConnectionListener.OnConnect(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Firewall.RestrictByIpConnectionListener.OnConnect(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IConnectionListener">
            <summary>
            Connection listener interface.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer"></seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IConnectionListener.OnConnect(Epam.FixAntenna.NetCore.FixEngine.Transport.ITransport)">
            <summary>
            Invoked when a new connection occurred.
            </summary>
            <param name="transport"> the transport </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer">
            <summary>
            The common server interface.
            Provides ability to start and stop operation and listen the incoming connections.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer.SetIncomingConnectionListener(Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IConnectionListener)">
            <summary>
            Sets the connection listener.
            </summary>
            <param name="value"> the connection listener </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer.Start">
            <summary>
            Start the server.
            </summary>
            <exception cref="T:System.IO.IOException"> - if error occurred </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IServer.Stop">
            <summary>
            Stop server.
            </summary>
            <exception cref="T:System.IO.IOException"> - if error occurred </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpAcceptorTransport">
            <summary>
            TCP acceptor transport implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpAcceptorTransport.#ctor(System.Net.Sockets.Socket,Epam.FixAntenna.NetCore.FixEngine.Session.Util.ConfigurationAdapter)">
            <summary>
            Creates the <c>TCPAcceptorTransport</c>.
            </summary>
            <param name="socket">The socket.</param>
            <param name="configAdapter">Configuration adapter.</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpAcceptorTransport.Open">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer">
            <summary>
            TCP server implementation.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.Port">
            <summary>
            Listening port of the server.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.ConnectAddress">
            <summary>
            Represents specific NIC
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.#ctor(System.Int32)">
            <summary>
            Creates server.
            </summary>
            <param name="port">server port</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.#ctor(System.String,System.Int32,Epam.FixAntenna.NetCore.FixEngine.Session.Util.ConfigurationAdapter)">
            <summary>
            Creates server.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="configAdapter"></param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.SetIncomingConnectionListener(Epam.FixAntenna.NetCore.FixEngine.Transport.Server.IConnectionListener)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.Start">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.Server.Tcp.TcpServer.Stop">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketHelper.ShutdownAndClose(System.Net.Sockets.Socket)">
            <summary>
            Disables sends and receives for a socket only under Linux
            </summary>
            <param name="socket">Socket</param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport">
            <summary>
            Abstract socket implementation of transport.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.IsBlockingSocket">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.IsSecured">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Read(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Write(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Read(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Read(Epam.FixAntenna.NetCore.Common.Utils.ByteBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.WaitUntilReadyToWrite">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.RemoteEndPoint">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Close">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.Open">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.FixEngine.Transport.SocketTransport.IsOpen">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.TransportUtils.AsString(System.Net.EndPoint)">
            <summary>
            Returns string representation of <see cref="T:System.Net.EndPoint"/> in format [hostname|IP]:port.
            Correctly handles IPv4 mapped to IPv6 <see cref="T:System.Net.IPAddress"/> in case of <see cref="T:System.Net.IPEndPoint"/>.
            Returns <see cref="P:System.Net.DnsEndPoint.Host"/> property in case of <see cref="T:System.Net.DnsEndPoint"/>.
            </summary>
            <param name="ep">EndPoint</param>
            <returns>String representation of <see cref="P:System.Net.IPEndPoint.Address"/>
            for <see cref="T:System.Net.IPEndPoint"/> or <see cref="P:System.Net.DnsEndPoint.Host"/> for <see cref="T:System.Net.DnsEndPoint"/>.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.TransportUtils.AsString(System.Net.IPAddress)">
            <summary>
            Returns string representation of <see cref="T:System.Net.IPAddress"/>.
            If address is mapped to IPv6 (has form like ::ffff:127.0.0.1) maps it back to IPv4.
            </summary>
            <param name="address">Address</param>
            <returns>String representation of <see cref="T:System.Net.IPAddress"/>.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.FixEngine.Transport.TransportUtils.ToEndPoint(System.String,System.Int32)">
            <summary>
            Parses input string as IP address and returns IPEndPoint if succeed.
            Otherwise, returns DnsEndPoint.
            </summary>
            <param name="address">IP address or host name.</param>
            <param name="port">Port to use in EndPoint ctor.</param>
            <returns>Returns <see cref="T:System.Net.EndPoint"/> initialized with provided address and port.</returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.FixEngine.ValueType">
            <summary>
            FIX value type enum.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.#ctor">
            <summary>
            Creates an empty message that is engine owned
            TBD: protect(hide) the constructor from user access. May bee need to have default constructor for user
            and special - for internal usage
            TBD: make with default modificator - all other should use NewInstanceFromPool
            </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.IsUserOwned"/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.#ctor(System.Boolean)">
            <summary>
            Creates an empty message
            TBD: make with default modificator - all other should use NewInstanceFromPool
            </summary>
            <seealso cref="P:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.IsUserOwned"> </seealso>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.IsUserOwned">
            <summary>
            Controls how the message object ownership is handled after the Send.
            <p/>
            The message objects that are not owned by user
            should not be accessed again after FIXSession.sendMessage() call is made
            <p/>
            Engine will take a copy of the user owned objects when enqueing them before sending.
            <p/>
            The engine owned messages that originate from pool will be freed by
            the engine automatically after the send. But before sendMessage was called,
            this is the user's responsibility to return it back using FixMessage.returnInstance()
            <p/>
            By default the heap allocated objects (new FixMessage()) are engine owned.
            <p/>
            The ownership of objects allocated from pool is explicitely requested in call:
            FixMessage.NewInstanceFromPool(boolean isUserOwned)
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.CalculateBodyLength">
            <summary>
            Calculates body length for collection.
            </summary>
            <returns> body length </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.CalculateChecksum">
            <summary>
            Calculates checksum.
            </summary>
            <returns> checksum </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.ToString">
            <summary>
            Converts collection of fix fields to string.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.ToUnmaskedString">
            <summary>
            Converts collection of fix fields to string, not masking fields 554, 925.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.ToPrintableString">
            <summary>
            Converts collection of FIX fields to string. Some fields (by default 554, 925) masked with asterisks.
            </summary>
            <returns>Returns string, where some fields masked with asterisks.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.ToPrintableString(Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags)">
            <summary>
            Converts collection of FIX fields to string. Some fields (by default 554, 925) masked with asterisks.
            </summary>
            <returns>Returns string, where some fields masked with asterisks.</returns>
            <param name="maskedTags">IMaskedTags instance or null (DefaultMaskedTags will be used).</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.AsByteArray">
            <summary>
            Writes field list to array of bytes.
            </summary>
            <returns> byte origBuffer </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.AsByteArray(Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags)">
            <summary>
            Writes field list to array of bytes.
            </summary>
            <returns> byte origBuffer </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.ToByteArrayAndReturnNextPosition(System.Byte[],System.Int32)">
            <summary>
            Writes the list of field to the <c>origBuffer</c>, and returns the next index.
            The <c>SOH</c> symbol is added after each field.
            </summary>
            <param name="dst">    the origBuffer </param>
            <param name="offset"> the offset in origBuffer </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.Split(System.Int32)">
            <summary>
            Utility method that splits current message into the repeating
            groups based on first mandatory tag in the repeating
            group (always first tag in the repeating group).
            </summary>
            <param name="tag"> the tag number </param>
            <returns> List of repeating groups (each one is separate <see cref="T:Epam.FixAntenna.NetCore.Message.FixMessage"/>) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.AbstractFixMessage.RemoveTag(System.Int32)">
            <summary>
            Removes a fix field with specified tag from collection.
            The methods removes the first occurrence of the specified tag.
            </summary>
            <param name="tag"> the fix tag. </param>
            <returns> <tt>true</tt> if the element was removed. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsBytes(System.Int32,System.Byte[],System.Int32)">
            <param name="tag"> </param>
            <param name="dest"> </param>
            <param name="offset"> </param>
            <returns> value length </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.FieldNotFoundException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsReusableString(Epam.FixAntenna.NetCore.Message.ReusableString,System.Int32)">
            <summary>
            Sets the value in provided ReusableString. The method can be used for obtaining string values without creating a new object (to avoid garbage). </summary>
            <param name="tagId"> number of tag for which the value will be obtained. </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.FieldNotFoundException"> if there is no value for specified tag. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsReusableString(Epam.FixAntenna.NetCore.Message.ReusableString,System.Int32,System.Int32)">
            <summary>
            Sets the value in provided ReusableString. The method can be used for obtaining string values without creating a new object (to avoid garbage). </summary>
            <param name="tagId"> number of tag for which the value will be obtained. </param>
            <param name="occurrence"> value occurrence of specified tag. Numeration starts with 1. </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.FieldNotFoundException"> if there is no value for specified tag. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsString(System.Int32)">
            <summary>
            Gets string value.
            </summary>
            <param name="tagId"> the tag id </param>
            <returns> string value if tag exist, otherwise null </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.getTagValueAsTimeOnly(System.Int32)">
            <summary>
            Parse the value of time (HH:MM:SS or HH:MM:SS.sss)
            </summary>
            <param name="tag"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.getTagValueAsTimeOnly(System.Int32,System.Int32)">
            <summary>
            Parse the value of time (HH:MM:SS or HH:MM:SS[.sss])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.getTagValueAsTimeOnlyAtIndex(System.Int32)">
            <summary>
            Parse the value of time (HH:MM:SS or HH:MM:SS[.sss])
            </summary>
            <param name="index"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsTimestamp(System.Int32)">
            <summary>
            Parse the value of timestamp (YYYYMMDD-HH:MM:SS or YYYYMMDD-HH:MM:SS.sss)
            </summary>
            <param name="tag"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsTimestamp(System.Int32,System.Int32)">
            <summary>
            Parse the value of timestamp (YYYYMMDD-HH:MM:SS or YYYYMMDD-HH:MM:SS.sss)
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsTimestampAtIndex(System.Int32)">
            <summary>
            Parse the value of timestamp (YYYYMMDD-HH:MM:SS or YYYYMMDD-HH:MM:SS.sss)
            </summary>
            <param name="index"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.getTagValueAsTZTimeOnly(System.Int32)">
            <summary>
            Parse the value of TZTimeOnly (HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tag"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.getTagValueAsTZTimeOnly(System.Int32,System.Int32)">
            <summary>
            Parse the value of TZTimeOnly (HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.getTagValueAsTZTimeOnlyAtIndex(System.Int32)">
            <summary>
            Parse the value of TZTimeOnly (HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="index"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsTzTimestamp(System.Int32)">
            <summary>
            Parse the value of TZTimestamp (YYYYMMDD-HH:MM:SS[.sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tag"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsTzTimestamp(System.Int32,System.Int32)">
            <summary>
            Parse the value of TZTimestamp (YYYYMMDD-HH:MM:SS[.sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.GetTagValueAsTzTimestampAtIndex(System.Int32)">
            <summary>
            Parse the value of TZTimestamp (YYYYMMDD-HH:MM:SS[.sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="index"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.MsgType">
            <summary>
            Gets message type.
            </summary>
            <value> message type or null if tag 35 not exists. </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.MsgVersion">
            <summary>
            Gets message fix version.
            </summary>
            <value> FIXVersion if 9 tg exists </value>
            <exception cref="T:System.ArgumentException"> if version is invalid. </exception>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.ExtendedIndexedStorage.MsgSeqNumber">
            <summary>
            Gets message sequence number.
            </summary>
            <value> sequence number if field exist and -1 if doesn't. </value>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.FieldIndex._index">
            <summary>
            Each blocks in index array consists from 4 ints:
            1 - tag id
            2 - offset of value
            3 - length of value
            4 - bit set of flags:
            1 - value in original buffer
            2 - value in arena storage
            3 - value in per_field storage
            4 - FLAG_MAX_AVAIL_INPLACE (TODO: add description)
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.FieldIndex.Hashtbl">
            <summary>
            Each block of hashtbl array consists from 2 ints:
            1 - tag id
            2 - position in index array
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FieldIndex.IsNeedToEnlarge(System.Int32)">
            <param name="requiredSize"> </param>
            <returns> ratio for enlarging </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.FixMessage">
            <summary>
            The FIX message.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.FixMessageAdapter.Item(System.Int32)">
            <summary>
            Gets or sets <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> field.
            </summary>
            <param name="index">Index of the field.</param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageAdapter.AddAll(System.Collections.Generic.ICollection{Epam.FixAntenna.NetCore.Message.TagValue})">
            <summary>
            Use addAllTags() instead of this
            </summary>
            <param name="c">
            @return </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageAdapter.GetTag(System.Int32)">
            <summary>
            Gets <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> field by provided TagId value.
            </summary>
            <remarks>Seems to be main method to get field.</remarks>
            <param name="tagId"></param>
            <returns>Returns <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> with specified TagId or null, if TagId was not found.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageAdapter.GetByTagId(System.Int32)">
            <summary>
            Gets <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> field by provided TagId value.
            </summary>
            <remarks>Seems to be main method to get field.</remarks>
            <param name="tagId"></param>
            <returns>Returns <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> with specified TagId or null, if TagId was not found.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageAdapter.SplitAsList(System.Int32)">
            <summary>
            Utility method that splits current message into the repeating
            groups based on first mandatory tag in the repeating
            group (always first tag in the repeating group).
            </summary>
            <param name="tag"> the tag number </param>
            <returns> List of repeating groups (each one is separate FixMessage) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageAdapter.ExtractGroup(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Parse repeating group in FIX message
            </summary>
            <param name="rgTag">      Group amount tag </param>
            <param name="rgFirstTag"> The first tag. Tag just after size tag. </param>
            <param name="tagList">    List of expected tags </param>
            <returns> Repeating group </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.FixMessageUtil">
            <summary>
            FixMessage helper class.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsMessageType(Epam.FixAntenna.NetCore.Message.FixMessage,System.Byte[])">
            <summary>
            Checks the message type.
            </summary>
            <param name="message"> the message </param>
            <param name="msgType"> the message type </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsTagValueEquals(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Byte[])">
            <summary>
            Checks is tag exist and value equals.
            </summary>
            <param name="message"> the message </param>
            <param name="tag">     the tag id </param>
            <param name="value">   the tag value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsTagValueEquals(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.String)">
            <summary>
            Checks is tag exist and value equals.
            </summary>
            <param name="message"> the message </param>
            <param name="tag">     the tag id </param>
            <param name="value">   the tag value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsEqualIgnoreOrder(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Compares two message, the order of tag is ignored.
            </summary>
            <param name="message1"> the message </param>
            <param name="message2"> the message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsTagValueEquals(Epam.FixAntenna.NetCore.Message.TagValue,System.String)">
            <summary>
            Compare Field's raw value to passed String constant.
            </summary>
            <param name="field"> the field </param>
            <param name="value"> the String constant </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsPosDup(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true if message has the 43 tag.
            </summary>
            <param name="message"> the message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsGapFill(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true if message has the 123 tag and value is equals 'Y'.
            </summary>
            <param name="message"> the message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsLogon(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Checks if message type is login.
            </summary>
            <param name="message"> FIX message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsLogout(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Checks if message type is logout.
            </summary>
            <param name="message"> FIX message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsSeqReset(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Checks if message type is logout.
            </summary>
            <param name="message"> FIX message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsIgnorableMsg(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Methods checks if message has 4 or A type.
            </summary>
            <param name="message"> the message </param>
            <returns> true if it is </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixMessageUtil.IsResetLogon(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true if message is logon and has 34=1 and 141=Y
            </summary>
            <param name="message"> the message </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.FixTypes">
            <summary>
            FIX Types helper class.
            Provides ability for parsing values from buffer of bytes.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseFloat(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Parses the float value from <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/>.
            </summary>
            <param name="tag"></param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseFloat(System.Byte[])">
            <summary>
            Parses the float value from bytes.
            </summary>
            <param name="value"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseFloat(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Garbage-free method for converting string to double
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatDouble(System.Double)">
            <summary>
            Formats the <c>double</c> value.
            </summary>
            <param name="value"> the value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidFloat(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns false, if <c>tag</c> contains the invalid float value.
            </summary>
            <param name="tag"><see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidFloat(System.Byte[])">
            <summary>
            Returns false, if <c>buffer</c> contains the invalid float value.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidFloat(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid float value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseBoolean(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>boolean</c> value from subarray.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseBoolean(System.Byte[])">
            <summary>
            Parses the <c>boolean</c> value from bytes.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatBoolean(System.Boolean)">
            <summary>
            Formats the boolean <c>value</c>.
            </summary>
            <param name="value"> the value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidBoolean(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>boolean</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidBoolean(System.Byte[])">
            <summary>
            Returns true, if <c>buffer</c> contains the invalid <c>boolean</c> value.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidBoolean(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if <c>tag</c> contains the invalid <c>boolean</c> value.
            </summary>
            <param name="tag"><see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTimestamp(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>Timestamp</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTzTimestamp(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if TagValue contains the invalid <c>TZTimestamp</c> value.
            </summary>
            <param name="tag"> TagValue tag. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTzTimestamp(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>TZTimestamp</c> value.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTzTimestamp(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>TZTimestamp</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS[.sss][sss][sss]][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.isInvalidTimeOnly(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if <c>tag</c> contains the invalid <c>TimeOnly</c> value.
            <p/>
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss][sss][sss]
            </summary>
            <param name="tag"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.isInvalidTimeOnly(System.Byte[])">
            <summary>
            Returns true, if <c>buffer</c> contains the invalid <c>TimeOnly</c> value.
            <p/>
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss][sss][sss]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.isInvalidTimeOnly(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>TimeOnly</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.isInvalidTZTimeOnly(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if subarray contains the invalid <c>TZTimeOnly</c> value.
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="tag"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.isInvalidTZTimeOnly(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>TZTimeOnly</c> value.
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.isInvalidTZTimeOnly(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>TZTimeOnly</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidDate(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if subarray contains the invalid <c>Date</c> value.
            <p/>
            The format for <c>Date</c> is yyyymmdd.
            </summary>
            <param name="tag"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidDate(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>Date</c> value.
            <p/>
            The format for <c>Date</c> is yyyymmdd.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidDate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>Date</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>Date</c> is yyyymmdd.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidMonthYear(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if <c>tag</c> contains the invalid <c>MonthYear</c> value.
            </summary>
            <p/>
            The format for <c>MonthYear</c> is YYYYMM.
            <param name="tag"><see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidMonthYear(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>MonthYear</c> value.
            <p/>
            The format for <c>MonthYear</c> is YYYYMM.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidMonthYear(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>MonthYear</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>MonthYear</c> is YYYYMM.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidMonthYear44(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if TagValue contains the invalid <c>MonthYear44</c> value.
            </summary>
            <param name="tag"></param>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidMonthYear44(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>MonthYear44</c> value.
            <p/>
            The format for <c>MonthYear</c> are YYYYMM,YYYYMMDD and YYYYMMWW.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidMonthYear44(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>MonthYear44</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>MonthYear</c> are YYYYMM,YYYYMMDD and YYYYMMWW.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseMonthYear44(System.Byte[])">
            <summary>
            Parses the <c>MonthYear44</c> value from <c>buffer</c>.
            <p/>
            The format for <c>MonthYear44</c> are YYYYMM, YYYYMMDD and YYYYMMWW.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseMonthYear44(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>MonthYear44</c> value from <c>buffer</c>.
            <p/>
            The format for <c>MonthYear44</c> are YYYYMM, YYYYMMDD and YYYYMMWW.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatMonthYear44(System.DateTime)">
            <summary>
            Formats the <c>MonthYear44</c> value from <c>calendar</c>.
            <p/>
            The format for <c>MonthYear44</c> are YYYYMM, YYYYMMDD and YYYYMMWW.
            </summary>
            <param name="calendar"> the calendar </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTime(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if subarray contains the invalid <c>Time</c> value.
            <p/>
            The format for <c>Time</c> is YYYYMMDD-HH:MM:SS.
            </summary>
            <param name="tag"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTime(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>Time</c> value.
            <p/>
            The format for <c>Time</c> is YYYYMMDD-HH:MM:SS.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidTime(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true, if subarray contains the invalid <c>Time</c> value.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            <p/>
            The format for <c>Time</c> is YYYYMMDD-HH:MM:SS.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseTimestamp40(System.Byte[])">
            <summary>
            Parses the <c>Timestamp40</c> value from <c>buffer</c>.
            <p/>
            The format for <c>Timestamp40</c> is YYYYMMDD-HH:MM:SS
            </summary>
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseTimestamp(System.Byte[])">
            <summary>
            Parses the <c>Timestamp</c> value from <c>buffer</c> to <c>calendar</c>.
            <p/>
            The format for <c>Timestamp</c> is YYYYMMDD-HH:MM:SS[.sss]
            </summary>
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseTimestamp(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>Timestamp</c> value from <c>buffer</c> to <c>calendar</c>.
            <p/>
            The format for <c>Timestamp</c> is YYYYMMDD-HH:MM:SS[.sss]
            </summary>
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.parseTimeOnly(System.Byte[])">
            <summary>
            Parses the <c>TimeOnly</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss]
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.parseTimeOnly(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>TimeOnly</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss]
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.parseTZTimeOnly(System.Byte[])">
            <summary>
            Parses the <c>TZTimeOnly</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]]
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseTzTimestamp(System.Byte[])">
            <summary>
            Parses the <c>TZTimestamp</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>TZTimeOnly</c> is YYYYMMDD-HH:MM[:SS][Z | [ + | - hh[:mm]]].
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseTzTimestamp(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>TZTimestamp</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS][Z | [ + | - hh[:mm]]].
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseDate(System.Byte[])">
            <summary>
            Parses the <c>Date</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>Date</c> is YYYYMMDD.
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseDate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>Date</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>Date</c> is YYYYMMDD.
            <param name="buffer"> the buffer of bytes</param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseLocalMktDate(System.Byte[])">
            <summary>
            Parses the <c>LocalMktDate</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>LocalMktDate</c> is YYYYMMDD.
            <param name="buffer"> the buffer of bytes  </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseMonthYear(System.Byte[])">
            <summary>
            Parses the <c>MonthYear</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>MonthYear</c> is YYYYMM.
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseMonthYear(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>MonthYear</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>MonthYear</c> is YYYYMM.
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseTime(System.Byte[])">
            <summary>
            Parses the <c>Time</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>Time</c> is YYYYMMDD-HH:MM:SS.
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseShortTime(System.Byte[])">
            <summary>
            Parses the <c>Time</c> value from <c>buffer</c>.
            </summary>
            <p/>
            The format for <c>Time</c> is HH:MM:SS.
            <param name="buffer">   the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUtcTimestamp40(System.DateTime)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>UTCTimestamp40</c> format.
            <p/>
            The format for <c>UTCTimestamp40</c> is YYYYMMDD-HH:MM:SS.
            </summary>
            <param name="calendar"> the value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUtcTimestamp(System.DateTime,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>UTCTimestamp</c> format.
            <p/>
            The format for <c>UTCTimestamp</c> is YYYYMMDD-HH:MM:SS[.sss].
            </summary>
            <param name="calendar">the value</param>
            <param name="precision">precision for formatting: <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Second"/> or <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Milli"/></param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUtcTimestampWithMs(System.DateTime,System.Byte[])">
            <summary>
            Format UTC timestamp with include milliseconds
            </summary>
            <param name="calendar">         timestamp </param>
            <param name="sendingTimeBufMs"> buffer size must be 21 </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUtcTimestampWithoutMs(System.DateTime,System.Byte[])">
            <summary>
            Format UTC timestamp with include milliseconds
            </summary>
            <param name="calendar">           timestamp </param>
            <param name="sendingTimeBufNoMs"> buffer size must be 17 </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.formatUTCTimeOnly(System.DateTime,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>UTCTimeOnly</c> format.
            <p/>
            The format for <c>UTCTimeOnly</c> is HH:MM:SS[.sss].
            </summary>
            <param name="calendar">the value</param>
            <param name="precision">precision for formatting: <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Second"/> or <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Milli"/></param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.formatTZTimeOnly(System.DateTimeOffset)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>TZTimeOnly</c> format.
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="calendar"> the value </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatTzTimestamp(System.DateTimeOffset,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>TZTimestamp</c> format.
            <p/>
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS[.sss]][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="calendar">the calendar</param>
            <param name="precision">precision for formatting:
            <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Second"/>, <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Milli"/> or <see cref="F:Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision.Second"/></param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatDate(System.DateTime)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>Date</c> format.
            <p/>
            The format for <c>Date</c> is YYYYMMDD.
            </summary>
            <param name="calendar"> the calendar </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUtcDate(System.DateTime)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>UTCDate</c> format.
            <p/>
            The format for <c>UTCDate</c> is YYYYMMDD.
            </summary>
            <param name="calendar"> the calendar </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatLocalMktDate(System.DateTime)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>LocalMktDate</c> format.
            <p/>
            The format for <c>LocalMktDate</c> is YYYYMMDD.
            </summary>
            <param name="calendar"> the calendar </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatMonthYear(System.DateTime)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>MonthYear</c> format.
            <p/>
            The format for <c>MonthYear</c> is YYYYMM.
            </summary>
            <param name="calendar"> the calendar </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatTime(System.DateTime)">
            <summary>
            Formats the value of <c>calendar</c> to the <c>Time</c> format.
            <p/>
            The format for <c>Time</c> is YYYYMMDD-HH:MM:SS.
            </summary>
            <param name="calendar"> the calendar </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseInt(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Parses the <c>integer</c> value from <c>tag</c>.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseInt(System.Byte[])">
            <summary>
            Parses the <c>integer</c> value from <c>buffer</c>.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.TryParseLong(System.Byte[],System.Int32,System.Int32,System.Int64@)">
            <summary>
            Try to parse the <c>long</c> value from <c>buffer</c>.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <param name="value"> parsed value if parsing succeeded or 0L</param>
            <returns>True, if parsing was sucessful.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>integer</c> value from <c>buffer</c>.
            <p/>
            The <c>offset</c> argument is the
            index of the first byte of the subarray and the <c>count</c>
            argument specifies the length of the subarray.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.ParseInt(System.String,System.Int32,System.Int32)">
            <summary>
            Parses the <c>integer</c> value from <c>str</c>.
            <p/>
            The <c>offset</c> argument is the
            index of the first char of the substring and the <c>count</c>
            argument specifies the length of the substring.
            </summary>
            <param name="str">    a string representation of an integer. </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatInt(System.Int64)">
            <summary>
            Formats the integer value.
            </summary>
            <param name="value"> the value </param>
            <returns> the buffer </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatIntLength(System.Int64,System.Int32)">
            <summary>
            Calculates length (number of bytes) required to store provided value.
            </summary>
            <param name="value">Value to calculate length.</param>
            <param name="minLen">Minimum length of the value, optional.</param>
            <returns>Returns length (number of bytes) required to store provided value considering minimal length.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.GetSeqNumLength(System.Int64,System.Int32)">
            <summary>
            Calculates length of the SeqNum field for provided value and minimal length.
            </summary>
            <param name="value">Value to calculate length.</param>
            <param name="minLen">Minimal length of the field, optional.</param>
            <returns>Returns length (number of bytes) required to store provided value considering minimal length.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatUInt(System.Int64)">
            <summary>
            Formats the integer value.
            </summary>
            <param name="value"> the value </param>
            <returns> the buffer </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidInt(System.Byte[])">
            <summary>
            Returns true, if subarray contains the invalid <c>integer</c> value.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidInt(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Returns true, if <see cref="T:Epam.FixAntenna.NetCore.Message.TagValue"/> contains the invalid <c>integer</c> value.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.IsInvalidInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Check if buffer has invalid integer number
            </summary>
            <param name="buf"> buffer </param>
            <param name="off"> buffer offset </param>
            <param name="len"> buffer length </param>
            <returns> true if invalid </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.FixTypes.FormatCheckSum(System.Int32)">
            <summary>
            Formats the check sum.
            </summary>
            <param name="checkSum"> the check sum </param>
            <returns> formated string </returns>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.LocalMktDate">
            <summary>
            Date of Local Market (vs. UTC) in YYYYMMDD format.<br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.MonthYearShort">
            <summary>
            Char field representing month of a year in YYYYMM format.<br/>
            Valid values: YYYY = 0000-9999, MM = 01-12.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.MonthYearWithDate">
            <summary>
            String field representing month of a year in YYYYMMDD format.<br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.MonthYearWithWeek">
            <summary>
            String field representing month of a year in YYYYMMWW format.<br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, WW = w1, w2, w3, w4, w5.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.Date40">
            <summary>
            Date in YYYYMMDD format. <br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.Time40">
            <summary>
            Time/date combination in YYYYMMDD-HH:MM:SS format, colons and dash required. <br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-59.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.UtcDate">
            <summary>
            Date represented in UTC (Universal Time Coordinated, also known as "GMT") in YYYYMMDD format. <br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.UtcDateOnly">
            <summary>
            Date represented in UTC (Universal Time Coordinated, also known as "GMT") in YYYYMMDD format. This
            special-purpose field is paired with UTCTimeOnly to form a proper UTCTimestamp for bandwidth-sensitive
            messages.<br/>
            Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.UtcTimeOnlyShort">
            <summary>
            Time-only represented in UTC (Universal Time Coordinated, also known as "GMT") in HH:MM:SS (whole seconds)
            format, colons, and period required. <br/>
            Valid values: HH = 00-23, MM = 00-59, SS = 00-5960 (60 only if UTC
            leap second) (without milliseconds).
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.UtcTimeOnlyWithMillis">
            <summary>
            Time-only represented in UTC (Universal Time Coordinated, also known as "GMT") in HH:MM:SS.sss (milliseconds)
            format, colons, and period required. <br/>
            Valid values: HH = 00-23, MM = 00-59, SS = 00-5960 (60 only if UTC leap
            second), sss=000-999 (indicating milliseconds).
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.UtcTimestampShort">
            <summary>
            Time/date combination represented in UTC (Universal Time Coordinated, also known as "GMT")
            in YYYYMMDD-HH:MM:SS (whole seconds) format, colons, dash, and period required. Valid values:
            YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-5960 (60 only if UTC leap second)
            (without milliseconds). <br/>
            Leap Seconds: Note that UTC includes corrections for leap seconds, which are
            inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the
            International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31
            or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion,
            but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read
            "19981231-23:59:59", "19981231-23:59:60", "19990101-00:00:00".
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.UtcTimestampWithMillis">
            <summary>
            Time/date combination represented in UTC (Universal Time Coordinated, also known as "GMT") in
            YYYYMMDD-HH:MM:SS.sss (milliseconds) format, colons, dash, and period required. Valid values:
            YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-5960 (60 only if UTC leap second),
            sss=000-999 (indicating milliseconds). Leap Seconds: Note that UTC includes corrections for leap seconds,
            which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared
            by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of
            Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second
            insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may
            read "19981231-23:59:59", "19981231-23:59:60", "19990101-00:00:00".
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.TzTimeOnlyShort">
            <summary>
            The time represented based on ISO 8601. This is the time with a UTC offset to allow identification of local
            time and timezone of that time. Format is HH:MM[Z | [ + | - hh[:mm]]] where HH = 00-23 hours,
            MM = 00-59 minutes, hh = 01-12 offset hours, mm = 00-59 offset minutes. <br/>
            Example: 07:39Z is 07:39 UTC <br/>
            Example: 02:39-05 is five hours behind UTC, thus Eastern Time <br/>
            Example: 15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time <br/>
            Example: 13:09+05:30 is 5.5 hours ahead of UTC, India time
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.TzTimeOnlySec">
            <summary>
            The time represented based on ISO 8601. This is the time with a UTC offset to allow identification of local
            time and timezone of that time. Format is HH:MM:SS[Z | [ + | - hh[:mm]]] where HH = 00-23 hours,
            MM = 00-59 minutes, SS = 00-59 seconds, sss = milliseconds, hh = 01-12 offset hours, mm = 00-59 offset
            minutes. <br/>
            Example: 07:39Z is 07:39 UTC <br/>
            Example: 02:39-05 is five hours behind UTC, thus Eastern Time <br/>
            Example: 15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time <br/>
            Example: 13:09+05:30 is 5.5 hours ahead of UTC, India time
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.TzTimeOnlyMillis">
            <summary>
            The time represented based on ISO 8601. This is the time with a UTC offset to allow identification of local
            time and timezone of that time. Format is HH:MM:SS.sss[Z | [ + | - hh[:mm]]] where HH = 00-23 hours,
            MM = 00-59 minutes, SS = 00-59 seconds, hh = 01-12 offset hours, mm = 00-59 offset minutes. <br/>
            Example: 07:39Z is 07:39 UTC <br/>
            Example: 02:39-05 is five hours behind UTC, thus Eastern Time <br/>
            Example: 15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time <br/>
            Example: 13:09+05:30 is 5.5 hours ahead of UTC, India time
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.TzTimestamp">
            <summary>
            The time/date combination representing local time with an offset to UTC to allow identification of local
            time and timezone offset of that time. The representation is based on ISO 8601. Format is
            YYYYMMDD-HH:MM:SS[Z | [ + | - hh[:mm]]] where YYYY = 0000 to 9999, MM = 01-12, DD = 01-31,
            HH = 00-23 hours, MM = 00-59 minutes, SS = 00-59 seconds, hh = 01-12 offset hours, mm = 00-59 offset minutes <br/>
            Example: 20060901-07:39Z is 07:39 UTC on 1st of September 2006 <br/>
            Example: 20060901-02:39-05 is five hours behind UTC, thus Eastern Time on 1st of September 2006 <br/>
            Example: 20060901-15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time on 1st of September 2006 <br/>
            Example: 20060901-13:09+05:30 is 5.5 hours ahead of UTC, India time on 1st of September 2006
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType.TzTimestampMillis">
            <summary>
            The time/date combination representing local time with an offset to UTC to allow identification of local
            time and timezone offset of that time. The representation is based on ISO 8601. Format is
            YYYYMMDD-HH:MM:SS.sss[Z | [ + | - hh[:mm]]] where YYYY = 0000 to 9999, MM = 01-12, DD = 01-31,
            HH = 00-23 hours, MM = 00-59 minutes, SS = 00-59 seconds, sss = milliseconds, hh = 01-12 offset hours,
            mm = 00-59 offset minutes <br/>
            Example: 20060901-07:39Z is 07:39 UTC on 1st of September 2006 <br/>
            Example: 20060901-02:39-05 is five hours behind UTC, thus Eastern Time on 1st of September 2006 <br/>
            Example: 20060901-15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time on 1st of September 2006 <br/>
            Example: 20060901-13:09+05:30 is 5.5 hours ahead of UTC, India time on 1st of September 2006
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.LocalMktDateFormatter">
            <summary>
            Date of Local Market (vs. UTC) in YYYYMMDD format. Valid values: YYYY = 0000-9999, MM = 01-12, DD = 01-31.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.TzTimeFormatter">
            <summary>
            HH:MM[Z | [ + | - hh[:mm]]]
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.TzTimeMillisFormatter">
            <summary>
            HH:MM:SS.sss[Z | [ + | - hh[:mm]]]
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.TzTimeSecondsFormatter">
            <summary>
            HH:MM:SS[Z | [ + | - hh[:mm]]]
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.TzTimestampFormatter">
            <summary>
            YYYYMMDD-HH:MM:SS[Z | [ + | - hh[:mm]]]
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.UtcDateFormatter">
            <summary>
            Formatter for date with pattern YYYYMMDD
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Format.UtcTimeOnlyFormatter">
            <summary>
            HH:MM:SS
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException">
            <summary>
            Thrown when an exceptional message condition has occurred. For
            example, No SOH symbol at the end of message throws an
            instance of this class.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters">
             <summary>
             Helper class for FIX date and time formats.
            
             Provides ability for formatting different types of date/time values
             to the buffer of bytes. It is also possible to work with high precision
             values: micro- and nanoseconds.
            
             </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.formatTimeOnly(System.Byte[],System.DateTime,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>time</c> to the <c>UTCTimeOnly</c> format.
            <p/>
            The format for <c>UTCTimeOnly</c> is HH:MM:SS[.sss][sss][sss].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>UTCTimeOnly</c> format </param>
            <param name="time">        the given time value </param>
            <param name="precision">   the desired time precision
            </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.formatTimeOnly(System.Byte[],System.DateTime,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision,System.Int32)">
            <summary>
            Formats the value of <c>time</c> to the <c>UTCTimeOnly</c> format.
            <p/>
            The format for <c>UTCTimeOnly</c> is HH:MM:SS[.sss][sss][sss].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>UTCTimeOnly</c> format </param>
            <param name="time">        the given time value </param>
            <param name="precision">   the desired time precision </param>
            <param name="offset">      the offset
            </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.formatTZTimeOnly(System.Byte[],System.DateTimeOffset,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>time</c> to the <c>TZTimeOnly</c> format.
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>TZTimeOnly</c> format </param>
            <param name="time">        the given time value </param>
            <param name="precision">   the desired time precision </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.formatTZTimeOnly(System.Byte[],System.DateTimeOffset,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision,System.Int32)">
            <summary>
            Formats the value of <c>time</c> to the <c>TZTimeOnly</c> format.
            <p/>
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>TZTimeOnly</c> format </param>
            <param name="time">        the given time value </param>
            <param name="precision">   the desired time precision </param>
            <param name="offset">      the offset </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.FormatTimestamp(System.Byte[],System.DateTime,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>dateTime</c> to <c>Timestamp</c> format.
            <p/>
            The format of <c>Timestamp</c> is YYYYMMDD-HH:MM:SS[.sss][sss][sss].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>Timestamp</c> format </param>
            <param name="dateTime">    the given date time value </param>
            <param name="precision">   the desired timestamp precision
            </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.FormatTimestamp(System.Byte[],System.DateTime,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision,System.Int32)">
            <summary>
            Formats the value of <c>dateTime</c> to <c>Timestamp</c> format.
            <p/>
            The format of <c>Timestamp</c> is YYYYMMDD-HH:MM:SS[.sss][sss][sss].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>Timestamp</c> format </param>
            <param name="dateTime">    the given date time value </param>
            <param name="precision">   the desired timestamp precision </param>
            <param name="offset">      the offset
            </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.FormatTzTimestamp(System.Byte[],System.DateTimeOffset,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>dateTime</c> to the <c>TZTimestamp</c>} format.
            <p/>
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>TZTimestamp</c> format </param>
            <param name="dateTime">    the given date time value </param>
            <param name="precision">   the desired timestamp precision </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.FormatTzTimestamp(System.Byte[],System.DateTimeOffset,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision,System.Int32)">
            <summary>
            Formats the value of <c>dateTime</c> to the <c>TZTimestamp</c> format.
            <p/>
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]].
            </summary>
            <param name="buffer">      the buffer of bytes to keep the <c>TZTimestamp</c> format </param>
            <param name="dateTime">    the given date time value </param>
            <param name="precision">   the desired timestamp precision </param>
            <param name="offset">      the offset  </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeFormatters.FormatStorageTimestamp(System.Byte[],System.Int32,System.DateTimeOffset,Epam.FixAntenna.NetCore.Common.Utils.TimestampPrecision)">
            <summary>
            Formats the value of <c>dateTime</c> to Storage Timestamp format.
            <p/>
            The format of Storage Timestamp is "YYYYMMDD HH:MM:SS.sss[sss][sss] - ".
            </summary>
            <param name="buffer"> the buffer of bytes to keep the Storage Timestamp format </param>
            <param name="offset"> the offset </param>
            <param name="dateTime"> the given date time value </param>
            <param name="precision"> the desired timestamp precision
            </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers">
             <summary>
             Helper class for FIX date and time formats.
             <para>
             Provides ability for parsing different types of date/time values
             from the buffer of bytes. It is also possible to work with high precision
             values: micro- and nanoseconds.
            
             </para>
             </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.parseTimeOnly(System.Byte[])">
            <summary>
            Parses the <c>TimeOnly</c> value from <c>buffer</c>.
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss][sss][sss]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <returns> the local time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.parseTimeOnly(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>TimeOnly</c> value from <c>buffer</c>.
            The format for <c>TimeOnly</c> is HH:MM:SS[.sss][sss][sss]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <returns> the local time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.parseTZTimeOnly(System.Byte[])">
            <summary>
            Parses the <c>TZTimeOnly</c> value from <c>buffer</c>.
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <returns> the offset time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.parseTZTimeOnly(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>TZTimeOnly</c> value from <c>buffer</c>.
            The format for <c>TZTimeOnly</c> is HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <returns> the offset time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.ParseTimestamp(System.Byte[])">
            <summary>
            Parses the <c>Timestamp</c> value from <c>buffer</c> to <c>dateTime</c>.
            The format for <c>Timestamp</c> is YYYYMMDD-HH:MM:SS[.sss][sss][sss].
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <returns> the local date time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.ParseTimestamp(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>Timestamp</c> value from <c>buffer</c> to <c>dateTime</c>.
            The format for <c>Timestamp</c> is YYYYMMDD-HH:MM:SS[.sss][sss][sss].
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <returns> the local date time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.ParseTzTimestamp(System.Byte[])">
            <summary>
            Parses the <c>TZTimestamp</c> value from <c>buffer</c>.
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <returns> the offset time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HighPrecisionDateTimeParsers.ParseTzTimestamp(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the <c>TZTimestamp</c> value from <c>buffer</c>.
            The format for <c>TZTimestamp</c> is YYYYMMDD-HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]]
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the initial offset </param>
            <param name="count">  the length </param>
            <returns> the offset time structured from the given buffer
            <p/>
            In contrast to <c>Calendar</c> supports nanoseconds precision. </returns>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.getTagValueAsTimeOnly(System.Int32)">
            <summary>
            Parse the value of time (HH:MM:SS or HH:MM:SS[.sss][sss][sss])
            </summary>
            <param name="tag"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.getTagValueAsTimeOnly(System.Int32,System.Int32)">
            <summary>
            Parse the value of time (HH:MM:SS or HH:MM:SS[.sss][sss][sss])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.getTagValueAsTimeOnlyAtIndex(System.Int32)">
            <summary>
            Parse the value of time (HH:MM:SS or HH:MM:SS[.sss][sss][sss])
            </summary>
            <param name="index"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.getTagValueAsTZTimeOnly(System.Int32)">
            <summary>
            Parse the value of TZTimeOnly (HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tag"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.getTagValueAsTZTimeOnly(System.Int32,System.Int32)">
            <summary>
            Parse the value of TZTimeOnly (HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.getTagValueAsTZTimeOnlyAtIndex(System.Int32)">
            <summary>
            Parse the value of TZTimeOnly (HH:MM[:SS][.sss][sss][sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="index"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.GetTagValueAsTimestamp(System.Int32)">
            <summary>
            Parse the value of timestamp (YYYYMMDD-HH:MM:SS.sss[sss][sss])
            </summary>
            <param name="tag"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.GetTagValueAsTimestamp(System.Int32,System.Int32)">
            <summary>
            Parse the value of timestamp (YYYYMMDD-HH:MM:SS.sss[sss][sss])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.GetTagValueAsTimestampAtIndex(System.Int32)">
            <summary>
            Parse the value of timestamp (YYYYMMDD-HH:MM:SS.sss[sss][sss])
            </summary>
            <param name="index"></param>
            <returns>Time with UTC kind</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.GetTagValueAsTzTimestamp(System.Int32)">
            <summary>
            Parse the value of TZTimestamp (YYYYMMDD-HH:MM:SS[.sss][sss][sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tag"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.GetTagValueAsTzTimestamp(System.Int32,System.Int32)">
            <summary>
            Parse the value of TZTimestamp (YYYYMMDD-HH:MM:SS[.sss][sss][sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="tagId"></param>
            <param name="occurrence"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.HpExtendedIndexedStorage.GetTagValueAsTzTimestampAtIndex(System.Int32)">
            <summary>
            Parse the value of TZTimestamp (YYYYMMDD-HH:MM:SS[.sss][sss][sss][Z | [ + | - hh[:mm]]])
            </summary>
            <param name="index"></param>
            <returns>Time with offset</returns>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.IndexedStorage._arenaStorage">
            <summary>
            internal independent storage. Used for new values or for making instance standalone
            </summary>
            <seealso cref="F:Epam.FixAntenna.NetCore.Message.IndexedStorage._origBuffer"></seealso>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.IndexedStorage._origBuffer">
            <summary>
            link to the original buffer which is external for messages.
            </summary>
            <seealso cref="F:Epam.FixAntenna.NetCore.Message.IndexedStorage._arenaStorage"> </seealso>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.IndexedStorage._continuousBuffer">
            <summary>
            Indicate that yet not allocated new space for tag and all values in original place
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.SetPaddedLongTag(System.Int32,System.Int64,System.Int32,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Add or update tag with padded long value.
            </summary>
            <param name="tag">Tag ID to process.</param>
            <param name="value">Tag value.</param>
            <param name="padding">Tag value padding.</param>
            <param name="addIfNotExists"><see cref="T:Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling"/> - defines what to do if the tag is not present in the message.</param>
            <returns>Returns index of the processed tag, or -1 if tag not found and <paramref name="addIdNotExist"/> is <see cref="F:Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling.DontAddIfNotExists"/></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.RemoveTag(System.Int32)">
            <summary>
            Removes a fix field with specified tag from collection.
            The methods removes the first occurrence of the specified tag.
            </summary>
            <param name="tag"> the fix tag. </param>
            <returns> <c>true</c> if the element was removed. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetRepeatingGroup(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Fills passed repeating group instance by data from storage. If group doesn't exist, throws exception. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <param name="group"> repeating group object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetRepeatingGroup(System.Int32)">
            <summary>
            Returns repeating group from storage by leading tag. If group doesn't exist, returns null. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetOrAddRepeatingGroup(System.Int32)">
            <summary>
            Returns repeating group from storage by leading tag. If group doesn't exist, add group at end of message. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetOrAddRepeatingGroup(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Fills passed repeating group instance by data from storage. If group doesn't exist, add group at end of of message </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <param name="group"> repeating group object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetOrAddRepeatingGroupAtIndex(System.Int32,System.Int32)">
            <summary>
            Returns repeating group from storage by leading tag. If group doesn't exist, add group at passed index in message. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetOrAddRepeatingGroupAtIndex(System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Returns repeating group from storage by leading tag. If group doesn't exist, add group at passed index in message. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetRepeatingGroupAtIndex(System.Int32)">
            <summary>
            Returns repeating group, founded by index of leading tag </summary>
            <param name="index"> index of repeating group's leading tag at message </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.GetRepeatingGroupAtIndex(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Fills passed repeating group instance by data, founded by index of leading tag </summary>
            <param name="index"> leading tag for repeating group </param>
            <param name="group"> repeating group object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.IsRepeatingGroupExists(System.Int32)">
            <summary>
            Checks is message contains not nested group with passed leading tag.
            Note that empty groups, that doesn't appear in the message, also considered existing </summary>
            <param name="leadingTag"> leading tag for check </param>
            <returns> true if repeating group exists. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.RemoveRepeatingGroup(System.Int32)">
            <summary>
            Removes repeating group with specified leading tag </summary>
            <param name="leadingTag"> leading tag of group </param>
            <returns> true if there is group with specified leading tag </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.RemoveRepeatingGroupAtIndex(System.Int32)">
            <summary>
            Removes repeating group with leading tag at specified index </summary>
            <param name="index"> of repeating group's leading tag </param>
            <returns> true if there is group with specified leading tag </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.InvalidateRepeatingGroupIndex">
            <summary>
            Returns all inner arrays, RepeatingGroup and Entry back to pool.
            It returns only those RepeatingGroup and Entry, that have been got implicitly from addRepeatingGroup/getRepeatingGroup.
            If you got RepeatingGroup or Entry explicit from RepeatingGroupPool, you should take care of call release.
            Also this method implicitly calls in <see cref="M:Epam.FixAntenna.NetCore.Message.FixMessage.ReleaseInstance"/>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroup(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Adds group without validation at the end of message. Trailer is ignored. </summary>
            <param name="leadingTag"> leading tag for new group </param>
            <param name="group"> repeating group object for further work with group </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroup(System.Int32)">
            <summary>
            Adds group without validation at the end of message. Trailer is ignored.
            Repeating </summary>
            <param name="leadingTag"> leading tag for new group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroup(System.Int32,System.Boolean)">
            <summary>
            Adds group at the end of message. Trailer is ignored. </summary>
            <param name="leadingTag"> leading tag for new group </param>
            <param name="validation"> turn on/off validation </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroup(System.Int32,System.Boolean,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Adds group without validation at the end of message. Trailer is ignored. </summary>
            <param name="leadingTag"> leading tag for new group </param>
            <param name="group"> repeating group object for further work with group </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroupAtIndex(System.Int32,System.Int32,System.Boolean,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Adds group at specific place at message </summary>
            <param name="index"> index in FIX message. Leading tag will be inserted at this index and all other group tags will follow. </param>
            <param name="leadingTag"> leading tag for new group </param>
            <param name="validation"> turn on/off validation </param>
            <param name="group"> repeating group object for further work with group </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroupAtIndex(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds group at specific place at message </summary>
            <param name="index"> index in FIX message. Leading tag will be inserted at this index and all other group tags will follow. </param>
            <param name="leadingTag"> leading tag for new group </param>
            <param name="validation"> turn on/off validation </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroupAtIndex(System.Int32,System.Int32)">
            <summary>
            Adds group at specific place at message </summary>
            <param name="index"> index in FIX message. Leading tag will be inserted at this index and all other group tags will follow. </param>
            <param name="leadingTag"> leading tag for new group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.AddRepeatingGroupAtIndex(System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Adds group at specific place at message </summary>
            <param name="index"> index in FIX message. Leading tag will be inserted at this index and all other group tags will follow. </param>
            <param name="leadingTag"> leading tag for new group </param>
            <param name="group"> repeating group object for further work with group </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.CopyRepeatingGroup(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Copy repeating group at end of message </summary>
            <param name="source"> repeating group for copy </param>
            <returns> copied repeating group </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.CopyRepeatingGroup(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup,System.Int32)">
            <summary>
            Copy repeating group at specified index of message </summary>
            <param name="source"> repeating group for copy </param>
            <param name="index"> index at which the source entry is to be copied </param>
            <returns> copied repeating group </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.CopyRepeatingGroup(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Copy repeating group at end of message </summary>
            <param name="source"> repeating group for copy </param>
            <param name="dest"> entry for hold copied repeating group </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.CopyRepeatingGroup(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup,System.Int32)">
            <summary>
            Copy repeating group at specified index of message </summary>
            <param name="source"> repeating group for copy </param>
            <param name="dest"> entry for hold copied repeating group </param>
            <param name="index"> index at which the source entry is to be copied </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.IndexedStorage.FindOrPrepareToAdd(System.Int32,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <param name="tag"> </param>
            <param name="addIfNotExists"> </param>
            <returns> index of tag </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.InvalidMessageException">
            <summary>
            Thrown when an invalid message detected. For
            example, sequence is to low or senderCompId is differ than expected.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.MsgBuf.#ctor(System.Byte[])">
            <summary>
            debugging purposes only
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetChecksum(System.Byte[])">
            <summary>
            Calculates checksum in array of bytes.
            </summary>
            <param name="bytes"> array of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates checksum in array of bytes.
            </summary>
            <param name="bytes">  the array of bytes </param>
            <param name="offset"> the offset in array of  bytes </param>
            <param name="length"> the length of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetChecksum(System.Byte[][],System.Int32,System.Int32)">
            <summary>
            Calculates checksum in matrix of bytes.
            </summary>
            <param name="bytes">  the array of bytes </param>
            <param name="offset"> the offset in array of  bytes </param>
            <param name="length"> the length of bytes </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetRawValue(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the value from buffer as bytes.
            </summary>
            <param name="buffer">          the buffer of bytes </param>
            <param name="offset">          the offset in buffer </param>
            <param name="length">          the buffer length </param>
            <param name="tag">             the tag id </param>
            <param name="searchFromStart"> search from start or end of the given buffer </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetAllRawValues(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the value from buffer as bytes.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the offset in buffer </param>
            <param name="length"> the buffer length </param>
            <param name="tag">    the tag id </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetLongValue(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the value from buffer as long.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the offset in buffer </param>
            <param name="length"> the buffer length </param>
            <param name="tag">    the tag id </param>
            <exception cref="T:System.ArgumentException"> if tag not exists </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetLongValue(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the value from buffer as long.
            </summary>
            <param name="buffer"> the buffer of bytes </param>
            <param name="offset"> the offset in buffer </param>
            <param name="length"> the buffer length </param>
            <param name="tag">    the tag id </param>
            <param name="searchFromStart">    search from the start or end buffer </param>
            <exception cref="T:System.ArgumentException"> if tag not exists </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetSequenceNumber(System.Byte[])">
            <summary>
            Gets sequence number.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <exception cref="T:System.ArgumentException"> if tag not exists </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetSequenceNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets sequence number.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <param name="offset">  the offset in buffer </param>
            <param name="length">  the buffer length </param>
            <exception cref="T:System.ArgumentException"> if tag not exists </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IndexRepeatingGroup(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Creates index by dictionary for repeating group.
            After calling this method, its possible to use Repeating Group API
            Version and type of message will be got from message
            Validation is turn off </summary>
            <param name="msg"> message for indexing </param>
            <returns> the passed message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IndexRepeatingGroup(Epam.FixAntenna.NetCore.Message.FixMessage,System.Boolean)">
            <summary>
            Creates index by dictionary for repeating group.
            After calling this method, its possible to use Repeating Group API
            Version and type of message will be got from message </summary>
            <param name="msg"> message for indexing </param>
            <param name="validation"> turn on/off validation </param>
            <returns> the passed message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IndexRepeatingGroup(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Common.FixVersion,System.String)">
            <summary>
            Creates index by dictionary for repeating group.
            After calling this method, its possible to use Repeating Group API
            Validation is turn off </summary>
            <param name="msg"> message for indexing </param>
            <param name="version"> version for passed message. Used for choose dictionary for indexing message </param>
            <param name="msgType"> type of passed message. Used for indexing message. </param>
            <returns> the passed message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IndexRepeatingGroup(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Common.FixVersion,System.String,System.Boolean)">
            <summary>
            Creates index by dictionary for repeating group.
            After calling this method, its possible to use Repeating Group API </summary>
            <param name="msg"> message for indexing </param>
            <param name="version"> version for passed message. Used for choose dictionary for indexing message </param>
            <param name="msgType"> type of passed message. Used for indexing message. </param>
            <param name="validation"> turn on/off validation </param>
            <returns> the passed message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetFixMessage(System.Byte[])">
            <summary>
            Parses fix message from array of bytes.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException"> if message is garbled </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetFixMessageUntilTagsExists(System.Byte[])">
            <summary>
            Parses fix message from array of bytes.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException"> if message is garbled </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetFixMessage(System.Byte[],System.Int32[])">
            <summary>
            Parses fix message from array of bytes.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <param name="rawTags"> the raw tags </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException"> if message is garbled </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetFixMessage(System.Byte[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Parses fix message from array of bytes.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <param name="rawTags"> the raw tags </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException"> if message is garbled </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetFixMessage(System.Byte[],System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.RawFixUtil.IRawTags,System.Boolean,System.Boolean)">
            <summary>
            Parses fix message from array of bytes.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <param name="rawTags"> the raw tags </param>
            <returns> instance of parsed message </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException"> if message is garbled </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetFixMessageUntilTagsExists(System.Byte[],System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.RawFixUtil.IRawTags)">
            <summary>
            Parses fix message from array of bytes.
            </summary>
            <param name="message"> the buffer of bytes </param>
            <param name="rawTags"> the raw tags </param>
            <returns> instance of parsed message </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.GarbledMessageException"> if message is garbled </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetMessageType(System.Byte[])">
            <summary>
            Gets the message type.
            If type is unknown return empty array.
            </summary>
            <param name="bytes"> the message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.GetMessageType(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the message type.
            If type is unknown return empty array.
            </summary>
            <param name="bytes"> the message </param>
            <param name="offset">the offset in buffer </param>
            <param name="length">the buffer length </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsSessionLevelMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the message session level type.
            </summary>
            <param name="message"> the fix message </param>
            <returns> true if message is level session message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsSessionLevelMessage(System.Byte[])">
            <summary>
            Checks the message session level type.
            </summary>
            <param name="message"> the fix message </param>
            <returns> true if message is level session message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsSessionLevelType(System.String)">
            <summary>
            Checks the message session level type.
            </summary>
            <param name="msgType"> the message type </param>
            <returns> true if message is level session message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsSessionLevelType(System.Byte[])">
            <summary>
            Checks the message session level type.
            </summary>
            <param name="msgType"> the fix message </param>
            <returns> true if message is level session message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsLogon(System.String)">
            <summary>
            Checks if message type is Logon.
            </summary>
            <param name="msgType"> the message type, parameter must be not null </param>
            <returns> true if is </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsLogon(System.Byte[])">
            <summary>
            Checks if message type is Logon.
            </summary>
            <param name="msgType"> the message type, parameter must be not null </param>
            <returns> true if is </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IsLogon(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Checks if message type is Logon.
            </summary>
            <param name="fixMessage"> fix field list, parameter must be not null </param>
            <returns> true if is </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.CreateRawTags(System.Int32[])">
            <summary>
            Creates RawTags from array of int.
            </summary>
            <param name="rawTags"> </param>
            <returns> RawTags </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.CreateRawTags(System.String)">
            <summary>
            Creates RawTags from string. The raw tags should be separate by ',' , ' ' or '.'.
            </summary>
            <param name="rawTags"> </param>
            <returns> RawTags </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.RawFixUtil.IRawTags.IsWithinRawTags(System.Int32)">
            <summary>
            Checks if tag exist in array of tags.
            </summary>
            <param name="tag"> the tag id </param>
            <returns> true if exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddRepeatingGroup(System.Int32)">
            <summary>
            Adds sub group to entry. Validation for this group is turned off. </summary>
            <param name="leadingTag"> leading tag for repeating group. </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddRepeatingGroup(System.Int32,System.Boolean)">
            <summary>
            Adds sub group to entry. </summary>
            <param name="leadingTag"> leading tag for repeating group. </param>
            <param name="validation"> turn on/off validation </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddRepeatingGroup(System.Int32,System.Boolean,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Adds sub group to entry. </summary>
            <param name="leadingTag"> leading tag for repeating group. </param>
            <param name="validation"> turn on/off validation. </param>
            <param name="subGroup"> group for further work. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Adds tagValue to entry. </summary>
            <param name="tagValue"> value for add. </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.Byte[])">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.Char)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.Boolean)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> </param>
            <param name="value"> byte array for add </param>
            <param name="offset"> offset in passed array </param>
            <param name="length"> length of array that will be added </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.Double,System.Int32)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <param name="precision"> precision of value rounding </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.Int64)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddTag(System.Int32,System.String)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.AddCalendarTag(System.Int32,System.DateTimeOffset,Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType)">
            <summary>
            Adds tag to entry. </summary>
            <param name="tag"> tag for add </param>
            <param name="value"> value for add </param>
            <param name="type"> type of date </param>
            <returns> index in message (not in group or entry) in which value was added </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(Epam.FixAntenna.NetCore.Message.TagValue,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tagValue </summary>
            <param name="tagValue"> tagValue for update </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(System.Int32,System.Byte[],System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="value"> new value for tag </param>
            <param name="offset"> offset in passed array </param>
            <param name="length"> length of array that will be added </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(System.Int32,System.Byte[],Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="value"> new value for tag </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(System.Int32,System.Int64,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="value"> new value for tag </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(System.Int32,System.Double,System.Int32,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="value"> new value for tag </param>
            <param name="precision"> precision of value rounding </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(System.Int32,System.String,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="strBuffer"> new value for tag </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateValue(System.Int32,System.Boolean,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="value"> new value for tag </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.UpdateCalendarValue(System.Int32,System.DateTimeOffset,Epam.FixAntenna.NetCore.Message.Format.FixDateFormatterFactory.FixDateType,Epam.FixAntenna.NetCore.Message.IndexedStorage.MissingTagHandling)">
            <summary>
            Updates tag value </summary>
            <param name="tag"> tag for update </param>
            <param name="value"> new value for tag </param>
            <param name="type"> type of date </param>
            <param name="addIfNotExists"> determines the behavior in case if tag is not exists </param>
            <returns> index of updated value in fix message (not in group or entry) </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.IsTagExists(System.Int32)">
            <summary>
            Returns true if tag exists in entry </summary>
            <param name="tag"> tag for check </param>
            <returns> is tag exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.LoadTagValue(System.Int32,Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Fills passed TagValue object by tag data </summary>
            <param name="tag"> tag for find </param>
            <param name="dest"> object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsString(System.Int32)">
            <summary>
            Returns tag value as string </summary>
            <param name="tag"> tag for find </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsBytes(System.Int32)">
            <summary>
            Returns tag value as byte array </summary>
            <param name="tag"> tag for find </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Returns tag value as byte array </summary>
            <param name="tag"> tag for find </param>
            <param name="dest"> array for fill </param>
            <param name="offset"> start index in passed array from which array will filled </param>
            <returns> length of wrote data </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsByte(System.Int32)">
            <summary>
            Returns first byte of tag value </summary>
            <param name="tag"> tag for find </param>
            <returns> first byte of tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsByte(System.Int32,System.Int32)">
            <summary>
            Returns byte of tag value at offset </summary>
            <param name="tag"> tag for find </param>
            <returns> byte of tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsBool(System.Int32)">
            <summary>
            Returns tag value as boolean </summary>
            <param name="tag"> tag for find </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsDouble(System.Int32)">
            <summary>
            Returns tag value as double </summary>
            <param name="tag"> tag for find </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsLong(System.Int32)">
            <summary>
            Returns tag value as long </summary>
            <param name="tag"> tag for find </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsStringBuff(System.Int32,System.Text.StringBuilder)">
            <summary>
            Fills passed StringBuffer by tag value </summary>
            <param name="tag"> tag for find </param>
            <param name="str"> buffer for filled </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.LoadTagValueByIndex(System.Int32,Epam.FixAntenna.NetCore.Message.TagValue)">
            <summary>
            Fills passed TagValue object by tag data from index </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <param name="dest"> object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsStringAtIndex(System.Int32)">
            <summary>
            Returns tag value as string </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsBytesAtIndex(System.Int32)">
            <summary>
            Returns tag value as byte array </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsBytesAtIndex(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Returns tag value as byte array </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <param name="dest"> array for fill </param>
            <param name="offset"> start index in passed array from which array will filled </param>
            <returns> length of wrote data </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsByteAtIndex(System.Int32)">
            <summary>
            Returns first byte of tag value </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> first byte of tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsByteAtIndex(System.Int32,System.Int32)">
            <summary>
            Returns byte of tag value at offset </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> byte of tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsBoolAtIndex(System.Int32)">
            <summary>
            Returns tag value as boolean </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsDoubleAtIndex(System.Int32)">
            <summary>
            Returns tag value as double </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsLongAtIndex(System.Int32)">
            <summary>
            Returns tag value as long </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> tag value </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetTagValueAsStringBuffAtIndex(System.Int32,System.Text.StringBuilder)">
            <summary>
            Fills passed StringBuffer by tag value </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <param name="str"> buffer for filled </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetRepeatingGroupAtIndex(System.Int32)">
            <summary>
            Returns repeating group </summary>
            <param name="index"> number of leading tag of group in entry (not in entire FIX message) </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetRepeatingGroupAtIndex(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Fills repeating group by repeating group data </summary>
            <param name="index"> number of leading tag of group in entry (not in entire FIX message) </param>
            <param name="group"> repeating group object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.RemoveTag(System.Int32)">
            <summary>
            Removes tag from entry </summary>
            <param name="tag"> tag for remove </param>
            <returns> is tag was removes </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.RemoveTagAtIndex(System.Int32)">
            <summary>
            Removes tag from entry by index </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> is tag was removes </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.RemoveRepeatingGroup(System.Int32)">
            <summary>
            Removes repeating group from entry </summary>
            <param name="leadingTag"> leading tag of repeating group </param>
            <returns> true if repeating group was deleted </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.RemoveRepeatingGroupAtIndex(System.Int32)">
            <summary>
            Removes repeating group from entry </summary>
            <param name="index"> index of leading tag group in entry (not in entire FIX message) </param>
            <returns> true if repeating group was deleted </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetOrAddRepeatingGroup(System.Int32)">
            <summary>
            Returns repeating group from entry by leading tag. If group doesn't exist, it will be added. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetOrAddRepeatingGroup(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Fills passed repeating group instance by data from entry. If group doesn't exist, it will be added. </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <param name="group"> repeating group object for fill </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.IsRepeatingGroupExists(System.Int32)">
            <summary>
            Checks is entry contains nested group with passed leading tag.
            Note that empty groups, that doesn't appear in the message, also considered existing </summary>
            <param name="leadingTag"> leading tag for check </param>
            <returns> true if repeating group with passed leading tag exists. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.IsGroupTag(System.Int32)">
            <summary>
            Checks whether tag is leading tag of group </summary>
            <param name="tag"> tag for check </param>
            <returns> true if tag is leading tag of group, false if tag doesn't exists or is not leading tag of group </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.IsGroupTagAtIndex(System.Int32)">
            <summary>
            Checks whether tag is group tag at index </summary>
            <param name="index"> number of tag in entry (not in entire FIX message) </param>
            <returns> true if tag is group tag </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetRepeatingGroup(System.Int32)">
            <summary>
            Returns repeating group from entry by leading tag </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <returns> instance of RepeatingGroup from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetRepeatingGroup(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Fills passed repeating group instance by data from entry </summary>
            <param name="leadingTag"> leading tag for repeating group </param>
            <param name="group"> repeating group object for fill </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.Count">
            <summary>
            Returns number of added tag in entry.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetGroup">
            <summary>
            Returns group which owns entry </summary>
            <returns> group which owns entry </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.GetEntryIndex">
            <summary>
            Returns entry index in FIX message </summary>
            <returns> entry index in FIX message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.CopyRepeatingGroup(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Copy repeating group to entry </summary>
            <param name="source"> repeating group for copy </param>
            <returns> copied repeating group </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.EntryImpl.CopyRepeatingGroup(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup)">
            <summary>
            Copy repeating group to entry </summary>
            <param name="source"> repeating group for copy </param>
            <param name="dst"> entry for hold copied repeating group </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup">
            <summary>
            Class for work with repeating group data.
            All repeating group data are stored at IndexedStorage, instances of this class is only view for repeating group data.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns iterator by entries of repeating group </summary>
            <returns> iterator </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.GetEnumerator">
            <summary>
            Returns iterator by entries of repeating group </summary>
            <returns> iterator </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.RemoveEntry(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry)">
            <summary>
            Removes passed entry from group </summary>
            <param name="entry"> entry for remove </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.RemoveEntryAndClean(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry)">
            <summary>
            Removes passed entry from group and clean message - remove group instance if it is empty </summary>
            <param name="entry"> entry for remove </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Validation">
            <summary>
            Turn on/off validation </summary>
            <value> validation </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Release">
            <summary>
            Returns group to pool if group was got by <see cref="!:RepeatingGroupPool.GetRepeatingGroup"/>.
            If group was got by calling <c>RepeatingGroup AddRepeatingGroup()</c> method or <c>RepeatingGroup GetRepeatingGroup()</c>, then it does nothing.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.AddEntry">
            <summary>
            Adds entry to the end of group </summary>
            <returns> instance of Entry from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.AddEntry(System.Int32)">
            <summary>
            Adds entry to the specific index at group. </summary>
            <param name="index"> number of entry in group. In other words, if adds first entry, then index equals to 0, if adds second entry, then index equals to 1 and so on. </param>
            <returns> instance of Entry from RepeatingGroupPool. There is no need to call release for this object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.AddEntry(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry)">
            <summary>
            Adds passed entry to the specific index at group.
            </summary>
            <param name="index"> number of entry in group. In other words, if adds first entry, then index equals to 0, if adds second entry, then index equals to 1 and so on. </param>
            <param name="entry"> entry for add </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Remove">
            <summary>
            Removes current group
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.RemoveEntry(System.Int32)">
            <summary>
            Removes passed entry from the specific index. </summary>
            <param name="index"> number of entry in group. In other words, if adds first entry, then index equals to 0, if adds second entry, then index equals to 1 and so on. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.RemoveEntryAndClean(System.Int32)">
            <summary>
            Removes passed entry from the specific index. </summary>
            <param name="index"> number of entry in group. In other words, if adds first entry, then index equals to 0, if adds second entry, then index equals to 1 and so on. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.GetLeadingTagValue">
            <summary>
            Returns value of group's leading tag. </summary>
            <returns> value of group's leading tag </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Count">
            <summary>
            Returns number of entries in group. </summary>
            <value> number of entries in group </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.GetEntry(System.Int32,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry)">
            <summary>
            Fills passed entry instance by entry data. </summary>
            <param name="index"> number of entry in group. In other words, if adds first entry, then index equals to 0, if adds second entry, then index equals to 1 and so on. </param>
            <param name="entry"> entry for fill. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.GetEntry(System.Int32)">
            <summary>
            Returns entry from specific instance. </summary>
            <param name="index"> number of entry in group. In other words, if adds first entry, then index equals to 0, if adds second entry, then index equals to 1 and so on. </param>
            <returns> instance of Entry from RepeatingGroupPool, filled by entry data. There is no need to call release for this object. </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.LeadingTag">
            <summary>
            Returns group's leading tag </summary>
            <value> leading tag of group </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.CopyEntry(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry)">
            <summary>
            Copy entry to end of repeating group </summary>
            <param name="src"> entry for copy </param>
            <returns> copied entry </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.CopyEntry(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry,System.Int32)">
            <summary>
            Copy entry at specified index of repeating group </summary>
            <param name="src"> entry for copy </param>
            <param name="index"> index at which the source entry is to be copied </param>
            <returns> copied entry </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.CopyEntry(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry)">
            <summary>
            Copy entry to end of repeating group </summary>
            <param name="src"> entry for copy </param>
            <param name="dst"> entry for hold copied entry </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.CopyEntry(Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry,Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry,System.Int32)">
            <summary>
            Copy entry at specified index of repeating group </summary>
            <param name="src"> entry for copy </param>
            <param name="dst"> entry for hold copied entry </param>
            <param name="index"> index at which the source entry is to be copied </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry">
            <summary>
            Class for work with entry data.
            All entry data are stored at IndexedStorage, instances of this class is only view for entry data.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry.Remove">
            <summary>
            Remove entry from group
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry.RemoveAndClean">
            <summary>
            Remove entry from group and clear message - remove group instance if it is empty
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroup.Entry.Release">
            <summary>
            Returns entry to pool if entry was got by <see cref="!:RepeatingGroupPool.GetEntry"/>.
            If entry was got by calling <c>Entry AddEntry()</c> method or <c>Entry GetEntry()</c>, then it does nothing.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroupArray.GetEntryLinkByIndex(System.Int32[],System.Int32)">
            
            <param name="repeatingGroup"> </param>
            <param name="index"> index for entry. For first entry - 0, for second - 1, so on </param>
            <returns> link to entry in entries array </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroupArray.GetIndexInRgArray(System.Int32)">
            
            <param name="rgEntryIndex"> index for entry in repeating group. For first entry index equals to 0, for second - 1 and so on </param>
            <returns> pointer to entry in repeating group array. </returns>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroupStorage._entries">
            <summary>
            Contains info about entries in format:
            Header:
            1. Pointer at end of entry
            2. Maximum tag index in fieldIndex for current entry
            Entry:
            1. Tag number
            2. Tag index in fieldIndex or in repeating group array
            3. Type of Link:
            1 = Tag in field index
            2 = Tag in Repeating Group array
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroupStorage._hiddenLeadingTags">
            <summary>
            Array with leading tags that doesn't inserted into fix message because have value=0.
            It is possible in cases when group just created and entries not yet added and when all entries deleted from the group, but the group is not deleted.
            Tags should be removed from this array when leading tag inserts into message or when group is deleted.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroupStorage._rgArray">
            <summary>
            Contains info about Repeating Groups in format:
            Header:
            1. Leading tag
            2. Unique id for distinguish groups with same leading tag
            3. Link to leading tag at indexed storage
            4. Pointer at end of Repeating Group
            5. Link to parent entry
            Entry:
            1. Pointer to entry in entries array
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.Rg.RepeatingGroupStorage.StartEntry(System.Int32)">
            <summary>
            Start creating entry.
            </summary>
            <param name="counterTag"> counter tag </param>
            <exception cref="T:Epam.FixAntenna.NetCore.Message.Rg.Exceptions.InvalidLeadingTagValueException"> if there is invalid counter tag value in the specified message. </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.CustomMaskedTags.#ctor(System.String)">
            <summary>
            Creates instance of CustomMaskedTags, always include default masked tags: 554, 925.
            </summary>
            <param name="tags"></param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.CustomMaskedTags.Create(System.String)">
            <summary>
            Creates instance of CustomMaskedTags, always include default masked tags: 554, 925.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.CustomMaskedTags.IsTagListed(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.CustomMaskedTags.GetMaskedTags">
            <inheritdoc/>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.SpecialTags.DefaultMaskedTags.Instance">
            <summary>
            Static instance of DefaultMaskedTags
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.DefaultMaskedTags.IsTagListed(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.DefaultMaskedTags.GetMaskedTags">
            <inheritdoc/>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags.IsTagListed(System.Int32)">
            <summary>
            Checks if tag exist in array of tags.
            </summary>
            <param name="tag"> the tag id </param>
            <returns> true if exists </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags.GetMaskedTags">
            <summary>
            Returns sorted array of masked tags.
            </summary>
            <returns>Returns sorted array of masked tags.</returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.SpecialFixUtil.GetMaskedString(System.Byte[],System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.RawFixUtil.IRawTags,Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags)">
            <summary>
            Parses provided byte array and returns string representation masking configured tags.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="rawTags"></param>
            <param name="maskedTags"></param>
            <returns></returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Message.SpecialTags.SpecialFixUtil.MaskFields(System.Span{System.Byte},Epam.FixAntenna.NetCore.Message.RawFixUtil.IRawTags,Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags)">
            <summary>
            This method masks fields defined in configuration file. By default fields 554, 925 are masked.
            Values for such fields will be filled by asterisks in provided byte array.
            </summary>
            <param name="buffer"><see cref="T:System.Span`1"/> - message to mask fields.</param>
            <param name="rawTags"><see cref="T:Epam.FixAntenna.NetCore.Message.RawFixUtil.IRawTags"/> defined raw tags.</param>
            <param name="maskedTags"><see cref="T:Epam.FixAntenna.NetCore.Message.SpecialTags.IMaskedTags"/> defined tags to mask.</param>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Message.Storage.ByteArrayMessageStorage._origBuffer">
            <summary>
            link to the original buffer which is external for messages.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.TagValue.Value">
            <summary>
            Use with caution. Each GetValue do Array.Copy.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Message.TagValue.FullSize">
            <summary>
            Gets field size as length of array segment plus length of tag value plus 1 ('=' char).
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator">
            <summary>
            The dummy message validator implementation.
            This validator used instead of real validator.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator.ValidateContent(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator.ContentValidation">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator.Validate(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.DummyMessageValidator.Validate(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Validation.IValidationResult)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.A">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;simpleContent>
                &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>anyURI">
                  &lt;attribute name="href" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
                &lt;/extension>
              &lt;/simpleContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.A.Value">
            <summary>
            Gets or sets the value of the value property.
            </summary>
            <value>
            possible object is <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.A.Href">
            <summary>
            Gets or sets the value of the href property.
            </summary>
            <value>
            possible object is <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Block">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}comment" minOccurs="0"/>
                  &lt;/sequence>
                  &lt;attribute name="idref" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="condreq" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="req" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="tag" type="{http://www.w3.org/2001/XMLSchema}int" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Block.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               getContent().add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Comment"/>
            <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Block.Idref">
            <summary>
            Gets or sets the value of the idref property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Block.Condreq">
            <summary>
            Gets or sets the value of the condreq property.
            </summary>
            <value>
              possible object is <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Block.Req">
            <summary>
            Gets or sets the value of the req property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Block.Tag">
            <summary>
            Gets or sets the value of the tag property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.Int32"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Block.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
            <value>
              allowed object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockdef">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}field"/>
                    &lt;element ref="{}descr"/>
                    &lt;element ref="{}group"/>
                    &lt;element ref="{}block"/>
                  &lt;/choice>
                  &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Blockdef.FieldOrDescrOrGroup">
            <summary>
            Gets the value of the fieldOrDescrOrGroup property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               FieldOrDescrOrGroup.Add(newItem);
            </pre>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Group"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Field"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Block"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Descr"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Blockdef.Id">
            <summary>
            Gets or sets the value of the id property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Blockdef.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;simpleContent>
                &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
                  &lt;attribute name="idref" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/extension>
              &lt;/simpleContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Blockref.Idref">
            <summary>
            Gets or sets the value of the idref property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Blockref.Value">
            <summary>
            Gets or sets the value of the value property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Comment">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}blockref"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Comment.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Dd">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}fieldref" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Dd.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               getContent().add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Descr">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}p"/>
                    &lt;element ref="{}ul"/>
                    &lt;element ref="{}dl"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}table"/>
                    &lt;element ref="{}blockref"/>
                    &lt;element ref="{}ol"/>
                    &lt;element ref="{}msgref"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Descr.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               getContent().add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Table"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Dl"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Ul"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Ol"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.P"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Dl">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}dt"/>
                    &lt;element ref="{}dd"/>
                    &lt;element ref="{}a"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}blockref"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Dl.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               getContent().add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.A"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Dd"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Dt">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}fieldref" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Dt.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to adt a new item, do as follows:
            <pre>
               getContent().add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Field">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}comment" minOccurs="0"/>
                  &lt;/sequence>
                  &lt;attribute name="tag" type="{http://www.w3.org/2001/XMLSchema}short" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="condreq" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="req" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="idref" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Field.Condreq">
            <summary>
            Gets or sets the value of the condreq property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Field.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Content.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Comment"/>
            <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Field.Idref">
            <summary>
            Gets or sets the value of the idref property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Field.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Field.Req">
            <summary>
            Gets or sets the value of the req property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Field.Tag">
            <summary>
            Gets or sets the value of the tag property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Int32"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}item" maxOccurs="unbounded" minOccurs="0"/>
                    &lt;element ref="{}valblock" minOccurs="0"/>
                    &lt;element ref="{}multi" minOccurs="0"/>
                    &lt;element ref="{}alias" minOccurs="0"/>
                    &lt;element ref="{}range" minOccurs="0"/>
                    &lt;element ref="{}descr"/>
                  &lt;/sequence>
                  &lt;attribute name="tag" type="{http://www.w3.org/2001/XMLSchema}short" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="lenfield" type="{http://www.w3.org/2001/XMLSchema}short" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Item">
            <summary>
            Gets the value of the item property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Item.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Item"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Valblock">
            <summary>
            Gets or sets the value of the valblock property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Valblock"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Multi">
            <summary>
            Gets or sets the value of the multi property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Multi"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Alias">
            <summary>
            Gets or sets the value of the alias property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Range">
            <summary>
            Gets or sets the value of the range property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Range"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Descr">
            <summary>
            Gets or sets the value of the descr property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Descr"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Lenfield">
            <summary>
            Gets or sets the value of the lenfield property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Int32"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Tag">
            <summary>
            Gets or sets the value of the tag property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Int32"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef.Type">
            <summary>
            Gets or sets the value of the type property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Fielddic">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}valblockdef" maxOccurs="unbounded" minOccurs="0"/>
                    &lt;element ref="{}fielddef" maxOccurs="unbounded" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddic.Valblockdef">
            <summary>
            Gets the value of the valblockdef property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Valblockdef.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Valblockdef"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fielddic.Fielddef">
            <summary>
            Gets the value of the fielddef property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Fielddef.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fielddef"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;simpleContent>
                &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
                  &lt;attribute name="tag" type="{http://www.w3.org/2001/XMLSchema}short" />
                  &lt;attribute name="msgtype" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/extension>
              &lt;/simpleContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref.Msgtype">
            <summary>
            Gets or sets the value of the msgtype property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref.Tag">
            <summary>
            Gets or sets the value of the tag property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Int32"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref.Value">
            <summary>
            Gets or sets the value of the value property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}typelist"/>
                    &lt;element ref="{}fielddic"/>
                    &lt;element ref="{}msgdic"/>
                  &lt;/sequence>
                  &lt;attribute name="fixversion" type="{http://www.w3.org/2001/XMLSchema}float" />
                  &lt;attribute name="title" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="date" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.Date">
            <summary>
            Gets or sets the value of the date property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.Typelist">
            <summary>
            Gets or sets the value of the typelist property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Typelist"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.Fielddic">
            <summary>
            Gets or sets the value of the fielddic property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fielddic"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.Fixversion">
            <summary>
            Gets or sets the value of the fixversion property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Single"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.Msgdic">
            <summary>
            Gets or sets the value of the msgdic property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgdic"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.Title">
            <summary>
            Gets or sets the value of the title property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Fixdic.IsFixtDictionary">
            <summary>
            Is this dictionary is transport dictionary.
            </summary>
            <value> always return true for this instance. </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.GenericElement`1">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}fieldref" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.GenericElement`1.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Content.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Group">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}field"/>
                    &lt;element ref="{}comment"/>
                    &lt;element ref="{}group"/>
                    &lt;element ref="{}block"/>
                  &lt;/choice>
                  &lt;attribute name="nofield" type="{http://www.w3.org/2001/XMLSchema}short" />
                  &lt;attribute name="startfield" type="{http://www.w3.org/2001/XMLSchema}short" />
                  &lt;attribute name="tag" type="{http://www.w3.org/2001/XMLSchema}short" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="req" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="condreq" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Condreq">
            <summary>
            Gets or sets the value of the condreq property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.Reflection.FieldInfo"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Comment"/>
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Block"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Group"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Nofield">
            <summary>
            Gets or sets the value of the nofield property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.Int32"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Req">
            <summary>
            Gets or sets the value of the req property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Startfield">
            <summary>
            Gets or sets the value of the startfield property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.Int32"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Group.Tag">
            <summary>
            Gets or sets the value of the tag property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.Int32"/>
            </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Item">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}blockref" minOccurs="0"/>
                  &lt;/choice>
                  &lt;attribute name="val" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Item.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Content.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Item.Id">
            <summary>
            Gets or sets the value of the id property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Item.Val">
            <summary>
            Gets or sets the value of the val property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Li">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}blockref"/>
                    &lt;element ref="{}ul"/>
                    &lt;element ref="{}a"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Li.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Ul"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.A"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgdef">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}field"/>
                    &lt;element ref="{}descr"/>
                    &lt;element ref="{}alias"/>
                    &lt;element ref="{}block"/>
                    &lt;element ref="{}group"/>
                  &lt;/choice>
                  &lt;attribute name="msgtype" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="admin" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgdef.Admin">
            <summary>
            Gets or sets the value of the admin property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgdef.FieldOrDescrOrAlias">
            <summary>
            Gets the value of the fieldOrDescrOrAlias property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               FieldOrDescrOrAlias.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Descr"/>
            <seealso cref="T:System.String"/>
            <seealso cref="T:System.Reflection.FieldInfo"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Block"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Group"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgdef.Msgtype">
            <summary>
            Gets or sets the value of the msgtype property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgdef.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgdic">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}blockdef" maxOccurs="unbounded" minOccurs="0"/>
                    &lt;element ref="{}msgdef" maxOccurs="unbounded" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgdic.Blockdef">
            <summary>
            Gets the value of the blockdef property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Blockdef.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockdef"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgdic.Msgdef">
            <summary>
            Gets the value of the msgdef property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Msgdef.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgdef"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;simpleContent>
                &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
                  &lt;attribute name="msgtype" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="tag" type="{http://www.w3.org/2001/XMLSchema}short" />
                &lt;/extension>
              &lt;/simpleContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgref.Msgtype">
            <summary>
            Gets or sets the value of the msgtype property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgref.Tag">
            <summary>
            Gets or sets the value of the tag property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.Int32"/>
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Msgref.Value">
            <summary>
            Gets or sets the value of the value property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Multi">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}item" maxOccurs="unbounded" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Multi.Item">
            <summary>
            Gets the value of the item property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Item.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Item"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Ol">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}li"/>
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}table"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Ol.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Table"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Li"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.P">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}a"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}blockref"/>
                    &lt;element ref="{}ul"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.P.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Ul"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Blockref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.A"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Range">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;simpleContent>
                &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
                  &lt;attribute name="minval" type="{http://www.w3.org/2001/XMLSchema}float" />
                  &lt;attribute name="maxval" type="{http://www.w3.org/2001/XMLSchema}float" />
                  &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/extension>
              &lt;/simpleContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Range.Maxval">
            <summary>
            Gets or sets the value of the maxval property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Double"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Range.Minval">
            <summary>
            Gets or sets the value of the minval property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Double"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Range.Type">
            <summary>
            Gets or sets the value of the type property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Range.Value">
            <summary>
            Gets or sets the value of the value property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Table">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}tr"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}msgref"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Table.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Tr"/>
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Td">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}ul"/>
                  &lt;/choice>
                  &lt;attribute name="colspan" type="{http://www.w3.org/2001/XMLSchema}byte" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Td.Colspan">
            <summary>
            Gets or sets the value of the colspan property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Byte"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Td.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Content.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Ul"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Th">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}fieldref" minOccurs="0"/>
                  &lt;/sequence>
                  &lt;attribute name="colspan" type="{http://www.w3.org/2001/XMLSchema}byte" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Th.Colspan">
            <summary>
            Gets or sets the value of the colspan property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.Byte"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Th.Content">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Content.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            <seealso cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Tr">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}th" maxOccurs="unbounded" minOccurs="0"/>
                    &lt;element ref="{}td" maxOccurs="unbounded" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Tr.Th">
            <summary>
            Gets the value of the th property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Th.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Th"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Tr.Td">
            <summary>
            Gets the value of the td property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Td.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Td"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Typedef">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}descr"/>
                  &lt;/sequence>
                  &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="extends" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Typedef.Descr">
            <summary>
            Gets or sets the value of the descr property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Descr"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Typedef.Extends">
            <summary>
            Gets or sets the value of the extends property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Typedef.Type">
            <summary>
            Gets or sets the value of the type property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Typelist">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;sequence>
                    &lt;element ref="{}typedef" maxOccurs="unbounded" minOccurs="0"/>
                  &lt;/sequence>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Typelist.Typedef">
            <summary>
            Gets the value of the typedef property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               Typedef.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Typedef"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Ul">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}li"/>
                    &lt;element ref="{}fieldref"/>
                    &lt;element ref="{}msgref"/>
                    &lt;element ref="{}ul" minOccurs="0"/>
                  &lt;/choice>
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Ul.ToString">
            <summary>
            Gets the value of the content property.
            <p/>
            <p/>
            This accessor method returns a reference to the live list,
            not a snapshot. Therefore any modification you make to the
            returned list will be present inside the JAXB object.
            This is why there is not a <c>Set</c> method for the content property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               GetContent().Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:System.String"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Ul"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Li"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Msgref"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Fieldref"/>
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Valblock">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;simpleContent>
                &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
                  &lt;attribute name="idref" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/extension>
              &lt;/simpleContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Valblock.GetValue">
            <summary>
            Gets the value of the value property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Valblock.SetValue(System.String)">
            <summary>
            Sets the value of the value property.
            </summary>
            <param name="value"> allowed object is
                         <seealso cref="T:System.String"/> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Valblock.GetIdref">
            <summary>
            Gets the value of the idref property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Entities.Valblock.SetIdref(System.String)">
            <summary>
            Sets the value of the idref property.
            </summary>
            <param name="value"> allowed object is
                         <seealso cref="T:System.String"/> </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Entities.Valblockdef">
            <summary>
            <para>Class for anonymous complex type.
            <p/>
            </para>
            <para>The following schema fragment specifies the expected content contained within this class.
            <p/>
            <pre>
            &lt;complexType>
              &lt;complexContent>
                &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
                  &lt;choice maxOccurs="unbounded" minOccurs="0">
                    &lt;element ref="{}item"/>
                    &lt;element ref="{}range"/>
                    &lt;element ref="{}descr" minOccurs="0"/>
                  &lt;/choice>
                  &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
                  &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
                &lt;/restriction>
              &lt;/complexContent>
            &lt;/complexType>
            </pre>
            </para>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Valblockdef.Id">
            <summary>
            Gets or stes the value of the id property.
            </summary>
            <returns> possible object is
                    <seealso cref="T:System.String"/> </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Valblockdef.ItemOrRangeOrDescr">
            <summary>
            Gets the value of the itemOrRangeOrDescr property.
            <p/>
            <p/>
            For example, to add a new item, do as follows:
            <pre>
               ItemOrRangeOrDescr.Add(newItem);
            </pre>
            <p/>
            <p/>
            <p/>
            Objects of the following type(s) are allowed in the list
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Range"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Descr"/>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.Entities.Item"/>
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Entities.Valblockdef.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
            <value>
              possible object is
              <seealso cref="T:System.String"/>
            </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE__OUT_OF_RANGE_FOR_TAG">
            <summary>
              Looks up a localized string similar to Invalid message - value is incorrect (out of range). [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_INCORRECT_DATA_TYPE">
            <summary>
              Looks up a localized string similar to Invalid message - incorrect data type. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_INCORRECT_NUMINGROUP_COUNT">
            <summary>
              Looks up a localized string similar to Invalid message - incorrect NumInGroup count for repeating group. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_INVALID_MESSAGE_TYPE">
            <summary>
              Looks up a localized string similar to Invalid message - Invalid message type. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_INVALID_TAG_NUMBER">
            <summary>
              Looks up a localized string similar to Invalid message - invalid tag number. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_MISSING_VALUE">
            <summary>
              Looks up a localized string similar to Invalid message - missing value. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_REQUIRED_TAG_MISSING">
            <summary>
              Looks up a localized string similar to Invalid message - required tag missing. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_APPEARS_MORE_THEN_ONCE">
            <summary>
              Looks up a localized string similar to Invalid message - tag appears more then once. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_IN_GROUP_IS_OUT_OF_ORDER">
            <summary>
              Looks up a localized string similar to Invalid message - tag in group is out of order. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_IS_OUT_OF_ORDER">
            <summary>
              Looks up a localized string similar to Invalid message - tag is out of order. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_IS_OUTSIDE_REPEATING_GROUP">
            <summary>
              Looks up a localized string similar to Invalid message - tag is outside of repeating group. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_IS_REPEATED_INCORRECT_NUMBER_TIME">
            <summary>
              Looks up a localized string similar to Invalid message - tag is repeated incorrect number of time(s). [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_NOT_DEFINED">
            <summary>
              Looks up a localized string similar to Invalid message - tag not defined. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_TAG_NOT_DEFINED_REPEATING_GROUP">
            <summary>
              Looks up a localized string similar to Invalid message - tag not defined for the repeating group. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_UNDEFINED_TAG">
            <summary>
              Looks up a localized string similar to Invalid message - undefined tag. [SeqNum: {0}, MsgType: {1}, Tag: {2}].
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Error.Resource.ValidationMessages.INVALID_MESSAGE_UNSUPPORTED_MSGTYPE">
            <summary>
              Looks up a localized string similar to Invalid message - unsupported MsgType. [SeqNum: {0}, MsgType: {1}, Tag: N/A].
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Exceptions.CommonValidationException.#ctor(Epam.FixAntenna.NetCore.Validation.Error.FixError,System.Exception)">
            <summary>
            Construct a <c>CommonValidatorException</c> with the specified detail message
            and nested exception.
            </summary>
            <param name="validationError"> instance that Contains all problems </param>
            <param name="cause">           the nested exception </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Exceptions.CommonValidationException.RootCause">
            <summary>
            Retrieve the innermost cause of this exception, if any.
            </summary>
            <value> the innermost exception, or <c>null</c> if none </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Exceptions.CommonValidationException.ValidationError">
            <summary>
            Gets the validationError of this <c>CommonValidatorException</c> object.
            </summary>
            <value> the FIXError. </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Exceptions.Mapping.BlockDefinitionsException.#ctor(Epam.FixAntenna.NetCore.Validation.Error.FixError,System.Exception)">
            <summary>
            Construct a <c>BlockDefinitionsException</c> with the specified detail message
            and nested exception.
            </summary>
            <param name="validationError"> instance that Contains all problems </param>
            <param name="cause">           the nested exception </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Exceptions.Mapping.MessageDefinitionsException.#ctor(Epam.FixAntenna.NetCore.Validation.Error.FixError,System.Exception)">
            <summary>
            Construct a <c>CommonFastValidatorException</c> with the specified detail message
            and nested exception.
            </summary>
            <param name="validationError"> instance that Contains all problems </param>
            <param name="cause">           the nested exception </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Exceptions.Validate.ConditionParserException.#ctor(Epam.FixAntenna.NetCore.Validation.Error.FixError,System.Exception)">
            <summary>
            Construct a <c>ConditionValidateException</c> with the specified detail message
            and nested exception.
            </summary>
            <param name="validationError"> instance that Contains all problems </param>
            <param name="cause">           the nested exception </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Exceptions.Validate.ConditionParserException.#ctor(System.String)">
            <summary>
            Construct a <c>ConditionValidateException</c> with the specified detail message
            and nested exception.
            </summary>
            <param name="str"> description of problem </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Exceptions.Validate.ValidationException.#ctor(Epam.FixAntenna.NetCore.Validation.Error.FixError,System.Exception)">
            <summary>
            Create a new <c>ValidateException</c>
            with the specified detail message and the given root cause.
            </summary>
            <param name="error"> the detail message </param>
            <param name="cause"> the root cause </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.FixMessage.ValidationFixGroup">
            <summary>
            This class provide functionality for recursion create FIX messages with hierarchic of groups.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IFixMessageValidator.ValidateFixMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Validates the fix message.
            </summary>
            <param name="message"> the fix message
            </param>
            <returns> returns the validation result
             </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IFixMessageValidator.ValidateFixMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Validates the fix message.
            </summary>
            <param name="msgType"> the type of message </param>
            <param name="message"> the list of fix fields
            </param>
            <returns> returns the validation result
             </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IFixMessageValidator.ContentValidation">
            <summary>
            Gets or sets the content validation flag.
            This flag enable/disable the content validation of message.
            The content validation works only for header and trailer blocks.
            </summary>
            <value> the flag </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.IMessageValidator">
            <summary>
            The message validator interface.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IMessageValidator.Validate(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Validates the message.
            </summary>
            <param name="message"> the fix message
            </param>
            <returns> the result contains the errors collection if it exists.
             </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IMessageValidator.Validate(Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Validation.IValidationResult)">
            <summary>
            Validates the message.
            </summary>
            <param name="message"> the ValidationResult object to avoid GC </param>
            <param name="result"> the fix message
            </param>
            <returns> the result contains the errors collection if it exists.
             </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IMessageValidator.ValidateContent(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Validates the content of message.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="content"> the content of message
             </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IMessageValidator.ContentValidation">
            <summary>
            Sets the content validation flag.
            </summary>
            <value>
              the content validation flag
            </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidationFixMessage.GetMessageSize">
            <summary>
            Gets the number of fields in this message.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.IValidationResult">
            <summary>
            The validation result wrapper interface.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IValidationResult.IsMessageValid">
            <summary>
            Returns true if message is valid.
            </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IValidationResult.Errors">
            <summary>
            Gets all errors.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidationResult.Reset">
            <summary>
            Clear all errors.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.IValidator">
            <summary>
            The common interface for validation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <summary>
            Validates the message.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="message"> the fix message </param>
            <param name="isContentValidation"> the content validation flag,
                 if sets to true, the validator validates only content flags.
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.GetValidator(Epam.FixAntenna.NetCore.Validation.ValidatorType)">
            <summary>
            Gets the validator by validator type.
            </summary>
            <param name="type"> the type of validator
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.GetValidatorsWithOutInputs(System.Collections.Generic.IList{Epam.FixAntenna.NetCore.Validation.ValidatorType})">
            <summary>
            Gets the validators with specific types.
            </summary>
            <param name="validatorTypes"> the types of validator
             </param>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.ValidatorsWithOutMessageType">
             <summary>
             Gets the validators. The result does not contain <c>MessageType</c> validator.
            
             </summary>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.AllValidators">
            <summary>
            Gets validators.
            </summary>
            <value>
              the list of validator
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.MessageTypeValidator">
            <summary>
            Gets validators.
            </summary>
            <value>
              the list of validator
            </value>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.ValidatorType">
            <summary>
            Gets the list of type validator.
            </summary>
            <value>
              the list of validator
            </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidatorContainer.PutOtherValidators(Epam.FixAntenna.NetCore.Validation.IValidatorContainer)">
            <summary>
            Appends the validators from <c>container</c> container into current instance.
            </summary>
            <returns> the list of validator
             </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.IValidatorFactory">
            <summary>
            The common interface for creating validators.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidatorFactory.CreateValidator(Epam.FixAntenna.NetCore.Validation.ValidatorType)">
            <summary>
            Creates the validator.
            </summary>
            <param name="validatorType"> the type of validator
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidatorFactory.CreateAllValidators">
            <summary>
            Creates list of validator.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.ValidatorType"> </seealso>
            <returns> validator container
             </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.IValidatorFactory.CreateRequiredValidator">
            <summary>
            Creates message type validator.
            </summary>
            <returns> Container with instance of <c>MessageTypeValidator</c>. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.AbstractCache.Get(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.AbstractCache.Put(System.Int32,Epam.FixAntenna.NetCore.Validation.Entities.Field)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.AbstractGroupsCache.GetBlockGroupsCaches">
            <returns> the blockGroupsCaches </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.AbstractGroupsCache.GetGroupsCaches">
            <returns> the groupsCaches </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.BlockGroupsCache.#ctor(System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Entities.Field})">
            <summary>
            Constructor for create instance of <c>BlockGroupsCache</c>
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.BlockGroupsCache.GetIdRef">
            <returns> the idRef </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.BlockGroupsCache.GetMapCashe">
            <returns> the idRef </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.ICache`2.Put(`0,`1)">
            <summary>
            Puts the value by key into cache.
            </summary>
            <param name="key">   Key of input value. </param>
            <param name="value"> The instance that Contains concrete value for input key. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.ICache`2.Get(`0)">
            <summary>
            Returns value by input key.
            </summary>
            <param name="key"> Input key. </param>
            <returns> Instance of value. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.Keys.BlockCacheKey.GetForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.Keys.BlockCacheKey.GetPrimaryKey">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.Keys.GroupCacheKey.GetPrimaryKey">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.Keys.GroupCacheKey.GetForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.MessagesCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Cache.MessagesCache.Put(System.String,Epam.FixAntenna.NetCore.Validation.Utils.Cache.GroupsCache)">
            <inheritdoc />
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.BeginCustomTag">
            <summary>
            Field BEGIN_CUSTOM_TAG
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.Smh">
            <summary>
            Field Header
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.Smt">
            <summary>
            Field Trailer
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.ExisttagWord">
            <summary>
            Field Exist Tag
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.FalseWord">
            <summary>
            Field False
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.OrWord">
            <summary>
            Field Or
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.AndWord">
            <summary>
            Field And
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.NotWord">
            <summary>
            Field Not
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.GroupIdent">
            <summary>
            Field GROUP_IDENT
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.TagIdent">
            <summary>
            Field TAG_IDENT
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.CriticalTagsOrderHeader">
            <summary>
            CRITICAL_TAGS_ORDER_HEADER
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Constants.CriticalTagsOrderTrailer">
            <summary>
            Field CRITICAL_TAGS_ORDER_TRAILER
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.#ctor(Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes)">
            <summary>
            Creates the <c>BlockDefinitionsUtils</c>.
            </summary>
            <param name="dictionaryTypesContainer"> the dictionary </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.GetMessageTypes">
            <summary>
            Gets set of block
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.GetRequiredTags(System.String)">
            <summary>
            Gets required tags for message.
            </summary>
            <param name="blockName"> the block name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.Put(System.Collections.Generic.IList{Epam.FixAntenna.NetCore.Validation.Entities.Blockdef})">
            <summary>
            Puts the blocks to the map.
            </summary>
            <param name="elements"> the block collection </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.Get">
            <summary>
            Gets the collection of block.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.Get(System.String)">
            <summary>
            Gets the block.
            </summary>
            <param name="blockName"> the block name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils.Contains(System.String)">
            <summary>
            Checks if block with name blockName exists.
            </summary>
            <param name="blockName"> the  block name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.IFixMessageDefinitions`1.Put(System.Collections.Generic.IList{`0})">
            <summary>
            Puts the element into map.
            </summary>
            <param name="elements"> the list of elements </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.IFixMessageDefinitions`1.Get">
            <summary>
            Returns the collection of values of this Map.
            </summary>
            <returns> the messageDefs of this MessageTypes object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.IFixMessageDefinitions`1.Get(System.String)">
            <summary>
            Gets element from map by key
            </summary>
            <param name="messageType"> of type String </param>
            <returns> instance of T </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.IFixMessageDefinitions`1.Contains(System.String)">
            <summary>
            Checks if Contains input message type in dictionary of FIX protocol
            </summary>
            <param name="messageType"> Message Type </param>
            <returns> boolean true if Contains </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.IFixMessageDefinitions`1.GetMessageTypes">
            <summary>
            Returns the messageTypes of this FixDefMap object.
            </summary>
            <returns> the messageTypes of this FixDefMap object. </returns>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils._messageTypeList">
            <summary>
            Field messageTypeList
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.#ctor(Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes)">
            <summary>
            Constructor MessageTypes creates a new MessageTypes instance.
            </summary>
            <param name="dictionaryTypesContainer"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.GetMessageTypes">
            <summary>
            Method GetMessageTypes
            </summary>
            <seealso cref="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.IFixMessageDefinitions`1.GetMessageTypes"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.GetRequiredTags(System.Collections.Generic.IList{System.Object},Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils)">
            <summary>
            Method getRequiredTag returns the requiredTag of this FixDefMap object.
            </summary>
            <param name="fieldList">             List of field,groups and blocks </param>
            <param name="blockDefinitionsUtils"> Block definition util </param>
            <returns> the requiredTag of this FixDefMap object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.GetRequiredTags(System.String,Epam.FixAntenna.NetCore.Validation.Utils.Definitions.BlockDefinitionsUtils)">
            <summary>
            Method getRequiredTag returns the requiredTag of this FixDefMap object.
            </summary>
            <param name="messageType">           Type of message </param>
            <param name="blockDefinitionsUtils"> Block definition util </param>
            <returns> the requiredTag of this FixDefMap object. </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Validation.Exceptions.Mapping.MessageDefinitionsException"> if message does not exist </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.Put(System.Collections.Generic.IList{Epam.FixAntenna.NetCore.Validation.Entities.Msgdef})">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.Get">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.Definitions.MessageDefinitionsUtils.GetMessageTypeByName(System.String)">
            <summary>
            Method returns messageType by name of message
            </summary>
            <param name="msgType"> Name of message </param>
            <returns> Type of Message </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Validation.Exceptions.Mapping.MessageDefinitionsException"> if message does not exist </exception>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil">
            <summary>
            Utility to work with FIX messages, such as validate,
            returns custom data of message and etc.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.#ctor(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <summary>
            Constructor FixUtils creates a new FixUtils instance.
            </summary>
            <param name="version"> the Version of FIX protocol </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.#ctor(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <summary>
            Constructor FixUtils creates a new FixUtils instance.
            </summary>
            <param name="version">       the Version of FIX protocol </param>
            <param name="appFixVersion"> the App version of FIX protocol </param>
            <exception cref="T:System.ArgumentException"> </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetValblockdefs">
            <summary>
            Gets val blocks.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetAllTags">
            <summary>
            Gets tags.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldDef">
            <summary>
            Gets fields.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetConditionalCache">
            <summary>
            Gets conditional cache.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetConditions``1(System.Collections.Generic.IList{``0},System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.Container.ConditionalType)">
            <summary>
            Returns map of condition operators from input list
            </summary>
            <param name="list">            the input list. </param>
            <param name="rootTag">         the root tag of group. </param>
            <param name="conditionalType"> the type of conditional FIX message. </param>
            <returns> Map of condition operators </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.PutFields">
            <summary>
            Puts fields into cache
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetTagsByMsgType(System.String)">
            <summary>
            Gets tags for message.
            </summary>
            <param name="messageType"> the message type of message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldsByMessageType(System.String)">
            <summary>
            Gets fields for message.
            </summary>
            <param name="messageType"> the message type of message </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetVersion">
            <summary>
            Gets fix version.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldDefByTag(System.Int32)">
            <summary>
            Gets field.
            </summary>
            <param name="tag"> the tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldDefByName(System.String)">
            <summary>
            Gets field.
            </summary>
            <param name="name"> the field name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldTagByName(System.String)">
            <summary>
            Gets field tag.
            </summary>
            <param name="name"> the field name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldTypeByFieldName(System.String)">
            <summary>
            Gets field type by field name.
            </summary>
            <param name="name"> the field name </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldTypeByFieldTag(System.Int32)">
            <summary>
            Gets field type by field tag.
            </summary>
            <param name="tag"> the filed tag. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.FindGroup(System.String,System.Int32)">
            <summary>
            Find group by start tag.
            </summary>
            <param name="msgType">    the message type. </param>
            <param name="startTagId"> the start tag if repeating group. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetGroupContent(System.String,System.Int32)">
            <summary>
            Get repeating group content.
            </summary>
            <param name="msgType">    the message type. </param>
            <param name="startTagId"> the start tag if repeating group. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetGroupFieldDefs(System.String,System.Int32)">
            <summary>
            Get all field defs in repeating group.
            </summary>
            <param name="msgType">    the message type. </param>
            <param name="startTagId"> the start tag if repeating group. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetMessageFieldDefHier(System.String)">
            <summary>
            Get message type field def hierarchy.
            </summary>
            <param name="msgType"> the message type. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsTagDefinedForMessage(System.String,System.Int32)">
            <summary>
            Method isTagDefinedForMessage, verifies whether the tag is present in a
            message by type of message.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="tagNum">  the num of tag </param>
            <returns> true if presents, otherwise false </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetRequiredTagsForMessage(System.String)">
            <summary>
            Method getRequiredTagsForMessage returns array of required tags, or empty
            array if message does not have required tags.
            </summary>
            <param name="msgType"> the type of message </param>
            <returns> int[] Array of required tags </returns>
            <exception cref="T:Epam.FixAntenna.NetCore.Validation.Exceptions.Mapping.MessageDefinitionsException">if message does not exist </exception>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsTagDefinedForMessageOrBlock(System.String,System.Int32)">
            <summary>
            Verifies whether the tag is defines for message by type of message
            </summary>
            <param name="shortName"> the type of message </param>
            <param name="tagNum">    the tag </param>
            <returns> <c>true</c> if defines, otherwise <c>false</c> </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.HasRequiredTagInMessage``1(System.Collections.Generic.IList{``0},Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Checks if fields list of message Contains tags from block
            </summary>
            <param name="list">      the list of field of block </param>
            <param name="fixMessage"> the field list of message </param>
            <returns> true if Contains in otherwise false </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetGroupTagsWithInternalGroups(System.String,System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Gets group tags, the returned result includes the inner groups.
            </summary>
            <param name="msgType">   the message type </param>
            <param name="groupTag">  the group tag </param>
            <param name="fixMessage"> the list of fields </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetGroupTagsWithOutInternalGroups(System.String,System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Gets group tags, the returned result does not include the inner groups.
            </summary>
            <param name="msgType">   the message type </param>
            <param name="tag">       the tag </param>
            <param name="fixMessage"> the list of fields </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetGroupsTags(System.String,System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.Boolean)">
            <summary>
            Gets group tags.
            </summary>
            <param name="msgType">           the message type </param>
            <param name="groupTag">          the group tag </param>
            <param name="fixMessage">         the list of fields </param>
            <param name="withInternalGroup"> if flag is true the inner groups will be included </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsKnownTag(System.Int32)">
            <summary>
            Checks if tag exist.
            </summary>
            <param name="tag"> the tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsGroupTag(System.String,System.Int32)">
            <summary>
            Checks if group <c>groupTag</c> defined for message type <c>msgType</c>
            </summary>
            <param name="groupTag"> the group tag </param>
            <param name="msgType">  the message type </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetStartTagForGroup(System.String,System.Int32)">
            <summary>
            Returns start tag for group by goup tag.
            </summary>
            <param name="msgType"> Type of message. </param>
            <param name="tag">     Tag of Group length. </param>
            <returns> Start field tag of group, if msgType does not exist return -1 </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetMessageDefUtils">
            <summary>
            Method getDefUtils returns the defUtils of this FixUtils object.
            </summary>
            <returns> the defUtils of this FixUtils object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetBlockDefUtils">
            <summary>
            Method getBlockDefUtils returns the blockDefUtils of this FixUtils
            object.
            </summary>
            <returns> the blockDefUtils of this FixUtils object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFixdic">
            <summary>
            Method getFixdic returns the fixdic of this FixUtils object.
            </summary>
            <returns> the fixdic of this FixUtils object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetSmhDef">
            <summary>
            Method getSmhDef returns the smhDef of this FixUtils object.
            </summary>
            <returns> the smhDef of this FixUtils object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetSmtDef">
            <summary>
            Method getSmtDef returns the smtDef of this FixUtils object.
            </summary>
            <returns> the smtDef of this FixUtils object. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldDefsHier``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the collection of field defs.
            </summary>
            <param name="fieldsWithGroupsAndBlocks"> the collection with fields, groups and blocks </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldDefs``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Gets the collection of field defs.
            </summary>
            <param name="fieldsWithGroupsAndBlocks"> the collection with fields, groups and blocks </param>
            <param name="useGroupTags">              the flag provides to include  the fields of group to result collection </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFieldsTags``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns list of tags of fields from input list.
            </summary>
            <param name="list"> Input list </param>
            <returns> List of tags of fields </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFields``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns list of tags of fields from input list.
            </summary>
            <param name="list"> Input list </param>
            <returns> List of tags of fields </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetFields(System.String)">
            <summary>
            Returns list of tags of fields from input list.
            </summary>
            <param name="messageType"> the type of FIX Message. </param>
            <returns> List of tags of fields </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.CountLengthForGroupUnit(Epam.FixAntenna.NetCore.Message.TagValue[],System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.TagValue,System.Collections.Generic.ISet{System.Int32},System.String,System.Int32)">
            <summary>
            Counts the group length.
            </summary>
            <param name="message">           the message </param>
            <param name="indexOfGroupTags">  the index of group tag </param>
            <param name="startGroupTag">     the start group tag </param>
            <param name="lengthOfGroupTag">  the length of group tag </param>
            <param name="stackOfGroupsTag">  the group tags </param>
            <param name="messageType">       the message type </param>
            <param name="rootGroupStartTag"> the root group start tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.CountLengthForGroupUnit(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.TagValue,System.Collections.Generic.ISet{System.Int32},System.String,System.Int32)">
            <summary>
            Counts the group length.
            </summary>
            <param name="message">           the message </param>
            <param name="indexOfGroupTags">  the index of group tag </param>
            <param name="startGroupTag">     the start group tag </param>
            <param name="lengthOfGroupTag">  the length of group tag </param>
            <param name="stackOfGroupsTag">  the group tags </param>
            <param name="messageType">       the message type </param>
            <param name="rootGroupStartTag"> the root group start tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.CountLengthForOneGroupUnit(Epam.FixAntenna.NetCore.Message.TagValue[],System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.TagValue,System.Collections.Generic.ISet{System.Int32},System.String,System.Int32)">
            <summary>
            Counts the group length.
            </summary>
            <param name="message">           the message </param>
            <param name="indexOfGroupTags">  the index of group tag </param>
            <param name="startGroupTag">     the start group tag </param>
            <param name="lengthOfGroupTag">  the length of group tag </param>
            <param name="stackOfGroupsTag">  the group tags </param>
            <param name="messageType">       the message type </param>
            <param name="rootGroupStartTag"> the root group start tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.CountLengthForOneGroupUnit(Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,Epam.FixAntenna.NetCore.Message.TagValue,System.Collections.Generic.ISet{System.Int32},System.String,System.Int32)">
            <summary>
            Counts the group length.
            </summary>
            <param name="message">           the message </param>
            <param name="indexOfGroupTags">  the index of group tag </param>
            <param name="startGroupTag">     the start group tag </param>
            <param name="lengthOfGroupTag">  the length of group tag </param>
            <param name="stackOfGroupsTag">  the group tags </param>
            <param name="messageType">       the message type </param>
            <param name="rootGroupStartTag"> the root group start tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetField(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the field.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="tag">     the tag </param>
            <returns> field if tag occurred otherwise nl </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsRequiredTag(System.String,System.Int32)">
            <summary>
            Checks if tag is required for message type.
            </summary>
            <param name="msgType"> the message type </param>
            <param name="tag">     the tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.PrepareFieldsDefinitions(Epam.FixAntenna.NetCore.Dictionary.DictionaryTypes)">
            <summary>
            Prepare fields definitions for input dictionary of FIX protocol.
            </summary>
            <param name="dictionaryTypes"> Input dictionary of FIX protocol </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsContainsTagInFieldsList(System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Method isContainsTagInFieldsList, verifies whether the tag is present in
            a list.
            </summary>
            <param name="list"> the input list </param>
            <param name="tag">  the tag </param>
            <returns> <c>true</c> if presents, otherwise <c>false</c> </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsContainsTagInFieldsList(System.String,System.Int32)">
            <summary>
            Verifies whether the tag is present in a message by type of message.
            </summary>
            <param name="messageType"> the type of message </param>
            <param name="tag">         the tag </param>
            <returns> <c>true</c> if presents, otherwise <c>false</c> </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.PutConditions">
            <summary>
            Puts conditions into cache.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetDefinition(System.String)">
            <summary>
            Method getDef returns map of message definition by message type.
            </summary>
            <param name="messageType"> the type of message </param>
            <returns> IFixMessageDefinitions definitions of message </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.IsMessageContainField(System.String,System.Int32)">
            <summary>
            Checks if message body contain tag.
            <i>Note: tags from group ignored.</i>
            </summary>
            <param name="messageType"> the message type </param>
            <param name="tag">         the tag </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Utils.FixUtil.GetValblockdef(System.String)">
            <summary>
            Gets valblockdef by idRef.
            </summary>
            <param name="idRef"> the id ref name </param>
            <returns> Valblockdef </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.ValidationEngine">
            <summary>
            Validator provides functionality for validation FIX message using custom
            validators.
            </summary>
        </member>
        <member name="F:Epam.FixAntenna.NetCore.Validation.ValidationEngine._validators">
            <summary>
            Field validators
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationEngine.#ctor(Epam.FixAntenna.NetCore.Validation.IValidatorContainer,System.Boolean)">
            <summary>
            Constructor Validator creates a new Validator instance.
            </summary>
            <param name="validators"></param>
            <param name="isContentValidation"> Indicates that will be validation only content
                                       of FIXMessage. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationEngine.#ctor(Epam.FixAntenna.NetCore.Validation.IValidatorContainer)">
            <summary>
            Constructor Validator creates a new Validator instance.
            </summary>
            <param name="validators"> </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationEngine.ValidateFixMessage(System.String,Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Method validateFIXMessage validates the FIXMessage.
            </summary>
            <param name="msgType"> of type String </param>
            <param name="message"> of type FixMessage </param>
            <returns> List of errors of validation , if validate is successful method
                    returns empty list </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.ValidationEngine.ContentValidation">
            <summary>
            Enable/disable content validation.
            </summary>
            <value> </value>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationEngine.PreloadDictionary(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,System.Boolean)">
            <summary>
            Pre-loads dictionaries from path <c>uriToDictionary</c>. If <c>uriToDictionary</c> is empty or null.
            </summary>
            <param name="fixVersionContainer"> Version of FIX dictionary. </param>
            <param name="replaceData">         If <c> true</c> systems replace the old dictionary(if old dictionary is null system create new dictionary with input elements.) </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationEngine.PreloadDictionary(Epam.FixAntenna.NetCore.Common.FixVersion,System.String,System.Boolean)">
            <summary>
            Pre-loads dictionaries from path <c>uriToDictionary</c>. If <c>uriToDictionary</c> is empty or null.
            </summary>
            <param name="version">         Version of FIX dictionary. </param>
            <param name="uriToDictionary"> Path to the dictionary. If path empty or null system loads dictionary from the  class path. </param>
            <param name="replaceData">     If <c> true</c> systems replace the old dictionary(if old dictionary is null system create new dictionary with input elements.)
                                   In other way system  adds input elements or replace if found the differences in the same elements. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationEngine.PreloadDictionary(System.String,Epam.FixAntenna.NetCore.Common.FixVersion,System.String,System.Boolean)">
            <summary>
            Pre-loads dictionaries from path <c>uriToDictionary</c>. If <c>uriToDictionary</c> is empty or null.
            </summary>
            <param name="dictionaryId">    Unique ID of dictionary </param>
            <param name="version">         Version of FIX dictionary. </param>
            <param name="uriToDictionary"> Path to the dictionary. If path empty or null system loads dictionary from the  class path. </param>
            <param name="replaceData">     If <c> true</c> systems replace the old dictionary (if old dictionary is null system create new dictionary with input elements.)
                                   In other way system  adds input elements or replace if found the differences in the same elements. </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.ValidationFixMessageBuilder">
            <summary>
            Provides ability to create <see cref="T:Epam.FixAntenna.NetCore.Validation.FixMessage.ValidationFixMessage"/>.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.ValidationFixMessageBuilder.BuildValidationFixMessage(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Creates the <see cref="T:Epam.FixAntenna.NetCore.Validation.FixMessage.ValidationFixMessage"/>.
            </summary>
            <param name="fixMessage"> the validated message </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.AbstractValidator">
            <summary>
            General interface to provide creating of validators for an application.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.AbstractValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <summary>
            Method "validate" validates of FIX message and returns list of errors of validation process.
            </summary>
            <param name="msgType">             Type of Message. </param>
            <param name="message">          FIX Message. </param>
            <param name="isContentValidation"> If true that is mean that will be validation only content of FIX message, without header or trailer. </param>
            <returns> List of errors of validation, if process of validationg is done successeful method returns empty list of errors. </returns>
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Validators.AbstractValidator.Util">
            <summary>
            Gets fix util.
            </summary>
            <value> FixUtil </value>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.ConditionalValidator">
            <summary>
            Implementation of IValidator that supports conditional validation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.ConditionalValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Creates the <c>ConditionalValidator</c>.
            </summary>
            <param name="util"> the fixutil </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.ConditionalValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.ConditionalValidator.ValidateConditionForTags(Epam.FixAntenna.NetCore.Validation.FixMessage.ValidationFixMessage,System.String)">
            <summary>
            Validates of conditions of message .
            </summary>
            <param name="message">  FIXMessage. </param>
            <param name="messageType"> type of message. </param>
            <returns> if message has errors, returns list with errors in otherwise empty list. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.AbstractCondition.GetTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.AbstractCondition.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.AbstractCondition.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.AbstractCondition.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.AbstractCondition.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser">
             <summary>
             This class uses for parsing condition for conditionary required fields and generate some executable Condition
             implementation.
             <p/>
             Supporting comparing operators: "=", "!=", "&lt;", "&gt;", "in";
             Supporting logical operators: "not", "or", "and"
             Supporting searching operator: "existtags";
             Supporting special fake operator: "false"
             <p/>
             Examples of valid conditions:
             false
             existtags(T$91)
             T$28='C' or T$28='R'
             T$20 in ('1','2')
             T$59='GTD' and (not existtags(T$126))
             not (T$71=2 or T$626 in ('5', '7'))
            
             @version $Revision: 1.20 $ $Date: 2008/05/06 15:27:24 $
             </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.#ctor(System.String)">
            <summary>
            Create parser and pass condition string for parsing.
            </summary>
            <param name="condition"> condition string. </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.GetCondition">
            <summary>
            Returns full list of classes of conditional operator by input string
            </summary>
            <returns> full list of classes of conditional operator </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.Parse(System.Int32)">
            <summary>
            Build operator starting from given position
            </summary>
            <param name="startPos"> Strat position for parsing of condition </param>
            <returns> position, from which should be processed next instruction. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.UpdatePointer(System.Int32,System.Int32)">
            <summary>
            Increases incoming Pointer to the number of spaces after the significant characters
            </summary>
            <param name="pointer">        Incoming pointer </param>
            <param name="countOfSymbols"> Count of significant characters </param>
            <returns> Increased incoming Pointer </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.PrepareGroupTags(System.String,System.Int32)">
            <summary>
            Prepare input condition for build correct tags condition
            </summary>
            <param name="condPart"> Part of condition </param>
            <param name="carriage"> Carriage for start of parsing </param>
            <returns> instance  of ConditionParserContainer that contains condition and carriage </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.GetDelta(System.Int32,System.Int32)">
            <summary>
            Returns delta of new and old carriages
            </summary>
            <param name="carriage">     new carriage </param>
            <param name="tempCarriage"> old carriage </param>
            <returns> delta of carriages </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ConditionValidateParser.StartWith(System.String,System.String,System.Int32)">
            <summary>
            return true if <b>string</b> Contains <b>prefix</b> from <b>startPosition</b>,
            otherwise false
            </summary>
            <param name="string"> </param>
            <param name="prefix"> </param>
            <param name="startPosition"> </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Container.ConditionalBlock">
            <summary>
            Provides the condition block.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Container.ConditionalGroup">
            <summary>
            Provides the condition group.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Container.ConditionalMessage">
            <summary>
            Provides the condition message.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Container.ConditionalType">
            <summary>
            The Condition types.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <summary>
            This method proposes for the validate condition rules.
            </summary>
            <param name="validateTag">  Tag with conditional rule. </param>
            <param name="msgFieldList"> Part of FIX message where doing validation process. </param>
            <param name="msgType">      Type of FIXMessage. </param>
            <param name="tagsMap">      All tags with conditional for current part of FIXMessage. </param>
            <param name="inversion">    Inversion: if true all validations are doing in invert order. </param>
            <returns> true if condition valid in other case false. </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true, if msg has a required tag.
            </summary>
            <param name="msgFieldList"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition.IsGroupTags">
            <summary>
            Returns true, if this group tag.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition.SetGroupTags(System.Boolean)">
            <summary>
            Setter for group.
            </summary>
            <param name="isGroup"> the group flag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition.GetTags">
            <summary>
            Gets the tags list
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator">
            <summary>
            The logical AND operator.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.#ctor(Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition,System.Boolean)">
            <summary>
            Creates the <c>AndValidateOperator</c>.
            </summary>
            <param name="operand1"> the first operand </param>
            <param name="operand2"> the second operand </param>
            <param name="isGroup"> the group tag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
             <summary>
             Returns true, if both operators returns true.
            
             The example of use: existtags(T$1) AND existtags(T$2).
             </summary>
             <param name="validateTag"> the validate tag </param>
             <param name="msgFieldList"> the message </param>
             <param name="msgType"> the message type </param>
             <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
             <param name="inversion">  Inversion: if true all validations are doing in invert order.
              </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true, if both operands are required. </summary>
            <param name="msgFieldList"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.IsGroupTags">
            <summary>
            Returns true, if one of all operand is group.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.SetGroupTags(System.Boolean)">
            <summary>
            Sets group flag. </summary>
            <param name="isGroup"> the group flag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.GetTags">
            <summary>
            Gets tags from operands.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.GetOperand1">
            <summary>
            Gets the first operand.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.AndValidateOperator.GetOperand2">
            <summary>
            Gets the second operand.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator">
            <summary>
            The <c>=</c> operator implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Creates the <c>EqValidateOperator</c>.
            </summary>
            <param name="tag"> the tag </param>
            <param name="value"> the value </param>
            <param name="isGroup"> the group flag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <summary>
            Returns true, if the values are equal.
            The example of use: T$167='OPT'.
            </summary>
            <param name="validateTag"> the validate tag </param>
            <param name="msg"> the message </param>
            <param name="msgType"> the message type </param>
            <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
            <param name="inversion">  Inversion: if true all validations are doing in invert order.
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.GetTag">
            <summary>
            Gets tag.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.EqValidateOperator.GetValue">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator">
            <summary>
            The <c>existstag</c> operator implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Creates the <c>ExistTagsValidateOperator</c>.
            </summary>
            <param name="tags"> the array of tags </param>
            <param name="isGroup"> the group flags
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <summary>
            Checks if all tags exists in <c>msg</c>.
            The example of use: existtags(T$1).
            </summary>
            <param name="validateTag"> the validate tag </param>
            <param name="msgFieldList"> the message </param>
            <param name="msgType"> the message type </param>
            <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
            <param name="inversion">  Inversion: if true all validations are doing in invert order.
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.ExistTagsValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.FalseValidateOperator">
            <summary>
            The FALSE operator.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.FalseValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <summary>
            Always returns false.
            The example of use: existtags(T$1) OR FALSE.
            </summary>
            <param name="validateTag"> the validate tag </param>
            <param name="msgFieldList"> the message </param>
            <param name="msgType"> the message type </param>
            <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
            <param name="inversion">  Inversion: if true all validations are doing in invert order.
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.FalseValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.FalseValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.FalseValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.FalseValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator">
            <summary>
            The <c>></c> operator implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates the <c>GreatThanValidateOperator</c>.
            </summary>
            <param name="tag"> the tag </param>
            <param name="value"> the value </param>
            <param name="isGroup"> the group flag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
             <summary>
             Returns true, if the <c>tag</c> value in <c>msg</c> is greater than <c>value</c>,
             otherwise false. If <c>tag</c> not exists return true.
            
             The example of use: existtags(T$1) > 10.0.
             </summary>
             <param name="validateTag"> the validate tag </param>
             <param name="msg"> the message </param>
             <param name="msgType"> the message type </param>
             <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
             <param name="inversion">  Inversion: if true all validations are doing in invert order.
            
              </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true, if the field value in <c>msg</c> is greater than that tag value,
            otherwise false.
            </summary>
            <param name="msgFieldList"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.GetTag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.GreatThanValidateOperator.GetValue">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator">
            <summary>
            The <c>IN</c> operator implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.#ctor(System.Int32,System.String[],System.Boolean)">
            <summary>
            Creates the <c>INValidateOperator</c>.
            </summary>
            <param name="tag"> the tag </param>
            <param name="values"> the array of value </param>
            <param name="isGroup"> the group tag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <summary>
            Returns true, if the tag value equals one of the array of <c>values</c>.
            The example of use: T$150 in ('G','H').
            </summary>
            <param name="validateTag"> the validate tag </param>
            <param name="msg"> the message </param>
            <param name="msgType"> the message type </param>
            <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
            <param name="inversion">  Inversion: if true all validations are doing in invert order.
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true, if the tag value equals one of the array of <c>values</c> values.
            </summary>
            <param name="msg"> the message</param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.GetTag">
            <summary>
            Gets tag.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.InValidateOperator.GetValues">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.LessThanValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.LessThanValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.LessThanValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.LessThanValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.LessThanValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator">
            <summary>
            The NOT operator implementation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.#ctor(Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition,System.Boolean)">
            <summary>
            Creates the <c>NOTValidateOperator</c>.
            </summary>
            <param name="operand"> the operand </param>
            <param name="isGroup"> the group tag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
            <summary>
            Returns true, if <c>operand</c> is true.
            The example of use: NOT existtags(T$2).
            </summary>
            <param name="validateTag"> the validate tag </param>
            <param name="msgFieldList"> the message </param>
            <param name="msgType"> the message type </param>
            <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
            <param name="inversion">  Inversion: if true all validations are doing in invert order.
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true if <c>operand</c> is not required. </summary>
            <param name="msgFieldList"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.IsGroupTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.SetGroupTags(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.GetTags">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.NotValidateOperator.GetOperand">
            <summary>
            Gets the operand
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator">
            <summary>
            The logical OR operator.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.#ctor(Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition,System.Boolean)">
            <summary>
            Creates the <c>OrValidateOperator</c>.
            </summary>
            <param name="operand1"> the first operand </param>
            <param name="operand2"> the second operand </param>
            <param name="isGroup"> the group tag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.ValidateCondition(System.Int32,Epam.FixAntenna.NetCore.Message.FixMessage,System.String,System.Collections.Generic.IDictionary{System.Int32,Epam.FixAntenna.NetCore.Validation.Validators.Condition.ICondition},System.Boolean)">
             <summary>
             Returns true, if one of the operators returns true.
            
             The example of use: existtags(T$1) OR existtags(T$2).
             </summary>
             <param name="validateTag"> the validate tag </param>
             <param name="msgFieldList"> the message </param>
             <param name="msgType"> the message type </param>
             <param name="tagsMap">    All tags with conditional for current part of FIXMessage. </param>
             <param name="inversion">  Inversion: if true all validations are doing in invert order.
              </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.IsRequired(Epam.FixAntenna.NetCore.Message.FixMessage)">
            <summary>
            Returns true, if both operands are required. </summary>
            <param name="msgFieldList"> the message
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.IsGroupTags">
            <summary>
            Returns true, if one of all operand is group.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.SetGroupTags(System.Boolean)">
            <summary>
            Sets group flag. </summary>
            <param name="isGroup"> the group flag
             </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.GetTags">
            <summary>
            Gets tags from operands.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.GetOperand1">
            <summary>
            Gets the first operand.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Condition.Operators.OrValidateOperator.GetOperand2">
            <summary>
            Gets the second operand.
            </summary>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.DuplicatedFieldValidator">
            <summary>
            Implementation of IValidator that supports duplicated field validation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.DuplicatedFieldValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Cerates <c>DuplicatedFieldValidator</c>.
            </summary>
            <param name="util"> of type FixUtils </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.DuplicatedFieldValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer">
            <summary>
            Contains the list of validators.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.ValidatorType" />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.PutNewValidator(Epam.FixAntenna.NetCore.Validation.ValidatorType,Epam.FixAntenna.NetCore.Validation.IValidator)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.GetValidator(Epam.FixAntenna.NetCore.Validation.ValidatorType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.GetValidatorsWithOutInputs(System.Collections.Generic.IList{Epam.FixAntenna.NetCore.Validation.ValidatorType})">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.ValidatorsWithOutMessageType">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.AllValidators">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.MessageTypeValidator">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.PutOtherValidators(Epam.FixAntenna.NetCore.Validation.IValidatorContainer)">
            <inheritdoc />
        </member>
        <member name="P:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorContainer.ValidatorType">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorFactory">
            <summary>
            Provides ability to create validators.
            </summary>
            <seealso cref="T:Epam.FixAntenna.NetCore.Validation.ValidatorType"> </seealso>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorFactory.CreateValidator(Epam.FixAntenna.NetCore.Validation.ValidatorType)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorFactory.CreateAllValidators">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorFactory.CreateRequiredValidator">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.Factory.ValidatorFactory.CreateFactory(Epam.FixAntenna.NetCore.Configuration.FixVersionContainer,Epam.FixAntenna.NetCore.Configuration.FixVersionContainer)">
            <summary>
            Creates validation factory for build any validators.
            </summary>
            <param name="fixVersion"> FIX version of dictionary. </param>
            <param name="appVersion"> Application FIX version of dictionary. </param>
            <returns> Instance of <c>ValidationFactory</c>. </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.FieldAllowedInMessageValidator">
            <summary>
            Implementation of IValidator that supports field allowed in message validation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldAllowedInMessageValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Creates the <c>FieldAllowedInMessageValidation</c>.
            </summary>
            <param name="util"> of type FixUtils </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldAllowedInMessageValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.FieldOrderValidator">
            <summary>
            Implementation of IValidator that supports field order validation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldOrderValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Creates the <c>FieldOrderValidator</c>.
            </summary>
            <param name="util"> instance of  FixUtils </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldOrderValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Creates <c>FieldsDefinitionsTypeValidator</c>.
            </summary>
            <param name="util"> Fix Utils </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.IsCorrectValue(Epam.FixAntenna.NetCore.Message.TagValue,Epam.FixAntenna.NetCore.Validation.Entities.Fielddef)">
            <summary>
            Verifies whether value is present in list of valid values
            </summary>
            <param name="tagValue">    Value of field </param>
            <param name="fielddef"> list of valid values </param>
            <returns> <c>true</c> if present, otherwise <c>false</c> </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.CheckItems(System.Collections.Generic.IList{Epam.FixAntenna.NetCore.Validation.Entities.Item},System.String)">
            <summary>
            find item in list
            </summary>
            <param name="items"> list </param>
            <param name="value"> item </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.CountDelimeters(System.Byte[],System.Char)">
            <summary>
            count delimeter ch in array of bytes
            </summary>
            <param name="values"> array of bytes </param>
            <param name="ch">     delimeter </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.CheckMulti(Epam.FixAntenna.NetCore.Validation.Entities.Multi,System.String)">
            <summary>
            check multi element
            </summary>
            <param name="multi"> </param>
            <returns> true if valid </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.PrepareMessage(System.Int32,System.Int64,System.String)">
            <summary>
            Prepare string for exception
            </summary>
            <param name="tag">            Tag </param>
            <param name="sequenceNumber"> Sequence number of FIX message. </param>
            <param name="messageType">    Type of FIX message. </param>
            <returns> Formated error string </returns>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.FieldsDefinitionsTypeValidator.PrepareType(System.String)">
            <summary>
            Returns string without "-"
            </summary>
            <param name="type"> Input String </param>
            <returns> String without "-" </returns>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.GroupValidator">
            <summary>
            Implementation of IValidator that supports group validation.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.GroupValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.GroupValidator.CheckOutsideGroupTags(System.String,Epam.FixAntenna.NetCore.Message.FixMessage,Epam.FixAntenna.NetCore.Message.FixMessage,System.Int32,System.Int32,Epam.FixAntenna.NetCore.Validation.Error.FixErrorContainer)">
            <summary>
            Checks outside group tags
            </summary>
            <param name="messageFields">      the message type </param>
            <param name="groupContentFields"> the group fields from messageFields </param>
            <param name="groupTag">           the group tag </param>
            <param name="startField">         the start tag of group </param>
            <param name="errors">             the error container </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.MessageTypeValidator">
            <summary>
            The message type validator. The validator checks only 35 tag.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.MessageTypeValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Constructor MessageTypeValidator creates a new MessageTypeValidator instance.
            </summary>
            <param name="util"> of type FixUtils </param>
        </member>
        <member name="T:Epam.FixAntenna.NetCore.Validation.Validators.MessageWelformedValidator">
            <summary>
            Implementation of IValidator that supports message welformed validate.
            Returns <c>non-null</c> on the first (if any) match.
            </summary>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.MessageWelformedValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.RequiredFieldValidator.#ctor(Epam.FixAntenna.NetCore.Validation.Utils.FixUtil)">
            <summary>
            Constructor RequiredFieldValidator creates a new RequiredFieldValidator instance.
            </summary>
            <param name="util"> of type FixUtils </param>
        </member>
        <member name="M:Epam.FixAntenna.NetCore.Validation.Validators.RequiredFieldValidator.Validate(System.String,Epam.FixAntenna.NetCore.Validation.IValidationFixMessage,System.Boolean)">
            <inheritdoc />
        </member>
    </members>
</doc>
